!This file contains all the subroutines of leaching chemical model

#include "fdebug.h"

module darcy_impes_leaching_chemical_model

  use spud
  use fields
  use state_module
  use fldebug
  use field_options
  use spud
  use fields_manipulation
  use data_structures
  use initialise_fields_module
  use global_parameters, only: OPTION_PATH_LEN
  use darcy_impes_leaching_types
  use fefields, only: compute_cv_mass

  use darcy_impes_assemble_type, only: darcy_impes_type
  
  implicit none
  private
  
  public :: initialize_leaching_chemical_model, &
            finalize_leaching_chemical_model, &
            add_leach_chemical_prog_src_to_rhs
  

  
  
  
  
  contains
  
  
  subroutine initialize_leaching_chemical_model(di)
     !!initialize the leaching chemical model
      
     type(darcy_impes_type), intent(inout) :: di
     
  
     !local parameter
     integer :: p,f,flc, ns, nd, nb,fb
     character(len=OPTION_PATH_LEN) :: option_path, reaction_name, path_l
     
     !if there is a leaching chemical model, allocate the fields
     if (have_option('/Leaching_Chemical_Model')) then
        di%lc%have_leach_chem_model= .true.
        !---------------------allocate the fields in the chemical model-------------
        !for the solution phase reactions
        if (have_option('/Leaching_Chemical_Model/SolutionPhaseReactions')) then
           di%lc%have_sol=.true.
           !allocate the solution phase reaction
           ns= option_count('/Leaching_Chemical_Model/SolutionPhaseReactions/reaction')
           option_path=('/Leaching_Chemical_Model/SolutionPhaseReactions/reaction')
           do f= 1, ns
           
              call get_option(trim(option_path)//'['//int2str(f-1)//']/name', reaction_name)
              select case(trim(reaction_name)) 
                
                case("Ferrous_Oxidation")
                  di%lc%sol%feox%dcdt => extract_scalar_field(di%state(1), 'feox_dFe2_dt', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named feox_dFe2_dt')
                  end if
                  !get activation energy
                  path_l = trim(option_path)//'::'//trim(reaction_name)
                  call get_option(trim(path_l)//'/rate_constant_Arrhenius/activation_energy',& 
                                                                          di%lc%sol%feox%ak%ae) 
                  !get gas constant
                  call get_option(trim(path_l)//'/rate_constant_Arrhenius/gas_constant',& 
                                                                     di%lc%sol%feox%ak%gc)
                  !count the reacting bulk species
                  nb=option_count(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration')
                  if (nb < 1)  FLAbort('the number of reacting bulk concentration for ferrous oxidation should be at least 1')
                  allocate(di%lc%sol%feox%ak%bulk(nb))
                  
                  do fb=1, nb
                    !get related bulk species name
                    call get_option(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration['//int2str(fb-1)//']/name', di%lc%sol%feox%ak%bulk(fb)%lc_name)
                    !gri the order of reaction
                    call get_option(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration::'//trim(di%lc%sol%feox%ak%bulk(fb)%lc_name)&
                                                                                          //'/order', di%lc%sol%feox%ak%bulk(fb)%order)
                  end do
                   
                  
                case('Jarosite_Precipitation')
                  di%lc%sol%jaro%dcdt => extract_scalar_field(di%state(1), 'jaro_dM_dt', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named jaro_dM_dt')
                  end if

                case('Oxygen_dissolution')
                  di%lc%sol%oxdi%dcdt => extract_scalar_field(di%state(1), 'oxdi_dOg_dt', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named oxdi_dOg_dt')
                  end if

                case default
                  FLAbort("Leaching chemical algorithm " // trim(reaction_name) // " not found")
              end select
           
           end do
        
        else
           di%lc%have_sol=.false.

        end if
        
        !for mineral dissolution
        if (have_option('/Leaching_Chemical_Model/MineralDissolution')) then
           di%lc%have_dis=.true.
           !allocate the mineral dissolution
           nd=option_count('/Leaching_Chemical_Model/MineralDissolution/reaction')
           option_path=('/Leaching_Chemical_Model/MineralDissolution/reaction')
           do f=1, nd
             
              call get_option(trim(option_path)//'['//int2str(f-1)//']/name', reaction_name)
              select case(trim(reaction_name))
              
                case('CuFeS2_oxidation_aqueous_ferric_sulfate')
                  di%lc%dis%chal%dcdt => extract_scalar_field(di%state(1), 'chal_dCuFe2_dt', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named chal_dCuFe2_dt')
                  end if
                  !get extraction rate
                  di%lc%dis%chal%ex_r => extract_scalar_field(di%state(1), 'chal_extraction_rate', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named chal_extraction_rate')
                  end if
                  !get current extraction
                  di%lc%dis%chal%ex => extract_scalar_field(di%state(1), 'chal_current_extraction', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named chal_current_extraction')
                  end if
                  !get the molar concentraction of the mineral, mole per volume of heap
                  di%lc%dis%chal%mc => extract_scalar_field(di%state(1), 'chal_molar_concentration', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named chal_molar_concentration')
                  end if                  
                  !get activation energy
                  path_l = trim(option_path)//'::'//trim(reaction_name)
                  call get_option(trim(path_l)//'/rate_constant_Arrhenius/activation_energy',&         
                                                                          di%lc%dis%chal%ak%ae)
                  !get gas constant
                  call get_option(trim(path_l)//'/rate_constant_Arrhenius/gas_constant',&
                                                                     di%lc%dis%chal%ak%gc)
                  !count the reacting bulk species
                  nb=option_count(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration')
                  if (nb < 1)  FLAbort('the number of reacting bulk concentration for chalcopyrite dissolution should be at least 1')
                  allocate(di%lc%dis%chal%ak%bulk(nb))
                  do fb=1, nb
                    !get related bulk species name
                    call get_option(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration['//int2str(fb-1)//']/name', di%lc%dis%chal%ak%bulk(fb)%lc_name)
                    !gri the order of reaction
                    call get_option(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration::'//trim(di%lc%dis%chal%ak%bulk(fb)%lc_name)&
                                                                                          //'/order', di%lc%dis%chal%ak%bulk(fb)%order)
                  end do
               
                case('FeS2_oxidation_aqueous_ferric_sulfate')
                  di%lc%dis%pyri%dcdt => extract_scalar_field(di%state(1), 'pyri_dFe2_dt', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named pyri_dFe2_dt')
                  end if
                  !get extraction rate
                  di%lc%dis%pyri%ex_r => extract_scalar_field(di%state(1), 'pyri_extraction_rate', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named pyri_extraction_rate')
                  end if
                  !get current extraction
                  di%lc%dis%pyri%ex => extract_scalar_field(di%state(1), 'pyri_current_extraction', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named pyri_current_extraction')
                  end if
                  !get the molar concentraction of the mineral, mole per volume of heap
                  di%lc%dis%pyri%mc => extract_scalar_field(di%state(1), 'pyri_molar_concentration', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named pyri_molar_concentration')
                  end if
                  !get activation energy
                  path_l = trim(option_path)//'::'//trim(reaction_name)
                  call get_option(trim(path_l)//'/rate_constant_Arrhenius/activation_energy',&
                                                                          di%lc%dis%pyri%ak%ae)
                  !get gas constant
                  call get_option(trim(path_l)//'/rate_constant_Arrhenius/gas_constant',&
                                                                     di%lc%dis%pyri%ak%gc)
                  !count the reacting bulk species
                  nb=option_count(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration')
                  if (nb < 1)  FLAbort('the number of reacting bulk concentration for pyrite dissolution should be at least 1')
                  allocate(di%lc%dis%pyri%ak%bulk(nb))
                  do fb=1, nb
                    !get related bulk species name
                    call get_option(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration['//int2str(fb-1)//']/name', di%lc%dis%pyri%ak%bulk(fb)%lc_name)
                    !gri the order of reaction
                    call get_option(trim(path_l)//'/bulk_fluid_conditions/bulk_concentration::'//trim(di%lc%dis%pyri%ak%bulk(fb)%lc_name)&
                                                                                          //'/order', di%lc%dis%pyri%ak%bulk(fb)%order)
                  end do
     
                case('S0_dissolution')
                  di%lc%dis%sulf%dcdt => extract_scalar_field(di%state(1), 'sulf_dS0_dt', stat=stat)
                  if (.not. stat==0) then
                    FLAbort('failed to extract the leaching reaction named sulf_dS0_dt')
                  end if
                
                case default
                  FLAbort("Leaching chemical algorithm " // trim(reaction_name) // " not found")

             end select
             
           end do   
        else 
           di%lc%have_dis=.false.      

        end if

        !----------allocate the generic prognostic leaching source terms-------------       
        !--loop over phase
        do f=1, size(di%generic_prog_sfield)
          option_path=di%generic_prog_sfield(f)%sfield%option_path
          p=di%generic_prog_sfield(f)%phase
          !---check for solution phase source-----------
          ns = option_count(trim(option_path)//'/prognostic/LeachingChemicalSourceTerm/SolutionPhaseSource/scalar_field')
          if (.not. ns==0) then
            di%generic_prog_sfield(f)%lc_src%have_sol_src = .true.
            allocate(di%generic_prog_sfield(f)%lc_src%sfield_sol_src(ns))

            !extract the name of the chemical reaction and stoichemistry factor
            do flc=1, ns 
              call get_option(trim(option_path)//'/prognostic/LeachingChemicalSourceTerm/&
                              SolutionPhaseSource/scalar_field['//int2str(flc-1)//']/name', & 
                              di%generic_prog_sfield(f)%lc_src%sfield_sol_src(flc)%lc_name)
              
              call get_option(trim(option_path)//'/prognostic/LeachingChemicalSourceTerm/&
                              SolutionPhaseSource/scalar_field['//int2str(flc-1)//']/&
                              diagnostic/stoichiometric_factor', &
                              di%generic_prog_sfield(f)%lc_src%sfield_sol_src(flc)%sto_factor)
              di%generic_prog_sfield(f)%lc_src%sfield_sol_src(flc)%sfield => extract_scalar_field(di%state(p), &
                                                               trim(di%generic_prog_sfield(f)%sfield%name)//'_'&
                                           //trim(di%generic_prog_sfield(f)%lc_src%sfield_sol_src(flc)%lc_name))
            end do
     
          else
            di%generic_prog_sfield(f)%lc_src%have_sol_src = .false.

          end if
          
          !-----check for mineral dissolution phase source------
          nd = option_count(trim(option_path)//'/prognostic/LeachingChemicalSourceTerm/MineralDissolutionSource/scalar_field')
          if (.not. nd==0) then
            di%generic_prog_sfield(f)%lc_src%have_dis_src = .true.
            allocate(di%generic_prog_sfield(f)%lc_src%sfield_dis_src(nd))

            !extract the name of the chemical reaction and stoichemistry factori
            do flc=1, nd
              call get_option(trim(option_path)//'/prognostic/LeachingChemicalSourceTerm/&
                              MineralDissolutionSource/scalar_field['//int2str(flc-1)//']/name', &
                              di%generic_prog_sfield(f)%lc_src%sfield_dis_src(flc)%lc_name)

              call get_option(trim(option_path)//'/prognostic/LeachingChemicalSourceTerm/&
                              MineralDissolutionSource/scalar_field['//int2str(flc-1)//']/&
                              diagnostic/stoichiometric_factor', &
                              di%generic_prog_sfield(f)%lc_src%sfield_dis_src(flc)%sto_factor)
              di%generic_prog_sfield(f)%lc_src%sfield_dis_src(flc)%sfield => extract_scalar_field(di%state(p), &
                                                               trim(di%generic_prog_sfield(f)%sfield%name)//"_"&
                                           //trim(di%generic_prog_sfield(f)%lc_src%sfield_dis_src(flc)%lc_name))
            end do


          else
            di%generic_prog_sfield(f)%lc_src%have_dis_src = .false.
          
          endif

        end do

     else 
        di%lc%have_leach_chem_model= .false.
     
     end if
  end subroutine initialize_leaching_chemical_model

  !--------------------------------------------------------------------------------------------------------
  subroutine finalize_leaching_chemical_model(di) 
     
     !finalize terms from leaching_chemical_model

     type(darcy_impes_type), intent(inout) :: di
     
     !local variables
     integer :: f, ns, nd, flc
     
     character(len=OPTION_PATH_LEN) :: option_path, reaction_name
     
     di%lc%have_leach_chem_model= .False.
     
     !deallocate leaching chemical model
     if (di%lc%have_sol) then
       
       di%lc%have_sol=.false.
       ns= option_count('/Leaching_Chemical_Model/SolutionPhaseReactions/reaction')
       option_path=('/Leaching_Chemical_Model/SolutionPhaseReactions/reaction')
       do f= 1, ns

         call get_option(trim(option_path)//'['//int2str(f-1)//']/name', reaction_name)
         select case(trim(reaction_name))

           case("Ferrous_Oxidation")
              nullify(di%lc%sol%feox%dcdt)
              deallocate(di%lc%sol%feox%ak%bulk)

           case('Jarosite_Precipitation')
              nullify(di%lc%sol%jaro%dcdt)

           case('Oxygen_dissolution')
              nullify(di%lc%sol%oxdi%dcdt)
         end select
         
       end do

     end if
     
     
     if (di%lc%have_dis) then
       
       di%lc%have_dis=.false.
       nd=option_count('/Leaching_Chemical_Model/MineralDissolution/reaction')
       option_path=('/Leaching_Chemical_Model/MineralDissolution/reaction')
       do f= 1, nd

         call get_option(trim(option_path)//'['//int2str(f-1)//']/name', reaction_name)
         select case(trim(reaction_name))

           case('CuFeS2_oxidation_aqueous_ferric_sulfate')
              nullify(di%lc%dis%chal%dcdt)
              nullify(di%lc%dis%chal%ex_r)
              nullify(di%lc%dis%chal%ex)
              nullify(di%lc%dis%chal%mc)
              deallocate(di%lc%dis%chal%ak%bulk)

           case('FeS2_oxidation_aqueous_ferric_sulfate')
              nullify(di%lc%dis%pyri%dcdt)
              nullify(di%lc%dis%pyri%ex_r)
              nullify(di%lc%dis%pyri%ex)
              nullify(di%lc%dis%pyri%mc)
              deallocate(di%lc%dis%pyri%ak%bulk)

           case('S0_dissolution')
              nullify(di%lc%dis%sulf%dcdt)
              
         end select
           
       end do

     end if

     !deallocate leaching prognostic source field 
     do f=1, size(di%generic_prog_sfield)
       
       if (di%generic_prog_sfield(f)%lc_src%have_sol_src) then
         di%generic_prog_sfield(f)%lc_src%have_sol_src = .false.
         do flc=1, size(di%generic_prog_sfield(f)%lc_src%sfield_sol_src)
           nullify(di%generic_prog_sfield(f)%lc_src%sfield_sol_src(flc)%sfield)
         end do
         deallocate(di%generic_prog_sfield(f)%lc_src%sfield_sol_src)
       end if
       
       if (di%generic_prog_sfield(f)%lc_src%have_dis_src) then
         di%generic_prog_sfield(f)%lc_src%have_dis_src = .false.
         do flc=1, size(di%generic_prog_sfield(f)%lc_src%sfield_dis_src)
           nullify(di%generic_prog_sfield(f)%lc_src%sfield_dis_src(flc)%sfield)
         end do
         deallocate(di%generic_prog_sfield(f)%lc_src%sfield_dis_src)
       end if

     end do
   
   end subroutine finalize_leaching_chemical_model


   !********The following are the subroutines to calculate fields for the chemical model****************
   
   !-------------Add the chemical source terms to RHS for solving the prognostic fields----------------
   subroutine add_leach_chemical_prog_src_to_rhs(di,f)
      type(darcy_impes_type), intent(inout) :: di
      integer, intent(in) :: f
      
      !local variables
      type(scalar_field) :: leach_src
      integer :: n
      real :: s_factor !the stoichemistry factor
      character(len=FIELD_NAME_LEN) :: lc_name
      type(scalar_field), pointer :: src => null()
      
      call allocate(leach_src,di%pressure_mesh)
      call zero(leach_src)

      !for the solution phase reactions
      if (di%generic_prog_sfield(f)%lc_src%have_sol_src) then

        do n=1, size(di%generic_prog_sfield(f)%lc_src%sfield_sol_src) 
          lc_name = di%generic_prog_sfield(f)%lc_src%sfield_sol_src(n)%lc_name
          s_factor = di%generic_prog_sfield(f)%lc_src%sfield_sol_src(n)%sto_factor

          select case(trim(lc_name))
             case("Ferrous_Oxidation")
               if (.not. associated(di%lc%sol%feox%dcdt)) &
               FLAbort('Ferrous_Oxidation is turned off in the leaching chemical model, &
               while its source term is turned on under the prognostic scaler field') 
               src => di%lc%sol%feox%dcdt
               call addto(leach_src, src, s_factor) !addto the chemical source term with scale of the stoichemistry factor 
             
             case('Jarosite_Precipitation')
               if (.not. associated(di%lc%sol%jaro%dcdt)) &
               FLAbort('Jarosite_Precipitation is turned off in the leaching chemical model, &
               while its source term is turned on under the prognostic scaler field')  
               src => di%lc%sol%jaro%dcdt
               call addto(leach_src, src, s_factor) !addto the chemical source term with scale of the stoichemistry factor
            
             case('Oxygen_dissolution_liquid_phase') 
               if (.not. associated(di%lc%sol%oxdi%dcdt)) &
               FLAbort('Oxygen_dissolution is turned off in the leaching chemical model, &
               while its source term is turned on under the prognostic scaler field')
               src => di%lc%sol%oxdi%dcdt
               call addto(leach_src, src, s_factor) !addto the chemical source term with scale of the stoichemistry factor
            
             case('Oxygen_dissolution_gas_phase')
               if (.not. associated(di%lc%sol%oxdi%dcdt)) &
               FLAbort('Oxygen_dissolution is turned off in the leaching chemical model, &
               while its source term is turned on under the prognostic scaler field')
               src => di%lc%sol%oxdi%dcdt
               call addto(leach_src, src, s_factor) !addto the chemical source term with scale of the stoichemistry factor              
            
             case default
               FLAbort("Leaching chemical algorithm " // trim(lc_name) // " not found")
          end select

        end do

      end if

      !for the mineral dissolution ractions
      if (di%generic_prog_sfield(f)%lc_src%have_dis_src) then
         
        do n=1, size(di%generic_prog_sfield(f)%lc_src%sfield_dis_src)
          lc_name = di%generic_prog_sfield(f)%lc_src%sfield_dis_src(n)%lc_name
          s_factor = di%generic_prog_sfield(f)%lc_src%sfield_dis_src(n)%sto_factor
          
          select case(trim(lc_name))
             case("CuFeS2_oxidation_aqueous_ferric_sulfate")
               if (.not. associated(di%lc%dis%chal%dcdt)) &
               FLAbort('CuFeS2_oxidation_aqueous_ferric_sulfate is turned off in the leaching chemical model, &
               while its source term is turned on under the prognostic scaler field')
               src => di%lc%dis%chal%dcdt
               call addto(leach_src, src, s_factor) !addto the chemical source term with scale of the stoichemistry factor
 

             case('FeS2_oxidation_aqueous_ferric_sulfate')
               if (.not. associated(di%lc%dis%pyri%dcdt)) &
               FLAbort('FeS2_oxidation_aqueous_ferric_sulfate is turned off in the leaching chemical model, &
               while its source term is turned on under the prognostic scaler field')
               src => di%lc%dis%pyri%dcdt 
               call addto(leach_src, src, s_factor) !addto the chemical source term with scale of the stoichemistry factor

             case('S0_dissolution')
               if (.not. associated(di%lc%dis%sulf%dcdt)) &
               FLAbort('S0_dissolution is turned off in the leaching chemical model, &
               while its source term is turned on under the prognostic scaler field')
               src => di%lc%dis%sulf%dcdt
               call addto(leach_src, src, s_factor) !addto the chemical source term with scale of the stoichemistry factor

             case default
               FLAbort("Leaching chemical algorithm " // trim(lc_name) // " not found")
          end select


        end do

      end if
      
      !Add leaching chemical source term to rhs
      call compute_cv_mass(di%positions, di%cv_mass_pressure_mesh_with_source, leach_src)
      call addto(di%rhs, di%cv_mass_pressure_mesh_with_source)

      call deallocate(leach_src)

      nullify(src)
   end subroutine add_leach_chemical_prog_src_to_rhs

end  module
