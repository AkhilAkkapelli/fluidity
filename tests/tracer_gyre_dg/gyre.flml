<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">gyre</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">oceans</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">2</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="gyre">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
                <mesh_shape>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period>
            <constant>
                <real_value rank="0">499999.9</real_value>
            </constant>
        </dump_period>
        <output_mesh name="VelocityMesh"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">25000</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">10000000</real_value>
        </finish_time>
    </timestepping>
    <physical_parameters></physical_parameters>
    <material_phase name="Water">
        <vector_field name="Velocity" rank="1">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="whole_mesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;    from math import pi,exp,sin,cos,sqrt&#x0A;    L    = 1.0e+6       # the domain is a L-by-L m^2 square&#x0A;    beta = 1.0e-11      # Coriolis paramter 1st order y-derivative [(ms)^-1]&#x0A;    f0   = 1.0e-4       # Coriolis parameter [s^-1]&#x0A;    drag = 1.0e-6       # bottom drag coefficient [s^-1]&#x0A;    g    = 1.0e+1       # gravity [m*s^-2]&#x0A;    H    = 2.0e+2       # constant depth [m]&#x0A;    rho  = 1.0e+3       # water density [kg*m^-3]&#x0A;    wind = 1.0e-1       # wind stress [N*m^-2]&#x0A;    &#x0A;    x=X[0]/L&#x0A;    y=X[1]/L&#x0A;    epsilon  = drag/(L*beta)&#x0A;    Rp   = (-1 + sqrt(1+4*pi*pi*epsilon*epsilon))/(2*epsilon)&#x0A;    Rm   = (-1 - sqrt(1+4*pi*pi*epsilon*epsilon))/(2*epsilon)&#x0A;    eP    = exp(Rp)&#x0A;    eM    = exp(Rm)&#x0A;    ePx   = exp(Rp*x)&#x0A;    eMx   = exp(Rm*x)&#x0A;    U_scale  = wind/(rho*H*drag*pi)&#x0A;    &#x0A;    U=(-U_scale*cos(pi*y)*pi*(1 + ((eM-1)*ePx + (1-eP)*eMx)/(eP-eM)),&#x0A;          U_scale*sin(pi*y)*((eM-1)*ePx*Rp + (1-eP)*eMx*Rm)/(eP-eM))&#x0A;    return U</string_value>
                    </python>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </vector_field>
        <scalar_field name="Tracer" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <twice></twice>
                            </integrate_advection_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <absolute_error>
                        <real_value rank="0">0</real_value>
                    </absolute_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="whole_mesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;    from numpy import matrix&#x0A;    from math import exp&#x0A;    L=1.0e+6&#x0A;    return 10.0 * exp(-((X[0] - 2.0*L/3.0)**2 + (X[1] - L/3.0)**2) / (2*(L/12.5)**2))</string_value>
                        <comment>Produce a Gaussian hump</comment>
                    </python>
                </initial_condition>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
    </material_phase>
</fluidity_options>
