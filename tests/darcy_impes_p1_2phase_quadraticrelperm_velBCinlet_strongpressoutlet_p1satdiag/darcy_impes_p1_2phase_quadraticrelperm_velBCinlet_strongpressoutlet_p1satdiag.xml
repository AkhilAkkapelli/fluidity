<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag</name>
  <owner userid="btollit"/>
  <tags>diml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.diml 

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.diml 
sed -i 's/_A/_B/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.diml

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.diml 
sed -i 's/_A/_C/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.diml

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.diml 
sed -i 's/_A/_D/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.diml



../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.diml 

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B.diml 
sed -i 's/_A/_B/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B.diml

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C.diml 
sed -i 's/_A/_C/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C.diml

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D.diml 
sed -i 's/_A/_D/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D.diml



rm temp.txt  #TEMP
./Run_Compare_Numerical_To_Analytic_1d_Multiple.py


../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.diml 

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.diml 
sed -i 's/_A/_B/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.diml

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.diml 
sed -i 's/_A/_C/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.diml 

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.diml 
sed -i 's/_A/_B/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.diml



../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.diml 

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.diml 
sed -i 's/_A/_B/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.diml

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.diml 
sed -i 's/_A/_C/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.diml 

cp darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.diml darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.diml 
sed -i 's/_A/_B/' darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.diml

../../bin/darcy_impes darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.diml 

rm -f darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.diml
    </command_line>
    <!-- One/two/three dimensional problem for darcy flow using the IMPES solver with one region with 2 phases using Quadratic relative permeabilities with a TotalDarcyVelocity BC at the inlet, a strong pressure BC at outlet and the first phase saturation diagnostic. Different CV face value schemes are tested in 1,2 and 3d. The order of convergence is checked for both the saturation and pressure. -->
  </problem_definition>
  <variables>
    <variable name="AB_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")

A_l2_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      A_l2_error = float(line_split[3])

B_l2_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

AB_l2_ratio = A_l2_error / B_l2_error
AB_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d = log(AB_l2_ratio, 2)

A_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase2"]["AnalyticSaturationError"]["l2norm"][-1]  #TEMP
B_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["l2norm"][-1]  #TEMP
rate_mine = log(A_l2_error_mine / B_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_A_orig = " + str(A_l2_error) + ";\t" + "l2_B_orig = " + str(B_l2_error) + ";\t" + "rate_orig = " + str(AB_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_A_mine = " + str(A_l2_error_mine) + ";\t" + "l2_B_mine = " + str(B_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="BC_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")

B_l2_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

C_l2_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

BC_l2_ratio = B_l2_error / C_l2_error
BC_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d = log(BC_l2_ratio, 2)

B_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["l2norm"][-1]  #TEMP
C_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["l2norm"][-1]  #TEMP
rate_mine = log(B_l2_error_mine / C_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_B_orig = " + str(B_l2_error) + ";\t" + "l2_C_orig = " + str(C_l2_error) + ";\t" + "rate_orig = " + str(BC_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_B_mine = " + str(B_l2_error_mine) + ";\t" + "l2_C_mine = " + str(C_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="CD_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D_1_output_saturation_error_norm.txt", "r")

C_l2_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

D_l2_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      D_l2_error = float(line_split[3])

CD_l2_ratio = C_l2_error / D_l2_error
CD_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d = log(CD_l2_ratio, 2)

C_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["l2norm"][-1]  #TEMP
D_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase2"]["AnalyticSaturationError"]["l2norm"][-1]  #TEMP
rate_mine = log(C_l2_error_mine / D_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nCD_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_C_orig = " + str(C_l2_error) + ";\t" + "l2_D_orig = " + str(D_l2_error) + ";\t" + "rate_orig = " + str(CD_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_C_mine = " + str(C_l2_error_mine) + ";\t" + "l2_D_mine = " + str(D_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="AB_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")

A_l2_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      A_l2_error = float(line_split[3])

B_l2_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

AB_l2_ratio = A_l2_error / B_l2_error
AB_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d = log(AB_l2_ratio, 2)

A_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase2"]["AnalyticSaturationError"]["cv_l2norm"][-1]  #TEMP
B_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["cv_l2norm"][-1]  #TEMP
rate_mine = log(A_l2_error_mine / B_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_A_orig = " + str(A_l2_error) + ";\t" + "l2_B_orig = " + str(B_l2_error) + ";\t" + "rate_orig = " + str(AB_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_A_mine = " + str(A_l2_error_mine) + ";\t" + "l2_B_mine = " + str(B_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="BC_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")

B_l2_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

C_l2_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

BC_l2_ratio = B_l2_error / C_l2_error
BC_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d = log(BC_l2_ratio, 2)

B_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["cv_l2norm"][-1]  #TEMP
C_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["cv_l2norm"][-1]  #TEMP
rate_mine = log(B_l2_error_mine / C_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_B_orig = " + str(B_l2_error) + ";\t" + "l2_C_orig = " + str(C_l2_error) + ";\t" + "rate_orig = " + str(BC_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_B_mine = " + str(B_l2_error_mine) + ";\t" + "l2_C_mine = " + str(C_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="CD_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D_1_output_saturation_error_norm.txt", "r")

C_l2_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

D_l2_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      D_l2_error = float(line_split[3])

CD_l2_ratio = C_l2_error / D_l2_error
CD_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d = log(CD_l2_ratio, 2)

C_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["cv_l2norm"][-1]  #TEMP
D_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase2"]["AnalyticSaturationError"]["cv_l2norm"][-1]  #TEMP
rate_mine = log(C_l2_error_mine / D_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nCD_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_C_orig = " + str(C_l2_error) + ";\t" + "l2_D_orig = " + str(D_l2_error) + ";\t" + "rate_orig = " + str(CD_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_C_mine = " + str(C_l2_error_mine) + ";\t" + "l2_D_mine = " + str(D_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="AB_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")

A_l1_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      A_l1_error = float(line_split[3])

B_l1_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

AB_l1_ratio = A_l1_error / B_l1_error
AB_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d = log(AB_l1_ratio, 2)

A_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]  #TEMP
B_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]  #TEMP
rate_mine = log(A_l1_error_mine / B_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_A_orig = " + str(A_l1_error) + ";\t" + "l1_B_orig = " + str(B_l1_error) + ";\t" + "rate_orig = " + str(AB_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_A_mine = " + str(A_l1_error_mine) + ";\t" + "l1_B_mine = " + str(B_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="BC_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")

B_l1_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

C_l1_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

BC_l1_ratio = B_l1_error / C_l1_error
BC_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d = log(BC_l1_ratio, 2)

B_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]  #TEMP
C_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]  #TEMP
rate_mine = log(B_l1_error_mine / C_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_B_orig = " + str(B_l1_error) + ";\t" + "l1_C_orig = " + str(C_l1_error) + ";\t" + "rate_orig = " + str(BC_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_B_mine = " + str(B_l1_error_mine) + ";\t" + "l1_C_mine = " + str(C_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="CD_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D_1_output_saturation_error_norm.txt", "r")

C_l1_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

D_l1_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      D_l1_error = float(line_split[3])

CD_l1_ratio = C_l1_error / D_l1_error
CD_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d = log(CD_l1_ratio, 2)

C_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]  #TEMP
D_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]  #TEMP
rate_mine = log(C_l1_error_mine / D_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nCD_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_C_orig = " + str(C_l1_error) + ";\t" + "l1_D_orig = " + str(D_l1_error) + ";\t" + "rate_orig = " + str(CD_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_C_mine = " + str(C_l1_error_mine) + ";\t" + "l1_D_mine = " + str(D_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="AB_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")

A_l1_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      A_l1_error = float(line_split[3])

B_l1_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

AB_l1_ratio = A_l1_error / B_l1_error
AB_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d = log(AB_l1_ratio, 2)

A_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase2"]["AnalyticSaturationError"]["cv_integral"][-1]  #TEMP
B_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["cv_integral"][-1]  #TEMP
rate_mine = log(A_l1_error_mine / B_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_A_orig = " + str(A_l1_error) + ";\t" + "l1_B_orig = " + str(B_l1_error) + ";\t" + "rate_orig = " + str(AB_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_A_mine = " + str(A_l1_error_mine) + ";\t" + "l1_B_mine = " + str(B_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="BC_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")

B_l1_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

C_l1_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

BC_l1_ratio = B_l1_error / C_l1_error
BC_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d = log(BC_l1_ratio, 2)

B_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticSaturationError"]["cv_integral"][-1]  #TEMP
C_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["cv_integral"][-1]  #TEMP
rate_mine = log(B_l1_error_mine / C_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_B_orig = " + str(B_l1_error) + ";\t" + "l1_C_orig = " + str(C_l1_error) + ";\t" + "rate_orig = " + str(BC_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_B_mine = " + str(B_l1_error_mine) + ";\t" + "l1_C_mine = " + str(C_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="CD_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D_1_output_saturation_error_norm.txt", "r")

C_l1_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

D_l1_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      D_l1_error = float(line_split[3])

CD_l1_ratio = C_l1_error / D_l1_error
CD_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d = log(CD_l1_ratio, 2)

C_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticSaturationError"]["cv_integral"][-1]  #TEMP
D_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase2"]["AnalyticSaturationError"]["cv_integral"][-1]  #TEMP
rate_mine = log(C_l1_error_mine / D_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nCD_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_C_orig = " + str(C_l1_error) + ";\t" + "l1_D_orig = " + str(D_l1_error) + ";\t" + "rate_orig = " + str(CD_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_C_mine = " + str(C_l1_error_mine) + ";\t" + "l1_D_mine = " + str(D_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="AB_FE_L2Norm_convergence_phase2_press_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A_1_output_pressure_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_pressure_error_norm.txt", "r")

A_l2_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      A_l2_error = float(line_split[3])

B_l2_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

AB_l2_ratio = A_l2_error / B_l2_error
AB_FE_L2Norm_convergence_phase2_press_relpermupwind_1d = log(AB_l2_ratio, 2)

A_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase2"]["AnalyticPressureError"]["l2norm"][-1]  #TEMP
B_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticPressureError"]["l2norm"][-1]  #TEMP
rate_mine = log(A_l2_error_mine / B_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L2Norm_convergence_phase2_press_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_A_orig = " + str(A_l2_error) + ";\t" + "l2_B_orig = " + str(B_l2_error) + ";\t" + "rate_orig = " + str(AB_FE_L2Norm_convergence_phase2_press_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_A_mine = " + str(A_l2_error_mine) + ";\t" + "l2_B_mine = " + str(B_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="BC_FE_L2Norm_convergence_phase2_press_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_pressure_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_pressure_error_norm.txt", "r")

B_l2_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

C_l2_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

BC_l2_ratio = B_l2_error / C_l2_error
BC_FE_L2Norm_convergence_phase2_press_relpermupwind_1d = log(BC_l2_ratio, 2)

B_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticPressureError"]["l2norm"][-1]  #TEMP
C_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticPressureError"]["l2norm"][-1]  #TEMP
rate_mine = log(B_l2_error_mine / C_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L2Norm_convergence_phase2_press_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_B_orig = " + str(B_l2_error) + ";\t" + "l2_C_orig = " + str(C_l2_error) + ";\t" + "rate_orig = " + str(BC_FE_L2Norm_convergence_phase2_press_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_B_mine = " + str(B_l2_error_mine) + ";\t" + "l2_C_mine = " + str(C_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="CD_FE_L2Norm_convergence_phase2_press_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_pressure_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D_1_output_pressure_error_norm.txt", "r")

C_l2_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

D_l2_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      D_l2_error = float(line_split[3])

CD_l2_ratio = C_l2_error / D_l2_error
CD_FE_L2Norm_convergence_phase2_press_relpermupwind_1d = log(CD_l2_ratio, 2)

C_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticPressureError"]["l2norm"][-1]  #TEMP
D_l2_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase2"]["AnalyticPressureError"]["l2norm"][-1]  #TEMP
rate_mine = log(C_l2_error_mine / D_l2_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nCD_FE_L2Norm_convergence_phase2_press_relpermupwind_1d:\n")  #TEMP
    myfile.write("l2_C_orig = " + str(C_l2_error) + ";\t" + "l2_D_orig = " + str(D_l2_error) + ";\t" + "rate_orig = " + str(CD_FE_L2Norm_convergence_phase2_press_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l2_C_mine = " + str(C_l2_error_mine) + ";\t" + "l2_D_mine = " + str(D_l2_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="AB_FE_L1Norm_convergence_phase2_press_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A_1_output_pressure_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_pressure_error_norm.txt", "r")

A_l1_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      A_l1_error = float(line_split[3])

B_l1_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

AB_l1_ratio = A_l1_error / B_l1_error
AB_FE_L1Norm_convergence_phase2_press_relpermupwind_1d = log(AB_l1_ratio, 2)

A_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]  #TEMP
B_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]  #TEMP
rate_mine = log(A_l1_error_mine / B_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_press_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_A_orig = " + str(A_l1_error) + ";\t" + "l1_B_orig = " + str(B_l1_error) + ";\t" + "rate_orig = " + str(AB_FE_L1Norm_convergence_phase2_press_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_A_mine = " + str(A_l1_error_mine) + ";\t" + "l1_B_mine = " + str(B_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="BC_FE_L1Norm_convergence_phase2_press_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B_1_output_pressure_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_pressure_error_norm.txt", "r")

B_l1_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

C_l1_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

BC_l1_ratio = B_l1_error / C_l1_error
BC_FE_L1Norm_convergence_phase2_press_relpermupwind_1d = log(BC_l1_ratio, 2)

B_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]  #TEMP
C_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]  #TEMP
rate_mine = log(B_l1_error_mine / C_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L1Norm_convergence_phase2_press_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_B_orig = " + str(B_l1_error) + ";\t" + "l1_C_orig = " + str(C_l1_error) + ";\t" + "rate_orig = " + str(BC_FE_L1Norm_convergence_phase2_press_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_B_mine = " + str(B_l1_error_mine) + ";\t" + "l1_C_mine = " + str(C_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>
    <variable name="CD_FE_L1Norm_convergence_phase2_press_relpermupwind_1d" language="python">
from math import log
from fluidity_tools import stat_parser as stat  #TEMP

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C_1_output_pressure_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D_1_output_pressure_error_norm.txt", "r")

C_l1_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

D_l1_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      D_l1_error = float(line_split[3])

CD_l1_ratio = C_l1_error / D_l1_error
CD_FE_L1Norm_convergence_phase2_press_relpermupwind_1d = log(CD_l1_ratio, 2)

C_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]  #TEMP
D_l1_error_mine = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]  #TEMP
rate_mine = log(C_l1_error_mine / D_l1_error_mine, 2)  #TEMP
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nCD_FE_L1Norm_convergence_phase2_press_relpermupwind_1d:\n")  #TEMP
    myfile.write("l1_C_orig = " + str(C_l1_error) + ";\t" + "l1_D_orig = " + str(D_l1_error) + ";\t" + "rate_orig = " + str(CD_FE_L1Norm_convergence_phase2_press_relpermupwind_1d) + "\n")  #TEMP
    myfile.write("l1_C_mine = " + str(C_l1_error_mine) + ";\t" + "l1_D_mine = " + str(D_l1_error_mine) + ";\t" + "rate_mine = " + str(rate_mine) + "\n")  #TEMP
    </variable>

    <variable name="phase1_sat_relpermupwind_regression_error_max_1d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_1d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_1d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_1d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_1d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_1d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_1d_D" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_1d_D = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_2d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_2d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_2d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_2d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_2d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_2d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_3d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_3d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_regression_error_max_3d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_relpermupwind_regression_error_max_3d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_1d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_1d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_1d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_1d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_B.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_1d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_1d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_C.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_1d_D" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_1d_D = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_D.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_2d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_2d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_2d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_2d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_2d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_2d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_3d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_3d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_relpermupwind_regression_error_max_3d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_relpermupwind_regression_error_max_3d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>


    <variable name="phase1_sat_relpermupwind_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
phase1_sat_relpermupwind_max_1d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_relpermupwind_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
phase1_sat_relpermupwind_min_1d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
phase2_sat_relpermupwind_max_1d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
phase2_sat_relpermupwind_min_1d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
sum_sat_relpermupwind_max_1d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
sum_sat_relpermupwind_min_1d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_relpermupwind_integral_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
sum_sat_relpermupwind_integral_1d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")
phase1_sat_relpermupwind_max_2d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_relpermupwind_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")
phase1_sat_relpermupwind_min_2d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")
phase2_sat_relpermupwind_max_2d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")
phase2_sat_relpermupwind_min_2d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")
sum_sat_relpermupwind_max_2d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")
sum_sat_relpermupwind_min_2d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_relpermupwind_integral_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")
sum_sat_relpermupwind_integral_2d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")
phase1_sat_relpermupwind_max_3d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_relpermupwind_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")
phase1_sat_relpermupwind_min_3d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")
phase2_sat_relpermupwind_max_3d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")
phase2_sat_relpermupwind_min_3d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")
sum_sat_relpermupwind_max_3d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")
sum_sat_relpermupwind_min_3d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_relpermupwind_integral_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")
sum_sat_relpermupwind_integral_3d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="v_tot_mag_max_relpermupwind_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
v_tot_mag_max_relpermupwind_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="v_tot_mag_min_relpermupwind_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_1d_A.stat")
v_tot_mag_min_relpermupwind_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["min"][-1]
    </variable>    



    <variable name="AB_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")

A_l2_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      A_l2_error = float(line_split[3])

B_l2_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

AB_l2_ratio = A_l2_error / B_l2_error
AB_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(AB_l2_ratio, 2)
    </variable>
    <variable name="BC_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")

B_l2_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

C_l2_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

BC_l2_ratio = B_l2_error / C_l2_error
BC_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(BC_l2_ratio, 2)
    </variable>
    <variable name="CD_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D_1_output_saturation_error_norm.txt", "r")

C_l2_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

D_l2_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      D_l2_error = float(line_split[3])

CD_l2_ratio = C_l2_error / D_l2_error
CD_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(CD_l2_ratio, 2)
    </variable>
    <variable name="AB_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")

A_l2_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      A_l2_error = float(line_split[3])

B_l2_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

AB_l2_ratio = A_l2_error / B_l2_error
AB_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(AB_l2_ratio, 2)
    </variable>
    <variable name="BC_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")

B_l2_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

C_l2_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

BC_l2_ratio = B_l2_error / C_l2_error
BC_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(BC_l2_ratio, 2)
    </variable>
    <variable name="CD_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D_1_output_saturation_error_norm.txt", "r")

C_l2_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

D_l2_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L2":
      
      D_l2_error = float(line_split[3])

CD_l2_ratio = C_l2_error / D_l2_error
CD_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(CD_l2_ratio, 2)
    </variable>
    <variable name="AB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")

A_l1_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      A_l1_error = float(line_split[3])

B_l1_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

AB_l1_ratio = A_l1_error / B_l1_error
AB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(AB_l1_ratio, 2)
    </variable>
    <variable name="BC_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")

B_l1_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

C_l1_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

BC_l1_ratio = B_l1_error / C_l1_error
BC_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(BC_l1_ratio, 2)
    </variable>
    <variable name="CD_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D_1_output_saturation_error_norm.txt", "r")

C_l1_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

D_l1_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      D_l1_error = float(line_split[3])

CD_l1_ratio = C_l1_error / D_l1_error
CD_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(CD_l1_ratio, 2)
    </variable>
    <variable name="AB_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A_1_output_saturation_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")

A_l1_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      A_l1_error = float(line_split[3])

B_l1_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

AB_l1_ratio = A_l1_error / B_l1_error
AB_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(AB_l1_ratio, 2)
    </variable>
    <variable name="BC_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_saturation_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")

B_l1_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

C_l1_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

BC_l1_ratio = B_l1_error / C_l1_error
BC_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(BC_l1_ratio, 2)
    </variable>
    <variable name="CD_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d" language="python">
from math import log

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_saturation_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D_1_output_saturation_error_norm.txt", "r")

C_l1_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

D_l1_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "CV" and line_split[1] == "L1":
      
      D_l1_error = float(line_split[3])

CD_l1_ratio = C_l1_error / D_l1_error
CD_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d = log(CD_l1_ratio, 2)
    </variable>        
    <variable name="AB_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d" language="python">
from math import log

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A_1_output_pressure_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_pressure_error_norm.txt", "r")

A_l2_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      A_l2_error = float(line_split[3])

B_l2_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

AB_l2_ratio = A_l2_error / B_l2_error
AB_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d = log(AB_l2_ratio, 2)
    </variable>
    <variable name="BC_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d" language="python">
from math import log

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_pressure_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_pressure_error_norm.txt", "r")

B_l2_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      B_l2_error = float(line_split[3])

C_l2_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

BC_l2_ratio = B_l2_error / C_l2_error
BC_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d = log(BC_l2_ratio, 2)
    </variable>
    <variable name="CD_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d" language="python">
from math import log

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_pressure_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D_1_output_pressure_error_norm.txt", "r")

C_l2_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      C_l2_error = float(line_split[3])

D_l2_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L2":
      
      D_l2_error = float(line_split[3])

CD_l2_ratio = C_l2_error / D_l2_error
CD_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d = log(CD_l2_ratio, 2)
    </variable>
    <variable name="AB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d" language="python">
from math import log

A_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A_1_output_pressure_error_norm.txt", "r")
B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_pressure_error_norm.txt", "r")

A_l1_error = 1.0e+10
for line in A_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      A_l1_error = float(line_split[3])

B_l1_error = 1.0e+10  
for line in B_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

AB_l1_ratio = A_l1_error / B_l1_error
AB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d = log(AB_l1_ratio, 2)
    </variable>
    <variable name="BC_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d" language="python">
from math import log

B_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B_1_output_pressure_error_norm.txt", "r")
C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_pressure_error_norm.txt", "r")

B_l1_error = 1.0e+10
for line in B_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      B_l1_error = float(line_split[3])

C_l1_error = 1.0e+10  
for line in C_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

BC_l1_ratio = B_l1_error / C_l1_error
BC_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d = log(BC_l1_ratio, 2)
    </variable>
    <variable name="CD_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d" language="python">
from math import log

C_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C_1_output_pressure_error_norm.txt", "r")
D_error_file = open("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D_1_output_pressure_error_norm.txt", "r")

C_l1_error = 1.0e+10
for line in C_error_file:
   
   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      C_l1_error = float(line_split[3])

D_l1_error = 1.0e+10  
for line in D_error_file:

   line_split = line.split()
   
   if line_split[0] == "FE" and line_split[1] == "L1":
      
      D_l1_error = float(line_split[3])

CD_l1_ratio = C_l1_error / D_l1_error
CD_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d = log(CD_l1_ratio, 2)
    </variable>


    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_D" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_D = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_3d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_3d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_regression_error_max_3d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_sat_modrelpermupwind_satfesweby_regression_error_max_3d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.stat")["Phase1"]["RegressionSaturationError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_B.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_C.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_D" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_D = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_D.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_C" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_3d_A" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_3d_A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>
    <variable name="phase1_press_modrelpermupwind_satfesweby_regression_error_max_3d_B" language="python">
from fluidity_tools import stat_parser as stat
phase1_press_modrelpermupwind_satfesweby_regression_error_max_3d_B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.stat")["Phase1"]["RegressionPressureError"]["max"][-1]
    </variable>

    <variable name="phase1_sat_modrelpermupwind_satfesweby_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_max_1d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_modrelpermupwind_satfesweby_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_min_1d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_max_1d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_min_1d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
sum_sat_modrelpermupwind_satfesweby_max_1d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
sum_sat_modrelpermupwind_satfesweby_min_1d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_modrelpermupwind_satfesweby_integral_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
sum_sat_modrelpermupwind_satfesweby_integral_1d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_max_2d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_modrelpermupwind_satfesweby_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_min_2d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_max_2d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_min_2d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")
sum_sat_modrelpermupwind_satfesweby_max_2d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")
sum_sat_modrelpermupwind_satfesweby_min_2d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_modrelpermupwind_satfesweby_integral_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")
sum_sat_modrelpermupwind_satfesweby_integral_2d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_max_3d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_modrelpermupwind_satfesweby_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_min_3d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_max_3d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_min_3d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")
sum_sat_modrelpermupwind_satfesweby_max_3d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")
sum_sat_modrelpermupwind_satfesweby_min_3d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_modrelpermupwind_satfesweby_integral_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")
sum_sat_modrelpermupwind_satfesweby_integral_3d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="v_tot_mag_max_modrelpermupwind_satfesweby_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
v_tot_mag_max_modrelpermupwind_satfesweby_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="v_tot_mag_min_modrelpermupwind_satfesweby_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_1d_A.stat")
v_tot_mag_min_modrelpermupwind_satfesweby_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["min"][-1]
    </variable>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    
    <!-- analytical comparisons, 1st order, 1D -->
    <test name="AB_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.51" language="python">
assert(AB_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.51)
    </test>
    <test name="BC_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.51" language="python">
assert(BC_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.51)
    </test>
    <test name="CD_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.51" language="python">
assert(CD_FE_L2Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.51)
    </test>
    <test name="AB_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.4" language="python">
assert(AB_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.4)
    </test>
    <test name="BC_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.4" language="python">
assert(BC_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.4)
    </test>
    <test name="CD_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.4" language="python">
assert(CD_CV_L2Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.4)
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.75" language="python">
assert(AB_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.75)
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.75" language="python">
assert(BC_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.75)
    </test>
    <test name="CD_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.75" language="python">
assert(CD_FE_L1Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.75)
    </test>
    <test name="AB_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.75" language="python">
assert(AB_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.75)
    </test>
    <test name="BC_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.75" language="python">
assert(BC_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.75)
    </test>
    <test name="CD_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d: order gt 0.75" language="python">
assert(CD_CV_L1Norm_convergence_phase2_sat_relpermupwind_1d &gt; 0.75)
    </test>
    
    <!-- analytical comparisons, 1st order, 1D (pressure) -->
    <test name="AB_FE_L2Norm_convergence_phase2_press_relpermupwind_1d: order gt 0.6" language="python">
assert(AB_FE_L2Norm_convergence_phase2_press_relpermupwind_1d &gt; 0.6)
    </test>
    <test name="BC_FE_L2Norm_convergence_phase2_press_relpermupwind_1d: order gt 0.6" language="python">
assert(BC_FE_L2Norm_convergence_phase2_press_relpermupwind_1d &gt; 0.6)
    </test>
    <test name="CD_FE_L2Norm_convergence_phase2_press_relpermupwind_1d: order gt 0.6" language="python">
assert(CD_FE_L2Norm_convergence_phase2_press_relpermupwind_1d &gt; 0.6)
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_press_relpermupwind_1d: order gt 0.6" language="python">
assert(AB_FE_L1Norm_convergence_phase2_press_relpermupwind_1d &gt; 0.6)
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_press_relpermupwind_1d: order gt 0.6" language="python">
assert(BC_FE_L1Norm_convergence_phase2_press_relpermupwind_1d &gt; 0.6)
    </test>
    <test name="CD_FE_L1Norm_convergence_phase2_press_relpermupwind_1d: order gt 0.6" language="python">
assert(CD_FE_L1Norm_convergence_phase2_press_relpermupwind_1d &gt; 0.6)
    </test>

    <!-- regression comparisons, 1st order, 1D -->
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 1d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_1d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 1d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_1d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 1d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_1d_C) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 1d on mesh D is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_1d_D) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 1st order, 2D -->
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 2d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_2d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 2d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_2d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 2d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_2d_C) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 1st order, 3D -->
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 3d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_3d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using relpermupwind for 3d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_sat_relpermupwind_regression_error_max_3d_B) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 1st order, 1D (pressure) -->
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 1d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_1d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 1d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_1d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 1d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_1d_C) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 1d on mesh D is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_1d_D) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 1st order, 2D (pressure) -->
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 2d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_2d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 2d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_2d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 2d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_2d_C) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 1st order, 3D (pressure) -->
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 3d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_3d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using relpermupwind for 3d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_press_relpermupwind_regression_error_max_3d_B) &lt; 1.0e-6)
    </test>

    <!-- basic comparisons, 1st order, 1D -->
    <test name="phase 1 using relpermupwind for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using relpermupwind for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using relpermupwind for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_max_1d_A - 1.0)
assert abs(sum_sat_relpermupwind_max_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using relpermupwind for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_min_1d_A - 1.0)
assert abs(sum_sat_relpermupwind_min_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using relpermupwind for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_integral_1d_A - 1.0)
assert abs(sum_sat_relpermupwind_integral_1d_A - 1.0) &lt; 1.0e-08
    </test>

    <!-- basic comparisons, 1st order, 2D -->
    <test name="phase 1 using relpermupwind for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using relpermupwind for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using relpermupwind for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_max_2d_A - 1.0)
assert abs(sum_sat_relpermupwind_max_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using relpermupwind for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_min_2d_A - 1.0)
assert abs(sum_sat_relpermupwind_min_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using relpermupwind for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_integral_2d_A - 1.0)
assert abs(sum_sat_relpermupwind_integral_2d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 3D -->
    <test name="phase 1 using relpermupwind for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using relpermupwind for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using relpermupwind for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_max_3d_A - 1.0)
assert abs(sum_sat_relpermupwind_max_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using relpermupwind for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_min_3d_A - 1.0)
assert abs(sum_sat_relpermupwind_min_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using relpermupwind for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_integral_3d_A - 1.0)
assert abs(sum_sat_relpermupwind_integral_3d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 1D (velocity) -->
    <test name="Check v_tot_mag_max_relpermupwind_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_max_relpermupwind_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check v_tot_mag_min_relpermupwind_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_min_relpermupwind_1d_A - 1.0) &lt; 1.0e-08
    </test>

    <!-- analytical comparisons, 2nd order w/Sweby, 1D -->
    <test name="AB_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.6" language="python">
assert(AB_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.6)
    </test>
    <test name="BC_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.8" language="python">
assert(BC_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.8)
    </test>
    <test name="CD_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.4" language="python">
assert(CD_FE_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.4)
    </test>
    <test name="AB_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.7" language="python">
assert(AB_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.7)
    </test>
    <test name="BC_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 1.3" language="python">
assert(BC_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 1.3)
    </test>
    <test name="CD_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.35" language="python">
assert(CD_CV_L2Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.35)
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.8" language="python">
assert(AB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.8)
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.8" language="python">
assert(BC_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.8)
    </test>
    <test name="CD_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.8" language="python">
assert(CD_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.8)
    </test>
    <test name="AB_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.8" language="python">
assert(AB_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.8)
    </test>
    <test name="BC_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.8" language="python">
assert(BC_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.8)
    </test>
    <test name="CD_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d: order gt 0.8" language="python">
assert(CD_CV_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_1d &gt; 0.8)
    </test>
    
    <!-- analytical comparisons, 2nd order w/Sweby, 1D (pressure) -->
    <test name="AB_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d: order gt 1.0" language="python">
assert(AB_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d &gt; 1.0)
    </test>
    <test name="BC_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d: order gt 0.55" language="python">
assert(BC_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d &gt; 0.55)
    </test>
    <test name="CD_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d: order gt 0.9" language="python">
assert(CD_FE_L2Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d &gt; 0.9)
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d: order gt 1.0" language="python">
assert(AB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d &gt; 1.0)
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d: order gt 0.55" language="python">
assert(BC_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d &gt; 0.55)
    </test>
    <test name="CD_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d: order gt 0.9" language="python">
assert(CD_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_1d &gt; 0.9)
    </test>

    <!-- regression comparisons, 2nd order w/Sweby, 1D -->
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 1d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 1d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 1d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_C) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 1d on mesh D is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_1d_D) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 2nd order w/Sweby, 2D -->
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 2d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 2d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 2d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_2d_C) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 2nd order w/Sweby, 3D -->
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 3d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_3d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for saturation phase 1 using modrelpermupwind_satfesweby for 3d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_sat_modrelpermupwind_satfesweby_regression_error_max_3d_B) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 2nd order w/Sweby, 1D (pressure) -->
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 1d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 1d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 1d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_C) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 1d on mesh D is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_1d_D) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 2nd order w/Sweby, 2D (pressure) -->
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 2d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 2d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_B) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 2d on mesh C is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_2d_C) &lt; 1.0e-6)
    </test>
    
    <!-- regression comparisons, 2nd order w/Sweby, 3D (pressure) -->
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 3d on mesh A is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_3d_A) &lt; 1.0e-6)
    </test>
    <test name="Assert max absolute regression error for pressure phase 1 using modrelpermupwind_satfesweby for 3d on mesh B is less than 1.0e-6" language="python">
assert(abs(phase1_press_modrelpermupwind_satfesweby_regression_error_max_3d_B) &lt; 1.0e-6)
    </test>

    <!-- basic comparisons, 2nd order w/Sweby, 1D -->
    <test name="phase 1 using modrelpermupwind_satfesweby for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using modrelpermupwind_satfesweby for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using modrelpermupwind_satfesweby for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_max_1d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_max_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using modrelpermupwind_satfesweby for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_min_1d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_min_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using modrelpermupwind_satfesweby for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_integral_1d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_integral_1d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 2nd order w/Sweby, 2D -->
    <test name="phase 1 using modrelpermupwind_satfesweby for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using modrelpermupwind_satfesweby for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using modrelpermupwind_satfesweby for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_max_2d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_max_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using modrelpermupwind_satfesweby for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_min_2d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_min_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using modrelpermupwind_satfesweby for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_integral_2d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_integral_2d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 2nd order w/Sweby, 3D -->
    <test name="phase 1 using modrelpermupwind_satfesweby for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using modrelpermupwind_satfesweby for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using modrelpermupwind_satfesweby for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_max_3d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_max_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using modrelpermupwind_satfesweby for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_min_3d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_min_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using modrelpermupwind_satfesweby for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_integral_3d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_integral_3d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 2nd order w/Sweby, 1D (velocity) -->
    <test name="Check v_tot_mag_max_modrelpermupwind_satfesweby_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_max_modrelpermupwind_satfesweby_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check v_tot_mag_min_modrelpermupwind_satfesweby_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_min_modrelpermupwind_satfesweby_1d_A - 1.0) &lt; 1.0e-08
    </test>

    <!-- It is straightforward to compare the the 1D simulations to the
         expected 1D quasi-analytical solution at the latter's point
         locations; Run_Compare_Numerical_To_Analytic_1d_Multiple.py
         constructs a piecewise-linear interpolant between the
         simulation's points.  This is difficult to extend to 2D and 3D,
         but not if the interpolation is done the other way round -
         i.e. Linear_Interp_1D.py is used to interpolate the analytical
         solution at each simulation point.  This means the jump
         discontinuity of the analytical solution will be
         ill-represented, but we can still expect first order
         convergence of the L1-errors. -->

    <!-- analytical comparisons, 1st order, 2D -->
    <test name="AB_FE_L1Norm_convergence_phase2_sat_relpermupwind_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_sat_relpermupwind_2d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_sat_relpermupwind_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L1Norm_convergence_phase2_sat_relpermupwind_2d:\n")  #TEMP
    myfile.write("B = " + str(B) + ";\t" + "C = " + str(C) + ";\t" + "rate = " + str(log(B/C, 2)) + "\n")  #TEMP
assert( log(B/C, 2) &gt; 0.6 )
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_press_relpermupwind_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_A.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_press_relpermupwind_2d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_press_relpermupwind_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_2d_C.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L1Norm_convergence_phase2_press_relpermupwind_2d:\n")  #TEMP
    myfile.write("B = " + str(B) + ";\t" + "C = " + str(C) + ";\t" + "rate = " + str(log(B/C, 2)) + "\n")  #TEMP
assert( log(B/C, 2) &gt; 0.6 )
    </test>

    <!-- analytical comparisons, 1st order, 3D -->
    <test name="AB_FE_L1Norm_convergence_phase2_sat_relpermupwind_3d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_sat_relpermupwind_3d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_press_relpermupwind_3d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_A.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_relpermupwind_3d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_press_relpermupwind_3d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>
    
    <!-- analytical comparisons, 2nd order w/Sweby, 2D -->
    <test name="AB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_2d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_2d:\n")  #TEMP
    myfile.write("B = " + str(B) + ";\t" + "C = " + str(C) + ";\t" + "rate = " + str(log(B/C, 2)) + "\n")  #TEMP
assert( log(B/C, 2) &gt; 0.6 )
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_A.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_2d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>
    <test name="BC_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_2d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
C = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_2d_C.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nBC_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_2d:\n")  #TEMP
    myfile.write("B = " + str(B) + ";\t" + "C = " + str(C) + ";\t" + "rate = " + str(log(B/C, 2)) + "\n")  #TEMP
assert( log(B/C, 2) &gt; 0.6 )
    </test>

    <!-- analytical comparisons, 2nd order w/Sweby, 3D -->
    <test name="AB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_3d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.stat")["Phase2"]["AnalyticSaturationError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_sat_modrelpermupwind_satfesweby_3d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>
    <test name="AB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_3d: order gt 0.6" language="python">
from math import log
from fluidity_tools import stat_parser as stat
A = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_A.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
B = stat("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_p1satdiag_modrelpermupwind_satfesweby_3d_B.stat")["Phase2"]["AnalyticPressureError"]["integral"][-1]
with open("temp.txt", "a") as myfile:  #TEMP
    myfile.write("\nAB_FE_L1Norm_convergence_phase2_press_modrelpermupwind_satfesweby_3d:\n")  #TEMP
    myfile.write("A = " + str(A) + ";\t" + "B = " + str(B) + ";\t" + "rate = " + str(log(A/B, 2)) + "\n")  #TEMP
assert( log(A/B, 2) &gt; 0.6 )
    </test>

  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
