<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>lagrangian_biology_chem_exchange</name>
  <owner userid="mlange"/>
  <tags>flml lagrangian_biology</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>
../../bin/fluidity -v2 -l -p lagrangian_biology.flml
    </command_line>
  </problem_definition>
  <variables>
    <variable name="agent_count_a" language="python">
from fluidity_tools import stat_parser
agent_count_a = stat_parser("lagrangian_biology.stat")['Water']['AgentAAgentsStage1']['integral']
    </variable>
    <variable name="biomass_a" language="python">
from fluidity_tools import stat_parser
biomass_a = stat_parser("lagrangian_biology.stat")['Water']['AgentAEnsembleSizeStage1']['integral']
    </variable>
    <variable name="agent_count_b" language="python">
from fluidity_tools import stat_parser
agent_count_b = stat_parser("lagrangian_biology.stat")['Water']['AgentBAgentsStage1']['integral']
    </variable>
    <variable name="biomass_b" language="python">
from fluidity_tools import stat_parser
biomass_b = stat_parser("lagrangian_biology.stat")['Water']['AgentBEnsembleSizeStage1']['integral']
    </variable>
    <variable name="nutrients_dissolved" language="python">
from fluidity_tools import stat_parser
nutrients_dissolved = stat_parser("lagrangian_biology.stat")['Water']['DissolvedNutrient']['integral']
    </variable>
    <variable name="nutrients_agent_a" language="python">
from fluidity_tools import stat_parser
nutrients_agent_a = stat_parser("lagrangian_biology.stat")['Water']['AgentAParticulateNutrientStage1']['integral']
    </variable>
    <variable name="nutrients_agent_b" language="python">
from fluidity_tools import stat_parser
nutrients_agent_b = stat_parser("lagrangian_biology.stat")['Water']['AgentBParticulateNutrientStage1']['integral']
    </variable>
    <variable name="detritus_dissolved" language="python">
from fluidity_tools import stat_parser
detritus_dissolved = stat_parser("lagrangian_biology.stat")['Water']['DissolvedDetritus']['integral']
    </variable>
    <variable name="detritus_agent_a" language="python">
from fluidity_tools import stat_parser
detritus_agent_a = stat_parser("lagrangian_biology.stat")['Water']['AgentAParticulateDetritusStage1']['integral']
    </variable>
    <variable name="detritus_agent_b" language="python">
from fluidity_tools import stat_parser
detritus_agent_b = stat_parser("lagrangian_biology.stat")['Water']['AgentBParticulateDetritusStage1']['integral']
    </variable>
  </variables>
  <pass_tests>
    <test name="constant_agent_count_a" language="python">
assert abs(agent_count_a - 200).all() &lt; 1.0e-6
    </test>
    <test name="constant_agent_count_b" language="python">
assert abs(agent_count_b - 200).all() &lt; 1.0e-6
    </test>
    <test name="constant_biomass_a" language="python">
assert abs(biomass_a - 10000.0).all() &lt; 1.0e-6
    </test>
    <test name="constant_biomass_b" language="python">
assert abs(biomass_b - 10000.0).all() &lt; 1.0e-6
    </test>
    <test name="nutrient_conservation" language="python">
for i in range(1, len(nutrients_dissolved)):
  assert abs(nutrients_dissolved[i-1] + nutrients_agent_a[i] + nutrients_agent_b[i] - 500.0) &lt; 1.0e-6
    </test>
    <test name="all_nutrients_absorbed" language="python">
assert abs(nutrients_dissolved[-1]) &lt; 1.0e-6
    </test>
    <test name="detritus_conservation" language="python">
assert abs(detritus_dissolved + detritus_agent_a + detritus_agent_b - 1000.0).all() &lt; 1.0e-6
    </test>
    <test name="all_detritus_excreted_a" language="python">
assert abs(detritus_agent_a[-1]) &lt; 1.0e-6
    </test>
    <test name="all_detritus_excreted_b" language="python">
assert abs(detritus_agent_b[-1]) &lt; 1.0e-6
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
