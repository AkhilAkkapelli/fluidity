<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">lagrangian_biology</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="line">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DGMesh">
      <from_mesh>
        <mesh name="VelocityMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">10</real_value>
      <comment>86400 - 1day</comment>
    </finish_time>
  </timestepping>
  <material_phase name="Water">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="1" dim1="dim" rank="1">0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="DissolvedNutrient" rank="0">
      <prognostic>
        <mesh name="DGMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X,t):
  return (100. - abs(X[0])) / 10.</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="DissolvedDetritus" rank="0">
      <prognostic>
        <mesh name="DGMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
  </material_phase>
  <embedded_models>
    <lagrangian_ensemble_biology>
      <random_seed>
        <integer_value rank="0">123456789</integer_value>
      </random_seed>
      <functional_group name="AgentA">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
          </state_variable>
          <chemical_variable name="Nutrient">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <chemical_field name="DissolvedNutrient"/>
            <uptake>
              <scalar_field name="Request">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
              <scalar_field name="Depletion">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
            </uptake>
          </chemical_variable>
          <chemical_variable name="Detritus">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <chemical_field name="DissolvedDetritus"/>
            <release>
              <scalar_field name="Release">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
            </release>
          </chemical_variable>
        </variables>
        <environment/>
        <stages>
          <stage name="Stage1">
            <id>
              <real_value rank="0">1.0</real_value>
            </id>
            <initial_state>
              <number_of_agents>
                <integer_value rank="0">200</integer_value>
              </number_of_agents>
              <position>
                <string_value type="python" lines="20">def val(t):
  from numpy import arange
  # 200 agents, evenly spaced in [0:100]m
  positions = arange(-99.75,0.,0.5).reshape(200,1)
  return positions</string_value>
              </position>
              <biology>
                <string_value type="python" lines="20">def val(variables):
  variables['Size'] = 50.0
  variables['Nutrient'] = 0.0
  variables['Detritus'] = 0.05
  return variables</string_value>
              </biology>
            </initial_state>
            <biology>
              <python>
                <string_value type="python" lines="20">def val(biovars, env, dt):
  # Per-individual nutrient uptake
  biovars['NutrientUptake'] = 0.005
  
  # Per-individual detritus release
  biovars['DetritusRelease'] = 0.005
  return biovars</string_value>
              </python>
            </biology>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <lagrangian_timestepping>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <forward_euler_guided_search/>
          <reflect_on_boundary/>
        </lagrangian_timestepping>
      </functional_group>
      <functional_group name="AgentB">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
          </state_variable>
          <chemical_variable name="Nutrient">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <chemical_field name="DissolvedNutrient"/>
            <uptake>
              <scalar_field name="Request">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
              <scalar_field name="Depletion">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
            </uptake>
          </chemical_variable>
          <chemical_variable name="Detritus">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <chemical_field name="DissolvedDetritus"/>
            <release>
              <scalar_field name="Release">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
            </release>
          </chemical_variable>
        </variables>
        <environment/>
        <stages>
          <stage name="Stage1">
            <id>
              <real_value rank="0">1.0</real_value>
            </id>
            <initial_state>
              <number_of_agents>
                <integer_value rank="0">200</integer_value>
              </number_of_agents>
              <position>
                <string_value type="python" lines="20">def val(t):
  from numpy import arange
  # 200 agents, evenly spaced in [0:100]m
  positions = arange(-99.75,0.,0.5).reshape(200,1)
  return positions</string_value>
              </position>
              <biology>
                <string_value type="python" lines="20">def val(variables):
  variables['Size'] = 50.0
  variables['Nutrient'] = 0.0
  variables['Detritus'] = 0.05
  return variables</string_value>
              </biology>
            </initial_state>
            <biology>
              <python>
                <string_value type="python" lines="20">def val(biovars, env, dt):  
  # Per-individual nutrient uptake
  biovars['NutrientUptake'] = 0.005
  
  # Per-individual detritus release
  biovars['DetritusRelease'] = 0.01
  return biovars</string_value>
              </python>
            </biology>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <lagrangian_timestepping>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <forward_euler_guided_search/>
          <reflect_on_boundary/>
        </lagrangian_timestepping>
      </functional_group>
    </lagrangian_ensemble_biology>
  </embedded_models>
</fluidity_options>
