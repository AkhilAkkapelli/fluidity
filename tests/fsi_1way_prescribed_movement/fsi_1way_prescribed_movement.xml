<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>2D 1way FSI model: Prescribed solid movement</name>
  <owner userid="ffm10"/>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity fsi_1way_prescribed_movement.flml;
    </command_line>
  </problem_definition>
  <variables>
    <variable name = "solvers_converged" language = "python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files 
    </variable>
    <!-- Below variables checking on solid vtu dump files -->
    <variable name="solid_dump_check" language="python">
import os
files = os.listdir("./")
solid_dump_check = "test-fsi_solid_prescribed_movement_solid_frontcylinder_0.vtu" in files and "test-fsi_solid_prescribed_movement_solid_frontcylinder_1.vtu" in files
    </variable>
    <!-- Below variables checking on solid checkpoint files -->
    <variable name="solid_checkpoint_check" language="python">
import os
files = os.listdir("./")
solid_checkpoint_check = "test-fsi_solid_prescribed_movement_solid_frontcylinderSolidCoordinateMesh_1_checkpoint.msh" in files and "test-fsi_solid_prescribed_movement_solid_frontcylinder_1_checkpoint.vtu" in files
    </variable>

    <!-- Variables from stat file -->
    <variable name="fluid_mesh_number_nodes" language="python">from fluidity_tools import stat_parser
s = stat_parser("test-fsi_solid_prescribed_movement.stat")
fluid_mesh_number_nodes = s["CoordinateMesh"]["nodes"]
    </variable>
    <variable name="ElapsedTime" language="python">from fluidity_tools import stat_parser
s = stat_parser("test-fsi_solid_prescribed_movement.stat")
ElapsedTime = s["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="fluid_mesh_max_SolidConcentration" language="python">from fluidity_tools import stat_parser
s = stat_parser("test-fsi_solid_prescribed_movement.stat")
fluid_mesh_max_SolidConcentration = s["fluid"]["SolidConcentration"]["max"]
    </variable>
    <variable name="fluid_mesh_IntegralSolidConcentration" language="python">from fluidity_tools import stat_parser
s = stat_parser("test-fsi_solid_prescribed_movement.stat")
fluid_mesh_IntegralSolidConcentration = s["fluid"]["SolidConcentration"]["integral"]
    </variable>
    <variable name="fluid_mesh_max_SolidConcentration_of_solid_mesh" language="python">from fluidity_tools import stat_parser
s = stat_parser("test-fsi_solid_prescribed_movement.stat")
fluid_mesh_max_SolidConcentration_of_solid_mesh = s["fluid"]["frontcylinderSolidConcentration"]["max"]
    </variable>
    <variable name="fluid_mesh_IntegralSolidConcentration_of_solid_mesh" language="python">from fluidity_tools import stat_parser
s = stat_parser("test-fsi_solid_prescribed_movement.stat")
fluid_mesh_IntegralSolidConcentration_of_solid_mesh = s["fluid"]["frontcylinderSolidConcentration"]["integral"]
    </variable>

    <!-- For checking SOLID VTU files -->
    <variable name = "initial_solid_vtu" language = "python">
import vtktools
initial_solid_vtu = vtktools.vtu("test-fsi_solid_prescribed_movement_solid_frontcylinder_0.vtu")
    </variable>
    <variable name = "initial_fluid_vtu" language = "python">
import vtktools
initial_fluid_vtu = vtktools.vtu("test-fsi_solid_prescribed_movement_0.vtu")
    </variable>
    <variable name = "final_solid_vtu" language = "python">
import vtktools
final_solid_vtu = vtktools.vtu("test-fsi_solid_prescribed_movement_solid_frontcylinder_1.vtu")
    </variable>
    <variable name = "final_fluid_vtu" language = "python">
import vtktools
final_fluid_vtu = vtktools.vtu("test-fsi_solid_prescribed_movement_1.vtu")
    </variable>
    <variable name = "checkpoint_solid_vtu" language = "python">
import vtktools
checkpoint_solid_vtu = vtktools.vtu("test-fsi_solid_prescribed_movement_solid_frontcylinder_1_checkpoint.vtu")
    </variable>
  </variables>

  <pass_tests>
    <test name = "Solvers converged" language = "python">
assert(solvers_converged)
    </test>
    <test name = "Solid vtu dump files present" language = "python">
assert(solid_dump_check)
    </test>
    <test name = "Solid checkpoint dump files present" language = "python">
assert(solid_checkpoint_check)
    </test>
    <test name = "Simulation completed" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(ElapsedTime, 0.01, 1.0e-7)
    </test>
    <test name = "Adapt mesh at first adapt" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(fluid_mesh_number_nodes[0], 1266, 1.0e-7)
fluidity_tools.compare_variable(fluid_mesh_number_nodes[0], fluid_mesh_number_nodes[1], 1.0e-7)
    </test>
    <test name = "SolidConcentration from stat-file" language = "python">
import fluidity_tools
print "Checking on SolidConcentration on fluid mesh:"
fluidity_tools.compare_variable(fluid_mesh_max_SolidConcentration[0], 1.0, 1.0e-7)
fluidity_tools.compare_variable(fluid_mesh_max_SolidConcentration[1], 1.0, 1.0e-7)
print "Checking consistency of global SolidConcentration with SolidConcentration of specific solid (on fluid mesh):"
fluidity_tools.compare_variable(fluid_mesh_max_SolidConcentration[0], fluid_mesh_max_SolidConcentration_of_solid_mesh[0], 1.0e-7)
fluidity_tools.compare_variable(fluid_mesh_max_SolidConcentration[1], fluid_mesh_max_SolidConcentration_of_solid_mesh[1], 1.0e-7)

print "Checking on IntegralSolidConcentration on fluid mesh:"
fluidity_tools.compare_variable(fluid_mesh_IntegralSolidConcentration[0], 0.00785082789129, 1.0e-7)
fluidity_tools.compare_variable(fluid_mesh_IntegralSolidConcentration[1], fluid_mesh_IntegralSolidConcentration[0], 1.0e-7)
print "Checking consistency of global IntegralSolidConcentration with IntegralSolidConcentration of specific solid (on fluid mesh):"
fluidity_tools.compare_variable(fluid_mesh_IntegralSolidConcentration[0], fluid_mesh_IntegralSolidConcentration_of_solid_mesh[0], 1.0e-7)
fluidity_tools.compare_variable(fluid_mesh_IntegralSolidConcentration[1], fluid_mesh_IntegralSolidConcentration_of_solid_mesh[1], 1.0e-7)
    </test>

<!-- Tests for SOLID VTU files -->
    <test name = "Checking fields on FLUID and SOLID VTU files" language = "python">
import fluidity_tools

fluid_initial_global_alpha = initial_fluid_vtu.GetScalarField("SolidConcentration")
fluid_final_global_alpha = final_fluid_vtu.GetScalarField("SolidConcentration")
fluid_initial_solid_alpha = initial_fluid_vtu.GetScalarField("frontcylinderSolidConcentration")
fluid_final_solid_alpha = final_fluid_vtu.GetScalarField("frontcylinderSolidConcentration")

print "Checking FLUID VTU files for global and solid specific SolidConcentration:"

print "min(fluid_initial_global_alpha) = ", min(fluid_initial_global_alpha)
print "min(fluid_initial_solid_alpha) = ", min(fluid_initial_solid_alpha)
print "max(fluid_initial_global_alpha) = ", max(fluid_initial_global_alpha)
print "max(fluid_initial_solid_alpha) = ", max(fluid_initial_solid_alpha)
assert (abs(min(fluid_initial_global_alpha)) &lt; 1e-4)
assert (abs(max(fluid_initial_global_alpha) - 1.0) &lt; 1e-7)
assert (abs(min(fluid_initial_global_alpha) - min(fluid_initial_solid_alpha)) &lt; 1e-7)
assert (abs(max(fluid_initial_global_alpha) - max(fluid_initial_solid_alpha)) &lt; 1e-7)

print "min(fluid_final_global_alpha) = ", min(fluid_final_global_alpha)
print "min(fluid_final_solid_alpha) = ", min(fluid_final_solid_alpha)
print "max(fluid_final_global_alpha) = ", max(fluid_final_global_alpha)
print "max(fluid_final_solid_alpha) = ", max(fluid_final_solid_alpha)
assert (abs(min(fluid_final_global_alpha)) &lt; 1e-4)
assert (abs(max(fluid_final_global_alpha) - 1.0) &lt; 1e-7)
assert (abs(min(fluid_final_global_alpha) - min(fluid_final_solid_alpha)) &lt; 1e-7)
assert (abs(max(fluid_final_global_alpha) - max(fluid_final_solid_alpha)) &lt; 1e-7)

print "Checking SOLID VTU files for solid velocity:"
solid_initial_solid_velocity = initial_solid_vtu.GetVectorField("frontcylinderSolidVelocity")
solid_final_solid_velocity = final_solid_vtu.GetVectorField("frontcylinderSolidVelocity")
solid_checkpoint_solid_velocity = checkpoint_solid_vtu.GetVectorField("frontcylinderSolidVelocity")
x=0; y=1;

print "min(solid_initial_solid_velocity[:,0]) = ", min(solid_initial_solid_velocity[:,x])
print "max(solid_initial_solid_velocity[:,0]) = ", max(solid_initial_solid_velocity[:,x])
assert (min(solid_initial_solid_velocity[:,x]) &lt; 1e-7)
assert (max(solid_initial_solid_velocity[:,x]) &lt; 1e-7)
print "min(solid_initial_solid_velocity[:,1]) = ", min(solid_initial_solid_velocity[:,y])
print "max(solid_initial_solid_velocity[:,1]) = ", max(solid_initial_solid_velocity[:,y])
assert (min(solid_initial_solid_velocity[:,y]) &lt; 1e-7)
assert (max(solid_initial_solid_velocity[:,y]) &lt; 1e-7)

print "min(solid_final_solid_velocity[:,0]) = ", min(solid_final_solid_velocity[:,x])
print "max(solid_final_solid_velocity[:,0]) = ", max(solid_final_solid_velocity[:,x])
assert (min(solid_final_solid_velocity[:,x]) == 5.0)
assert (max(solid_final_solid_velocity[:,x]) == 5.0)
print "min(solid_final_solid_velocity[:,1]) = ", min(solid_final_solid_velocity[:,y])
print "max(solid_final_solid_velocity[:,1]) = ", max(solid_final_solid_velocity[:,y])
assert (min(solid_final_solid_velocity[:,y]) == 2.5)
assert (max(solid_final_solid_velocity[:,y]) == 2.5)

print "Checking SOLID CHECKPOINT VTU file for solid velocity field"
print "min(solid_checkpoint_solid_velocity[:,0]) = ", min(solid_checkpoint_solid_velocity[:,x])
print "max(solid_checkpoint_solid_velocity[:,0]) = ", max(solid_checkpoint_solid_velocity[:,x])
assert (min(solid_checkpoint_solid_velocity[:,x]) == 5.0)
assert (max(solid_checkpoint_solid_velocity[:,x]) == 5.0)
print "min(solid_checkpoint_solid_velocity[:,1]) = ", min(solid_checkpoint_solid_velocity[:,y])
print "max(solid_checkpoint_solid_velocity[:,1]) = ", max(solid_checkpoint_solid_velocity[:,y])
assert (min(solid_checkpoint_solid_velocity[:,y]) == 2.5)
assert (max(solid_checkpoint_solid_velocity[:,y]) == 2.5)
    </test>







  </pass_tests>
</testproblem>

