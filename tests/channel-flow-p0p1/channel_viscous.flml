<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">channel-flow-dg</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">fluids</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">2</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="channel">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="PeriodicMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">0</integer_value>
                    </polynomial_degree>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="PeriodicMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PeriodicMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <periodic_boundary_conditions name="EndsMeet">
                    <physical_boundary_ids>
                        <integer_value rank="1" shape="1">1</integer_value>
                    </physical_boundary_ids>
                    <aliased_boundary_ids>
                        <integer_value rank="1" shape="1">2</integer_value>
                    </aliased_boundary_ids>
                    <coordinate_map>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;&#x09;result = list(X)&#x0A;&#x09;result[0]=result[0]-1.0&#x0A;&#x09;return result</string_value>
                    </coordinate_map>
                </periodic_boundary_conditions>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">1</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">20</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="VelocityMesh"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">0.025</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">2</real_value>
        </finish_time>
        <steady_state>
            <tolerance>
                <real_value rank="0">1e-06</real_value>
                <infinity_norm></infinity_norm>
            </tolerance>
        </steady_state>
    </timestepping>
    <physical_parameters>
        <coriolis>
            <f_plane>
                <f>
                    <real_value rank="0">1</real_value>
                </f>
            </f_plane>
        </coriolis>
    </physical_parameters>
    <material_phase name="Water">
        <scalar_field name="Pressure" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <spatial_discretisation>
                    <continuous_galerkin></continuous_galerkin>
                </spatial_discretisation>
                <scheme>
                    <poisson_pressure_solution>
                        <string_value lines="1">never</string_value>
                    </poisson_pressure_solution>
                    <use_projection_method></use_projection_method>
                </scheme>
                <solver>
                    <iterative_method name="cg"></iterative_method>
                    <preconditioner name="eisenstat"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <remove_null_space></remove_null_space>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <steady_state>
                    <exclude_from_steady_state></exclude_from_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="Boussinesq"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <viscosity_scheme>
                            <bassi_rebay></bassi_rebay>
                        </viscosity_scheme>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <once></once>
                            </integrate_advection_by_parts>
                            <integrate_conservation_term_by_parts></integrate_conservation_term_by_parts>
                        </advection_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">1</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">40</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">5000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">import channel_viscous&#x0A;global sol&#x0A;sol=channel_viscous.solution(channel_viscous.forcing)&#x0A;        &#x0A;def val(X,t):&#x0A;        return (sol(X), 0.0)</string_value>
                    </python>
                </initial_condition>
                <boundary_conditions name="NoSlipWalls">
                    <surface_ids>
                        <integer_value rank="1" shape="1">3</integer_value>
                    </surface_ids>
                    <type name="dirichlet">
                        <apply_weakly></apply_weakly>
                        <align_bc_with_cartesian>
                            <x_component>
                                <constant>
                                    <real_value rank="0">0</real_value>
                                </constant>
                            </x_component>
                            <y_component>
                                <constant>
                                    <real_value rank="0">0</real_value>
                                </constant>
                            </y_component>
                        </align_bc_with_cartesian>
                    </type>
                </boundary_conditions>
                <tensor_field name="Viscosity" rank="2">
                    <prescribed>
                        <value name="WholeMesh">
                            <isotropic>
                                <constant>
                                    <real_value rank="0">1</real_value>
                                </constant>
                            </isotropic>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
                <vector_field name="Source" rank="1">
                    <prescribed>
                        <value name="WholeMesh">
                            <python>
                                <string_value lines="20" type="python">def val(X,t):&#x0A;        import channel_viscous&#x0A;        return channel_viscous.numeric_forcing(X)</string_value>
                            </python>
                        </value>
                        <output></output>
                        <stat>
                            <include_in_stat></include_in_stat>
                        </stat>
                        <detectors>
                            <exclude_from_detectors></exclude_from_detectors>
                        </detectors>
                    </prescribed>
                </vector_field>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <previous_time_step>
                        <exclude_from_stat></exclude_from_stat>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat></exclude_from_stat>
                    </nonlinear_field>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <exclude_from_steady_state></exclude_from_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </vector_field>
        <scalar_field name="AnalyticUVelocitySolutionError" rank="0">
            <diagnostic>
                <algorithm name="scalar_python_diagnostic" material_phase_support="single">
                    <string_value lines="20" type="python">V=state.vector_fields[&quot;Velocity&quot;]&#x0A;S=state.scalar_fields[&quot;AnalyticUVelocitySolution&quot;]&#x0A;&#x0A;for n in range(field.node_count):&#x0A;&#x09;V_n=V.node_val(n)&#x0A;&#x09;S_n=S.node_val(n)&#x0A;&#x09;field.set(n,V_n[0]-S_n)</string_value>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <scalar_field name="AnalyticUVelocitySolution" rank="0">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">import sys&#x0A;sys.path.append(&quot;.&quot;)&#x0A;import channel_viscous&#x0A;&#x0A;global sol&#x0A;sol=channel_viscous.solution(channel_viscous.forcing)&#x0A;&#x0A;def val(X,t):&#x0A;&#x09;return sol(X)</string_value>
                    </python>
                </value>
                <output></output>
                <stat></stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <do_not_recalculate></do_not_recalculate>
            </prescribed>
        </scalar_field>
        <scalar_field name="AnalyticPressureSolution" rank="0">
            <prescribed>
                <mesh name="PressureMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">import sys&#x0A;sys.path.append(&quot;.&quot;)&#x0A;import channel_viscous&#x0A;&#x0A;global sol&#x0A;sol=channel_viscous.pressure_solution(channel_viscous.forcing)&#x0A;&#x0A;def val(X,t):&#x0A;&#x09;return sol(X)</string_value>
                    </python>
                </value>
                <output></output>
                <stat></stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <do_not_recalculate></do_not_recalculate>
            </prescribed>
        </scalar_field>
        <scalar_field name="AnalyticPressureSolutionError" rank="0">
            <diagnostic>
                <algorithm name="scalar_python_diagnostic" material_phase_support="single">
                    <string_value lines="20" type="python">P=state.scalar_fields[&quot;Pressure&quot;]&#x0A;S=state.scalar_fields[&quot;AnalyticPressureSolution&quot;]&#x0A;&#x0A;# Remove the arbitrary constant&#x0A;offset=P.node_val(1)-S.node_val(1)&#x0A;&#x0A;for n in range(field.node_count):&#x0A;&#x09;P_n=P.node_val(n)&#x0A;&#x09;S_n=S.node_val(n)&#x0A;&#x09;field.set(n,P_n-S_n-offset)</string_value>
                </algorithm>
                <mesh name="PressureMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
    </material_phase>
</fluidity_options>
