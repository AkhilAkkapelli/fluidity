<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">add_src_directly_1d_2grp_hom_zerobc_eig_fv_A</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">fluids</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">1</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="add_src_directly_1d_2grp_hom_zerobc_eig_fv_A">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="Flux1Mesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">0</integer_value>
                    </polynomial_degree>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="Flux2Mesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">0</integer_value>
                    </polynomial_degree>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="DGP0">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">0</integer_value>
                    </polynomial_degree>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="DGP1">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
                <mesh_shape>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">2</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period>
            <constant>
                <real_value rank="0">10000</real_value>
            </constant>
        </dump_period>
        <output_mesh name="DGP1"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">1</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">1000</real_value>
        </finish_time>
        <steady_state>
            <tolerance>
                <real_value rank="0">1e-06</real_value>
                <infinity_norm></infinity_norm>
            </tolerance>
        </steady_state>
    </timestepping>
    <material_phase name="One">
        <vector_field name="Velocity" rank="1">
            <prescribed>
                <mesh name="CoordinateMesh"></mesh>
                <value name="WholeMesh">
                    <constant>
                        <real_value rank="1" shape="1" dim1="dim">0</real_value>
                    </constant>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </vector_field>
        <scalar_field name="Flux1" rank="0">
            <prognostic>
                <mesh name="Flux1Mesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <finite_volume>
                        <mass_terms>
                            <exclude_mass_terms></exclude_mass_terms>
                        </mass_terms>
                        <advection_terms>
                            <exclude_advection_terms></exclude_advection_terms>
                        </advection_terms>
                    </finite_volume>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="cg"></iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <constant>
                        <real_value rank="0">1</real_value>
                    </constant>
                </initial_condition>
                <boundary_conditions name="left_and_right">
                    <surface_ids>
                        <integer_value rank="1" shape="2">1 2</integer_value>
                    </surface_ids>
                    <type name="dirichlet">
                        <constant>
                            <real_value rank="0">0</real_value>
                        </constant>
                    </type>
                </boundary_conditions>
                <tensor_field name="Diffusivity" rank="2">
                    <prescribed>
                        <value name="WholeMesh">
                            <isotropic>
                                <constant>
                                    <real_value rank="0">1.25900000877523</real_value>
                                </constant>
                            </isotropic>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
                <scalar_field name="Source" rank="0">
                    <diagnostic>
                        <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
                            <string_value lines="20" type="code" language="python">import numpy&#x0A;&#x0A;coord = states[&quot;One&quot;].vector_fields[&quot;Coordinate&quot;]&#x0A;&#x0A;flux2 = states[&quot;One&quot;].scalar_fields[&quot;Flux2&quot;]&#x0A;&#x0A;oldflux1 = states[&quot;One&quot;].scalar_fields[&quot;OldFlux1&quot;]&#x0A;oldflux2 = states[&quot;One&quot;].scalar_fields[&quot;OldFlux2&quot;]&#x0A;&#x0A;eigen = states[&quot;One&quot;].scalar_fields[&quot;Eigenvalue&quot;]&#x0A;&#x0A;sigs_2_to_1 = 0.0&#x0A;&#x0A;nusigf_1 = 4.6798000E-03&#x0A;nusigf_2 = 1.0246786E-01&#x0A;&#x0A;chi_1 = 1.0&#x0A;chi_2 = 0.0&#x0A;&#x0A;eigen_val = eigen.node_val(1)&#x0A;&#x0A;# fix for first iteration&#x0A;if eigen_val &lt; 1.0e-10:&#x0A;   &#x0A;   eigen_val = 1.0&#x0A;&#x0A;# zero field &#x0A;for n in range(field.node_count):&#x0A;   &#x0A;   field.set(n,0.0)&#x0A;&#x0A;for ele in range(field.element_count):&#x0A;&#x0A;   # form element transform object&#x0A;   tr_ele = Transform(ele, coord)&#x0A;   &#x0A;   src_n = sigs_2_to_1*numpy.dot(tr_ele.shape_shape(field.mesh.shape, flux2.mesh.shape),flux2.ele_val(ele))&#x0A;   &#x0A;   src_n = src_n + (nusigf_1*chi_1/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux1.mesh.shape),oldflux1.ele_val(ele))&#x0A;    &#x0A;   src_n = src_n + (nusigf_2*chi_1/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux2.mesh.shape),oldflux2.ele_val(ele))&#x0A;      &#x0A;   field.addto(field.ele_nodes(ele),src_n)</string_value>
                        </algorithm>
                        <add_directly_to_rhs></add_directly_to_rhs>
                        <output></output>
                        <stat></stat>
                        <detectors>
                            <include_in_detectors></include_in_detectors>
                        </detectors>
                    </diagnostic>
                </scalar_field>
                <scalar_field name="Absorption" rank="0">
                    <prescribed>
                        <value name="WholeMesh">
                            <constant>
                                <real_value rank="0">0.0342979</real_value>
                            </constant>
                        </value>
                        <output></output>
                        <stat></stat>
                        <detectors>
                            <exclude_from_detectors></exclude_from_detectors>
                        </detectors>
                    </prescribed>
                </scalar_field>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Flux2" rank="0">
            <prognostic>
                <mesh name="Flux2Mesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <finite_volume>
                        <mass_terms>
                            <exclude_mass_terms></exclude_mass_terms>
                        </mass_terms>
                        <advection_terms>
                            <exclude_advection_terms></exclude_advection_terms>
                        </advection_terms>
                    </finite_volume>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="cg"></iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <constant>
                        <real_value rank="0">1</real_value>
                    </constant>
                </initial_condition>
                <boundary_conditions name="left_and_right">
                    <surface_ids>
                        <integer_value rank="1" shape="2">1 2</integer_value>
                    </surface_ids>
                    <type name="dirichlet">
                        <constant>
                            <real_value rank="0">0</real_value>
                        </constant>
                    </type>
                </boundary_conditions>
                <tensor_field name="Diffusivity" rank="2">
                    <prescribed>
                        <value name="WholeMesh">
                            <isotropic>
                                <constant>
                                    <real_value rank="0">0.209099998477752</real_value>
                                </constant>
                            </isotropic>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
                <scalar_field name="Source" rank="0">
                    <diagnostic>
                        <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
                            <string_value lines="20" type="code" language="python">import numpy&#x0A;&#x0A;coord = states[&quot;One&quot;].vector_fields[&quot;Coordinate&quot;]&#x0A;&#x0A;flux1 = states[&quot;One&quot;].scalar_fields[&quot;Flux1&quot;]&#x0A;&#x0A;oldflux1 = states[&quot;One&quot;].scalar_fields[&quot;OldFlux1&quot;]&#x0A;oldflux2 = states[&quot;One&quot;].scalar_fields[&quot;OldFlux2&quot;]&#x0A;&#x0A;eigen = states[&quot;One&quot;].scalar_fields[&quot;Eigenvalue&quot;]&#x0A;&#x0A;sigs_1_to_2 = 2.6170000E-02&#x0A;&#x0A;nusigf_1 = 4.6798000E-03&#x0A;nusigf_2 = 1.0246786E-01&#x0A;&#x0A;chi_1 = 1.0&#x0A;chi_2 = 0.0&#x0A;&#x0A;eigen_val = eigen.node_val(1)&#x0A;&#x0A;# fix for first iteration&#x0A;if eigen_val &lt; 1.0e-10:&#x0A;   &#x0A;   eigen_val = 1.0&#x0A;&#x0A;# zero field &#x0A;for n in range(field.node_count):&#x0A;   &#x0A;   field.set(n,0.0)&#x0A;&#x0A;for ele in range(field.element_count):&#x0A;&#x0A;   # form element transform object&#x0A;   tr_ele = Transform(ele, coord)&#x0A;   &#x0A;   src_n = sigs_1_to_2*numpy.dot(tr_ele.shape_shape(field.mesh.shape, flux1.mesh.shape),flux1.ele_val(ele))&#x0A;   &#x0A;   src_n = src_n + (nusigf_1*chi_2/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux1.mesh.shape),oldflux1.ele_val(ele))&#x0A;    &#x0A;   src_n = src_n + (nusigf_2*chi_2/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux2.mesh.shape),oldflux2.ele_val(ele))&#x0A;      &#x0A;   field.addto(field.ele_nodes(ele),src_n)</string_value>
                        </algorithm>
                        <add_directly_to_rhs></add_directly_to_rhs>
                        <output></output>
                        <stat></stat>
                        <detectors>
                            <include_in_detectors></include_in_detectors>
                        </detectors>
                    </diagnostic>
                </scalar_field>
                <scalar_field name="Absorption" rank="0">
                    <prescribed>
                        <value name="WholeMesh">
                            <constant>
                                <real_value rank="0">0.0736694999999998</real_value>
                            </constant>
                        </value>
                        <output></output>
                        <stat></stat>
                        <detectors>
                            <exclude_from_detectors></exclude_from_detectors>
                        </detectors>
                    </prescribed>
                </scalar_field>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Flux1_ele" rank="0">
            <diagnostic>
                <algorithm name="scalar_galerkin_projection" source_field_type="scalar" material_phase_support="single" source_field_name="Flux1"></algorithm>
                <mesh name="DGP0"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <scalar_field name="Flux2_ele" rank="0">
            <diagnostic>
                <algorithm name="scalar_galerkin_projection" source_field_type="scalar" material_phase_support="single" source_field_name="Flux2"></algorithm>
                <mesh name="DGP0"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <scalar_field name="Eigenvalue" rank="0">
            <diagnostic>
                <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
                    <string_value lines="20" type="code" language="python">from math import sqrt&#x0A;&#x0A;flux1_ele = states[&quot;One&quot;].scalar_fields[&quot;Flux1_ele&quot;]&#x0A;flux2_ele = states[&quot;One&quot;].scalar_fields[&quot;Flux2_ele&quot;]&#x0A;&#x0A;oldflux1_ele = states[&quot;One&quot;].scalar_fields[&quot;OldFlux1_ele&quot;]&#x0A;oldflux2_ele = states[&quot;One&quot;].scalar_fields[&quot;OldFlux2_ele&quot;]&#x0A;&#x0A;oldeigen = states[&quot;One&quot;].scalar_fields[&quot;OldEigenvalue&quot;]&#x0A;&#x0A;oldeigen_val = oldeigen.node_val(1)&#x0A;&#x0A;# fix for first iteration&#x0A;if oldeigen_val &lt; 1.0e-10:&#x0A;   &#x0A;   oldeigen_val = 1.0&#x0A;&#x0A;nusigf_1 = 4.6798000E-03&#x0A;nusigf_2 = 1.0246786E-01&#x0A;&#x0A;eigen_top = 0.0&#x0A;eigen_bottom = 0.0&#x0A;&#x0A;for n in range(field.node_count):&#x0A;   &#x0A;   flux1_n = flux1_ele.node_val(n)   &#x0A;   flux2_n = flux2_ele.node_val(n)&#x0A;   &#x0A;   oldflux1_n = oldflux1_ele.node_val(n)   &#x0A;   oldflux2_n = oldflux2_ele.node_val(n)&#x0A;   &#x0A;   # fix for first iteration&#x0A;   if oldflux1_n &lt; 1.0e-10:&#x0A;      &#x0A;      oldflux1_n = 1.0&#x0A;   &#x0A;   # fix for first iteration&#x0A;   if oldflux2_n &lt; 1.0e-10:&#x0A;      &#x0A;      oldflux2_n = 1.0&#x0A;   &#x0A;   eigen_top = eigen_top + (nusigf_1*flux1_n + nusigf_2*flux2_n)**2&#x0A;   &#x0A;   eigen_bottom = eigen_bottom + (nusigf_1*flux1_n + nusigf_2*flux2_n)*(nusigf_1*oldflux1_n + nusigf_2*oldflux2_n)&#x0A;   &#x0A;eigen = oldeigen_val*eigen_top/eigen_bottom&#x0A;&#x0A;for n in range(field.node_count):&#x0A;    &#x0A;   field.set(n,eigen)</string_value>
                </algorithm>
                <mesh name="DGP0"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
    </material_phase>
</fluidity_options>
