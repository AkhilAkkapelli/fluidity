<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">cdg</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">fluids</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">3</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="box">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">1</integer_value>
                    </polynomial_degree>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period>
            <constant>
                <real_value rank="0">500</real_value>
            </constant>
        </dump_period>
        <output_mesh name="VelocityMesh"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">0.05</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">1e-10</real_value>
        </finish_time>
        <steady_state>
            <tolerance>
                <real_value rank="0">1e-06</real_value>
                <infinity_norm></infinity_norm>
            </tolerance>
        </steady_state>
    </timestepping>
    <physical_parameters></physical_parameters>
    <material_phase name="Stuff">
        <vector_field name="Velocity" rank="1">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <constant>
                        <real_value rank="1" shape="3" dim1="dim">0 0 0</real_value>
                        <comment>def val(XX, t):&#x0A;   from math import sin,cos&#x0A;   x = XX[0];&#x0A;   y = XX[1];&#x0A;   z = XX[2];&#x0A;   x2 = x*x;&#x0A;   y2 = y*y;&#x0A;   z2 = z*z;&#x0A;   u = sin(5*(x2+y2+z2));&#x0A;   v = cos(3*(x2-y2+z2));&#x0A;   w = sin(3*(-x2-y2+z2));&#x0A;   return (u, v, w)</comment>
                    </constant>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </vector_field>
        <scalar_field name="NumericalSolution" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <none></none>
                            <integrate_advection_by_parts>
                                <twice></twice>
                            </integrate_advection_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <compact_discontinuous_galerkin></compact_discontinuous_galerkin>
                        </diffusion_scheme>
                        <mass_terms>
                            <exclude_mass_terms></exclude_mass_terms>
                        </mass_terms>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="cg"></iterative_method>
                    <preconditioner name="mg"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <start_from_zero></start_from_zero>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <constant>
                        <real_value rank="0">0</real_value>
                    </constant>
                </initial_condition>
                <boundary_conditions name="Dirichlet_all_sides">
                    <surface_ids>
                        <integer_value rank="1" shape="1">28</integer_value>
                    </surface_ids>
                    <type name="dirichlet">
                        <apply_weakly>
                            <boundary_overwrites_initial_condition></boundary_overwrites_initial_condition>
                        </apply_weakly>
                        <python>
                            <string_value lines="20" type="code" language="python">def val(XX, t):&#x0A;   from math import exp&#x0A;   x = XX[0];&#x0A;   y = XX[1];&#x0A;   z = XX[2];&#x0A;   u = exp(-((x-0.5)**2 + (y-0.5)**2 + (z-0.5)**2)/2)&#x0A;   return u</string_value>
                        </python>
                    </type>
                </boundary_conditions>
                <tensor_field name="Diffusivity" rank="2">
                    <prescribed>
                        <value name="WholeMesh">
                            <isotropic>
                                <constant>
                                    <real_value rank="0">1</real_value>
                                </constant>
                            </isotropic>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
                <scalar_field name="Source" rank="0">
                    <prescribed>
                        <value name="WholeMesh">
                            <python>
                                <string_value lines="20" type="code" language="python">def val(XX, t):&#x0A;   from math import exp&#x0A;   x = XX[0];&#x0A;   y = XX[1];&#x0A;   z = XX[2];&#x0A;   T = exp(-((x-0.5)**2 + (y-0.5)**2 + (z-0.5)**2)/2)&#x0A;   S = (3 - (x-0.5)**2 - (y-0.5)**2 - (z-0.5)**2)*T&#x0A;   return S</string_value>
                                <comment>sage: T(x,y,z,t,nu,adv,beta,omega) = sin(25*x*y*z + omega*t) - 2*(y+z)/(sqrt(x*z+1.0))&#x0A;sage: T_t = diff(T,t)&#x0A;sage: T_x = diff(T,x)&#x0A;sage: T_y = diff(T,y)&#x0A;sage: T_z = diff(T,z)&#x0A;sage: T_xx = diff(T_x,x)&#x0A;sage: T_yy = diff(T_y,y)&#x0A;sage: T_zz = diff(T_z,z)&#x0A;sage: &#x0A;sage: u(x,y,z,t) = sin(5*(x^2+y^2+z^2))&#x0A;sage: v(x,y,z,t) = cos(3*(x^2-y^2+z^2))&#x0A;sage: w(x,y,z,t) = sin(3*(-x^2-y^2+z^2))&#x0A;sage: &#x0A;sage: u_x = diff(u,x)&#x0A;sage: u_y = diff(u,y)&#x0A;sage: u_z = diff(u,z)&#x0A;sage: v_x = diff(v,x)&#x0A;sage: v_y = diff(v,y)&#x0A;sage: v_z = diff(v,z)&#x0A;sage: w_x = diff(w,x)&#x0A;sage: w_y = diff(w,y)&#x0A;sage: w_z = diff(w,z)&#x0A;sage: &#x0A;sage: S = T_t + adv*(u*T_x + v*T_y + w*T_z + beta*(T*(u_x + v_y + w_z))) - nu*(T_xx + T_yy + T_zz)&#x0A;sage: &#x0A;sage: &#x0A;sage: S&#x0A;(x, y, z, t, nu, adv, beta, omega) |--&gt; -(2*(2*(y + z)/sqrt(x*z + 1.00000000000000) - sin(25*x*y*z + omega*t))*(5*x*cos(5*x^2 + 5*y^2 + 5*z^2) + 3*y*sin(3*x^2 - 3*y^2 + 3*z^2) + 3*z*cos(-3*x^2 - 3*y^2 + 3*z^2))*beta - (25*y*z*cos(25*x*y*z + omega*t) + (y + z)*z/(x*z + 1.00000000000000)^(3/2))*sin(5*x^2 + 5*y^2 + 5*z^2) - (25*x*z*cos(25*x*y*z + omega*t) - 2/sqrt(x*z + 1.00000000000000))*cos(3*x^2 - 3*y^2 + 3*z^2) - (25*x*y*cos(25*x*y*z + omega*t) + (y + z)*x/(x*z + 1.00000000000000)^(3/2) - 2/sqrt(x*z + 1.00000000000000))*sin(-3*x^2 - 3*y^2 + 3*z^2))*adv + 1/2*(1250*x^2*y^2*sin(25*x*y*z + omega*t) + 1250*x^2*z^2*sin(25*x*y*z + omega*t) + 1250*y^2*z^2*sin(25*x*y*z + omega*t) + 3*(y + z)*x^2/(x*z + 1.00000000000000)^(5/2) + 3*(y + z)*z^2/(x*z + 1.00000000000000)^(5/2) - 4*x/(x*z + 1.00000000000000)^(3/2))*nu + omega*cos(25*x*y*z + omega*t)</comment>
                            </python>
                        </value>
                        <output></output>
                        <stat></stat>
                        <detectors>
                            <exclude_from_detectors></exclude_from_detectors>
                        </detectors>
                    </prescribed>
                </scalar_field>
                <output>
                    <include_previous_time_step></include_previous_time_step>
                </output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="AnalyticalSolution" rank="0">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(XX, t):&#x0A;   from math import exp&#x0A;   x = XX[0];&#x0A;   y = XX[1];&#x0A;   z = XX[2];&#x0A;   u = exp(-((x-0.5)**2 + (y-0.5)**2 + (z-0.5)**2)/2)&#x0A;   return u</string_value>
                    </python>
                </value>
                <output></output>
                <stat></stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </scalar_field>
        <scalar_field name="AbsoluteDifference" rank="0">
            <diagnostic field_name_b="NumericalSolution" field_name_a="AnalyticalSolution">
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
    </material_phase>
</fluidity_options>
