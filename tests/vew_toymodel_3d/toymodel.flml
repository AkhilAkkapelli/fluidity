<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">vew-tm</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="2DMesh"/>
        <extrude>
          <regions name="WholeMesh">
            <bottom_depth>
              <constant>
                <real_value rank="0">300</real_value>
              </constant>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">5.0</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">1</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">2</integer_value>
            </bottom_surface_id>
          </regions>
        </extrude>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="2DMesh">
      <from_file file_name="surface">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1800</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">5256000</real_value>
      <comment>5256000 - 2 months
31536000 - 1 year
63072000 - 2 years</comment>
    </finish_time>
  </timestepping>
  <material_phase name="Water">
    <subgridscale_parameterisations>
      <prescribed_diffusivity>
        <tensor_field name="PrescribedDiffusivity" rank="2">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <python>
                  <string_value lines="20" type="python">from math import pow

global visser_curve, get_spline, read_physics_file

time = 0.0
spline = None

if not persistent.has_key('diffusivity_mld_fh'):
  persistent['diffusivity_mld_fh'] = open("vew_tm_mld.csv" , 'r')

def get_spline(t):
  from numpy import arange
  from scipy import interpolate
  
  # read physics file
  data = persistent['diffusivity_mld_fh'].readline().split(",")
  if not t==float(data[0]):
    raise RuntimeError('Velocity: Wrong t in read_physics: ' + data[0])
  mld = float(data[1])
  
  # create spline
  height = arange(0.0, 300.0, 1.)
  mu = [visser_curve(z*40./mld) for z in height]
  tck = interpolate.splrep(height,mu, s=0.001)
  return tck
  
def visser_curve(z):
  ## Recreate Fig. 1 in Visser, 1997, by using Fig. 3 in Ross and Sharples, 2004
  z = abs(z)
  if z &lt;= 40.:
    z = 40. - z
    K_z = 0.001 + 0.0136245 * z - 0.00263245 * pow(z,2) + 0.000211875 * pow(z,3) - 0.00000865898 * pow(z,4) + 0.00000017623 * pow(z,5) - 0.00000000140918 * pow(z,6)
  else:
    K_z=1e-6
  return K_z
  
def val(X, t):
  from scipy import interpolate
  global time, spline
  if t &gt; time or spline==None:
    time = t
    spline = get_spline(t)
  mu = interpolate.splev(abs(X[2]), spline)
  mu = max(mu, 1e-6)
  # this is for keeping the smoothed spline 
  # from creating a third peak
  #if abs(X[2])&gt;43.:
  #  mu = 1e-6
  return [[1e-6, 0., 0.],[0., 1e-6, 0.],[0., 0., mu]]</string_value>
                </python>
              </anisotropic_symmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
      </prescribed_diffusivity>
    </subgridscale_parameterisations>
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global layerheight, read_physics_file

layer=None
time=0.0

if not persistent.has_key('velocity_mld_fh'):
  persistent['velocity_mld_fh'] = open("vew_tm_mld.csv" , 'r')

def layerheight(t):
  # read physics
  data = persistent['velocity_mld_fh'].readline().split(",")
  if not t==float(data[0]):
    raise RuntimeError('Velocity: Wrong t in read_physics: ' + data[0])
  return float(data[1])
  
def val(X,t):
  global layer, time
  if t &gt; time or layer==None:
    time = t
    layer=layerheight(t)
  
  if abs(X[2])&lt;=layer:
    vel_Z=0.0
  else:
    vel_Z=-0.000011111
  return [0., 0., vel_Z]</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="VerticalDiffusivity" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">diffusivity = state.tensor_fields['PrescribedDiffusivity']

for n in range(field.node_count):
  k = diffusivity.node_val(n)[-1][-1]
  field.set(n, k)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="VerticalDiffusivityGradient" rank="0">
      <diagnostic>
        <algorithm source_field_type="component" material_phase_support="single" name="extract_scalar_component" source_field_name="DiffusivityGradient">
          <source_field_component>
            <integer_value rank="0">3</integer_value>
          </source_field_component>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Temperature" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global read_physics_file, depth_temp, time

time = 0.0
spline = None

if not persistent.has_key('temperature_fh'):
  persistent['temperature_fh'] = open("vew_tm_temp_irrad.csv" , 'r')

def read_physics_file(f, t):
  depth = []
  temp = []
  data = f.readline().split(",")
  time = float(data[0])
  if not t==time:
    raise RuntimeError('Temperature: Wrong t in read_physics: ' + str(time) + ' expected: ' + str(t))
  nLayers = int(data[1])
  depth.append(float(data[2]))
  temp.append(float(data[3])) # temperature in column 3
  for i in range(nLayers-1):
    data = f.readline().split(",")
    depth.append(float(data[2]))
    temp.append(float(data[3])) # temperature in column 3
  return depth, temp

def val(X,t):
  from scipy import interpolate
  global time, spline
  if t &gt; time or spline==None:
    time = t
    # read prescribed data
    depth, temp = read_physics_file(persistent['temperature_fh'], t)
    spline = interpolate.splrep(depth,temp)

  return interpolate.splev(abs(X[2]), spline)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Irradiance" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global read_physics_file, depth_irrad, time

time = 0.0
spline = None

if not persistent.has_key('irradiance_fh'):
  persistent['irradiance_fh'] = open("vew_tm_temp_irrad.csv" , 'r')

def read_physics_file(f, t):  
  depth = []
  irrad = []
  data = f.readline().split(",")
  time = float(data[0])
  if not t==time:
    raise RuntimeError('Irradiance: Wrong t in read_physics: ' + str(time) + ' expected: ' + str(t))  
  nLayers = int(data[1])
  depth.append(float(data[2]))
  irrad.append(float(data[4])) # irradiance in column 4
  for i in range(nLayers-1):
    data = f.readline().split(",")
    depth.append(float(data[2]))
    irrad.append(float(data[4])) # irradiance in column 4
  return depth, irrad

def val(X,t):
  from scipy import interpolate
  global time, spline
  if t &gt; time or spline==None:
    time = t
    # read prescribed data
    depth, irrad = read_physics_file(persistent['irradiance_fh'], t)
    spline = interpolate.splrep(depth,irrad)

  return interpolate.splev(abs(X[2]), spline)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Ammonium" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global z, c_amm

def read_chem_file(filename):  
  f = open(filename , 'r')
  ammonium = []
  depth = []
  for line in f:
    data = line.split(",")
    depth.append(float(data[0]))
    ammonium.append(float(data[1])) #Ammonium
  f.close()
  return depth, ammonium

z, c_amm = read_chem_file("vew_tm_chem_init.csv")
  
def val(X,t):
  from numpy import interp
  # interpolate to correct t
  conc = interp(abs(X[2]), z, c_amm)
  return conc</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="NoFlux">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="zero_flux"/>
        </boundary_conditions>
        <subgridscale_parameterisation name="prescribed_diffusivity"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Nitrate" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global z, c_nit

def read_chem_file(filename):  
  f = open(filename , 'r')
  nitrate = []
  depth = []
  for line in f:
    data = line.split(",")
    depth.append(float(data[0]))
    nitrate.append(float(data[2])) #Nitrate
  f.close()
  return depth, nitrate

z, c_nit = read_chem_file("vew_tm_chem_init.csv")
  
def val(X,t):
  from numpy import interp
  # interpolate to correct t
  conc = interp(abs(X[2]), z, c_nit)
  return conc</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="NoFlux">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="zero_flux"/>
        </boundary_conditions>
        <subgridscale_parameterisation name="prescribed_diffusivity"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Silicate" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global z, c_sil

def read_chem_file(filename):  
  f = open(filename , 'r')
  silicate = []
  depth = []
  for line in f:
    data = line.split(",")
    depth.append(float(data[0]))
    silicate.append(float(data[3])) #Silicate
  f.close()
  return depth, silicate

z, c_sil = read_chem_file("vew_tm_chem_init.csv")
  
def val(X,t):
  from numpy import interp
  # interpolate to correct t
  conc = interp(abs(X[2]), z, c_sil)
  return conc</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="NoFlux">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="zero_flux"/>
        </boundary_conditions>
        <subgridscale_parameterisation name="prescribed_diffusivity"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="DiffusivityGradient" rank="1">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="grad" source_field_name="VerticalDiffusivity"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field name="DiffusivitySecondGradient" rank="1">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="grad" source_field_name="VerticalDiffusivityGradient"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
  <embedded_models>
    <lagrangian_ensemble_biology>
      <mesh name="CoordinateMesh"/>
      <random_seed>
        <integer_value rank="0">123456</integer_value>
      </random_seed>
      <functional_group name="Diatom">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Biomass">
            <scalar_field name="Biomass">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <per_stage/>
            </scalar_field>
          </state_variable>
        </variables>
        <environment>
          <field name="Temperature"/>
          <field name="Irradiance"/>
        </environment>
        <stages>
          <stage name="Living">
            <id>
              <real_value rank="0">0.0</real_value>
            </id>
            <number_of_agents>
              <integer_value rank="0">1000</integer_value>
            </number_of_agents>
            <initial_position>
              <string_value lines="20" type="python">def val(t):
  from numpy import arange,zeros,reshape,concatenate,append,random
  
  # 1000 agents, evenly spaced in [0:200]
  z = arange(-200.,0.,0.2)
  random.seed(1234)
  x = random.uniform(0., 10., 1000)
  y = random.uniform(0., 10., 1000)

  return reshape(concatenate((x,y,z)),(3,1000)).T</string_value>
            </initial_position>
            <initial_state>
              <values>
                <real_value shape="2" rank="1">0.0 50000.0</real_value>
              </values>
            </initial_state>
            <biology_update>
              <string_value lines="20" type="python">#import fluidity.lagrangian_biology as bio

def val(variables, environment, dt):
  #bio.update_living_diatom(variables, environment, dt) 
  return variables</string_value>
            </biology_update>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
          <per_stage/>
        </scalar_field>
        <lagrangian_timestepping>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <forward_euler_guided_search/>
          <reflect_on_boundary/>
        </lagrangian_timestepping>
      </functional_group>
    </lagrangian_ensemble_biology>
  </embedded_models>
</fluidity_options>
