<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">hyperc-shear</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">fluids</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">2</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="2d_square">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">1</integer_value>
            </degree>
            <controlvolume_surface_degree>
                <integer_value rank="0">1</integer_value>
            </controlvolume_surface_degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">125</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="PressureMesh"></output_mesh>
        <checkpointing>
            <checkpoint_period_in_dumps>
                <integer_value rank="0">2</integer_value>
                <comment>10</comment>
            </checkpoint_period_in_dumps>
            <checkpoint_at_start></checkpoint_at_start>
            <checkpoint_at_end></checkpoint_at_end>
        </checkpointing>
        <stat>
            <output_at_start></output_at_start>
        </stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">0.00427561316453</real_value>
            <comment>this is overwritten by the adaptive timestepping but roughly corresponds to a cfl of 0.1</comment>
        </timestep>
        <finish_time>
            <real_value rank="0">15.5125587736253</real_value>
            <comment>corresponds to 4020 timesteps (looks like half of Rudman)</comment>
        </finish_time>
        <final_timestep>
            <integer_value rank="0">250</integer_value>
        </final_timestep>
    </timestepping>
    <physical_parameters></physical_parameters>
    <material_phase name="Material1">
        <vector_field name="Velocity" rank="1">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;   from math import sin, cos&#x0A;   # Shear rotation about origin.&#x0A;   return (sin(X[0])*cos(X[1]), -1.0*cos(X[0])*sin(X[1]))</string_value>
                    </python>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </vector_field>
        <scalar_field name="ControlVolumeCFLNumber" rank="0">
            <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="PressureMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <scalar_field name="TracerBeta1" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <control_volumes>
                        <face_value name="HyperC">
                            <project_upwind_value_from_point>
                                <reflect_off_domain_boundaries></reflect_off_domain_boundaries>
                                <bound_projected_value_locally></bound_projected_value_locally>
                                <store_upwind_elements></store_upwind_elements>
                            </project_upwind_value_from_point>
                            <courant_number name="ControlVolumeCFLNumber"></courant_number>
                        </face_value>
                        <diffusion_scheme name="ElementGradient"></diffusion_scheme>
                    </control_volumes>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0</real_value>
                    </theta>
                    <control_volumes>
                        <pivot_theta>
                            <real_value rank="0">0</real_value>
                        </pivot_theta>
                    </control_volumes>
                </temporal_discretisation>
                <explicit></explicit>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;&#x09;from math import sqrt, pi&#x0A;&#x09;xc = pi/2&#x0A;&#x09;yc = 0.2*(1.0+pi)&#x0A;&#x09;dx1 = X[0]-xc&#x0A;&#x09;dx2 = X[1]-yc&#x0A;&#x09;r=sqrt(dx1*dx1+dx2*dx2)&#x0A;&#x09;if (r&lt;=(pi/5)):&#x0A;&#x09;&#x09;return 1.0&#x0A;&#x09;else:&#x0A;&#x09;&#x09;return 0.0</string_value>
                    </python>
                </initial_condition>
                <boundary_conditions name="keep_it_all_in">
                    <surface_ids>
                        <integer_value rank="1" shape="4">7 8 9 10</integer_value>
                    </surface_ids>
                    <type name="zero_flux"></type>
                </boundary_conditions>
                <output></output>
                <stat>
                    <include_cv_stats></include_cv_stats>
                    <include_mixing_stats name="Mixing">
                        <control_volumes></control_volumes>
                        <mixing_bin_bounds>
                            <constant>
                                <real_value rank="1" shape="9">-1 -1e-08 1e-08 0.025 0.5 0.975 0.99999999 1.00000001 2</real_value>
                            </constant>
                        </mixing_bin_bounds>
                        <tolerance>
                            <real_value rank="0">0</real_value>
                        </tolerance>
                    </include_mixing_stats>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <galerkin_projection>
                    <continuous>
                        <bounded name="Diffuse">
                            <boundedness_iterations>
                                <integer_value rank="0">20000</integer_value>
                            </boundedness_iterations>
                        </bounded>
                        <solver>
                            <iterative_method name="cg"></iterative_method>
                            <preconditioner name="sor"></preconditioner>
                            <relative_error>
                                <real_value rank="0">1e-10</real_value>
                            </relative_error>
                            <max_iterations>
                                <integer_value rank="0">10000</integer_value>
                            </max_iterations>
                            <never_ignore_solver_failures></never_ignore_solver_failures>
                            <diagnostics>
                                <monitors></monitors>
                            </diagnostics>
                        </solver>
                    </continuous>
                </galerkin_projection>
                <priority>
                    <integer_value rank="0">5</integer_value>
                </priority>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerBeta0" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <control_volumes>
                        <face_value name="HyperC">
                            <project_upwind_value_from_point>
                                <reflect_off_domain_boundaries></reflect_off_domain_boundaries>
                                <bound_projected_value_locally></bound_projected_value_locally>
                                <store_upwind_elements></store_upwind_elements>
                            </project_upwind_value_from_point>
                            <courant_number name="ControlVolumeCFLNumber"></courant_number>
                        </face_value>
                        <diffusion_scheme name="ElementGradient"></diffusion_scheme>
                    </control_volumes>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0</real_value>
                    </theta>
                    <control_volumes>
                        <pivot_theta>
                            <real_value rank="0">0</real_value>
                        </pivot_theta>
                    </control_volumes>
                </temporal_discretisation>
                <explicit></explicit>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;&#x09;from math import sqrt, pi&#x0A;&#x09;xc = pi/2&#x0A;&#x09;yc = 0.2*(1.0+pi)&#x0A;&#x09;dx1 = X[0]-xc&#x0A;&#x09;dx2 = X[1]-yc&#x0A;&#x09;r=sqrt(dx1*dx1+dx2*dx2)&#x0A;&#x09;if (r&lt;=(pi/5)):&#x0A;&#x09;&#x09;return 1.0&#x0A;&#x09;else:&#x0A;&#x09;&#x09;return 0.0</string_value>
                    </python>
                </initial_condition>
                <boundary_conditions name="keep_it_all_in">
                    <surface_ids>
                        <integer_value rank="1" shape="4">7 8 9 10</integer_value>
                    </surface_ids>
                    <type name="zero_flux"></type>
                </boundary_conditions>
                <output></output>
                <stat>
                    <include_cv_stats></include_cv_stats>
                    <include_mixing_stats name="Mixing">
                        <control_volumes></control_volumes>
                        <mixing_bin_bounds>
                            <constant>
                                <real_value rank="1" shape="9">-1 -1e-08 1e-08 0.025 0.5 0.975 0.99999999 1.00000001 2</real_value>
                            </constant>
                        </mixing_bin_bounds>
                        <tolerance>
                            <real_value rank="0">0</real_value>
                        </tolerance>
                    </include_mixing_stats>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <galerkin_projection>
                    <continuous>
                        <bounded name="Diffuse">
                            <boundedness_iterations>
                                <integer_value rank="0">20000</integer_value>
                            </boundedness_iterations>
                        </bounded>
                        <solver>
                            <iterative_method name="cg"></iterative_method>
                            <preconditioner name="sor"></preconditioner>
                            <relative_error>
                                <real_value rank="0">1e-10</real_value>
                            </relative_error>
                            <max_iterations>
                                <integer_value rank="0">10000</integer_value>
                            </max_iterations>
                            <never_ignore_solver_failures></never_ignore_solver_failures>
                            <diagnostics>
                                <monitors></monitors>
                            </diagnostics>
                        </solver>
                    </continuous>
                </galerkin_projection>
                <priority>
                    <integer_value rank="0">5</integer_value>
                </priority>
            </prognostic>
        </scalar_field>
        <scalar_field name="ControlVolumeDivergence" rank="0">
            <diagnostic field_name="Velocity">
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="PressureMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <scalar_field name="ScalarAbsoluteDifference" rank="0">
            <diagnostic field_name_b="TracerBeta0" field_name_a="TracerBeta1">
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="PressureMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
    </material_phase>
    <mesh_adaptivity>
        <mesh_movement>
            <imposed_grid_velocity></imposed_grid_velocity>
            <vector_field name="GridVelocity" rank="1">
                <prescribed>
                    <mesh name="CoordinateMesh"></mesh>
                    <value name="WholeMesh">
                        <python>
                            <string_value lines="20" type="python">def val(X,t):&#x0A;   from math import sin, cos&#x0A;   # Shear rotation about origin.&#x0A;   return (sin(X[0])*cos(X[1]), -1.0*cos(X[0])*sin(X[1]))</string_value>
                        </python>
                    </value>
                    <output></output>
                    <stat>
                        <include_in_stat></include_in_stat>
                    </stat>
                    <detectors>
                        <exclude_from_detectors></exclude_from_detectors>
                    </detectors>
                </prescribed>
            </vector_field>
        </mesh_movement>
    </mesh_adaptivity>
</fluidity_options>
