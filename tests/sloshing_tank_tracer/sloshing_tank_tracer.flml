<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">sloshing_tank_tracer</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">oceans</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">2</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="sloshing_tank_mesh1">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="DGMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
                <mesh_shape>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">3</integer_value>
            </degree>
            <surface_degree>
                <integer_value rank="0">3</integer_value>
            </surface_degree>
        </quadrature>
        <disable_geometric_data_cache></disable_geometric_data_cache>
        <ocean_boundaries>
            <top_surface_ids>
                <integer_value rank="1" shape="1">29</integer_value>
            </top_surface_ids>
            <bottom_surface_ids>
                <integer_value rank="1" shape="1">30</integer_value>
            </bottom_surface_ids>
            <scalar_field name="DistanceToTop" rank="0">
                <diagnostic>
                    <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                    <mesh name="CoordinateMesh"></mesh>
                    <output></output>
                    <stat></stat>
                    <convergence>
                        <include_in_convergence></include_in_convergence>
                    </convergence>
                    <detectors>
                        <include_in_detectors></include_in_detectors>
                    </detectors>
                    <steady_state>
                        <include_in_steady_state></include_in_steady_state>
                    </steady_state>
                </diagnostic>
            </scalar_field>
            <scalar_field name="DistanceToBottom" rank="0">
                <diagnostic>
                    <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                    <mesh name="CoordinateMesh"></mesh>
                    <output></output>
                    <stat></stat>
                    <convergence>
                        <include_in_convergence></include_in_convergence>
                    </convergence>
                    <detectors>
                        <include_in_detectors></include_in_detectors>
                    </detectors>
                    <steady_state>
                        <include_in_steady_state></include_in_steady_state>
                    </steady_state>
                </diagnostic>
            </scalar_field>
        </ocean_boundaries>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period>
            <constant>
                <real_value rank="0">1</real_value>
            </constant>
        </dump_period>
        <output_mesh name="VelocityMesh"></output_mesh>
        <stat>
            <output_at_start></output_at_start>
        </stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">0.018507</real_value>
            <comment>This should leads to a Courant number of approx 0.1</comment>
        </timestep>
        <finish_time>
            <real_value rank="0">18.5</real_value>
        </finish_time>
        <nonlinear_iterations>
            <integer_value rank="0">1</integer_value>
        </nonlinear_iterations>
        <adaptive_timestep>
            <requested_cfl>
                <real_value rank="0">0.1</real_value>
            </requested_cfl>
            <courant_number name="CFLNumber">
                <mesh name="VelocityMesh"></mesh>
            </courant_number>
            <increase_tolerance>
                <real_value rank="0">1.1</real_value>
            </increase_tolerance>
        </adaptive_timestep>
    </timestepping>
    <physical_parameters>
        <gravity>
            <magnitude>
                <real_value rank="0">1</real_value>
            </magnitude>
            <vector_field name="GravityDirection" rank="1">
                <prescribed>
                    <mesh name="CoordinateMesh"></mesh>
                    <value name="whole_mesh">
                        <constant>
                            <real_value rank="1" shape="2" dim1="dim">0 -1</real_value>
                        </constant>
                    </value>
                    <output>
                        <exclude_from_vtu></exclude_from_vtu>
                    </output>
                    <stat>
                        <exclude_from_stat></exclude_from_stat>
                    </stat>
                    <detectors>
                        <exclude_from_detectors></exclude_from_detectors>
                    </detectors>
                </prescribed>
            </vector_field>
        </gravity>
    </physical_parameters>
    <material_phase name="water">
        <equation_of_state>
            <fluids>
                <linear>
                    <reference_density>
                        <real_value rank="0">1</real_value>
                    </reference_density>
                    <subtract_out_hydrostatic_level></subtract_out_hydrostatic_level>
                </linear>
            </fluids>
        </equation_of_state>
        <scalar_field name="Pressure" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <remove_stabilisation_term></remove_stabilisation_term>
                        <integrate_continuity_by_parts></integrate_continuity_by_parts>
                    </continuous_galerkin>
                </spatial_discretisation>
                <scheme>
                    <poisson_pressure_solution>
                        <string_value lines="1">only first timestep</string_value>
                    </poisson_pressure_solution>
                    <use_projection_method></use_projection_method>
                </scheme>
                <solver>
                    <iterative_method name="cg"></iterative_method>
                    <preconditioner name="mg"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <absolute_error>
                        <real_value rank="0">0</real_value>
                    </absolute_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X, t):&#x0A;   from math import cos&#x0A;   g=1.00&#x0A;   return  ((g*0.01*cos(3.1415926536*X[0])))</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="RightSide" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">32</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="LeftSide" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">31</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Density" rank="0">
            <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="Boussinesq"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <no_stabilisation></no_stabilisation>
                        </stabilisation>
                        <mass_terms>
                            <lump_mass_matrix></lump_mass_matrix>
                        </mass_terms>
                        <advection_terms></advection_terms>
                        <stress_terms>
                            <tensor_form></tensor_form>
                        </stress_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">0.5</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <absolute_error>
                        <real_value rank="0">0</real_value>
                    </absolute_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="whole_mesh">
                    <constant>
                        <real_value rank="1" shape="2" dim1="dim">0 0</real_value>
                    </constant>
                </initial_condition>
                <boundary_conditions name="sides">
                    <surface_ids>
                        <integer_value rank="1" shape="2">31 32</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <boundary_conditions name="bottom">
                    <surface_ids>
                        <integer_value rank="1" shape="1">30</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <boundary_conditions name="FreeSurface">
                    <surface_ids>
                        <integer_value rank="1" shape="1">29</integer_value>
                    </surface_ids>
                    <type name="free_surface"></type>
                </boundary_conditions>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <surface_integral name="Top" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <previous_time_step>
                        <exclude_from_stat></exclude_from_stat>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat></exclude_from_stat>
                    </nonlinear_field>
                    <calculate_momentum_conservation_error></calculate_momentum_conservation_error>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </vector_field>
        <scalar_field name="FreeSurface" rank="0">
            <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="PressureMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <scalar_field name="TracerCG" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <no_stabilisation></no_stabilisation>
                        </stabilisation>
                        <advection_terms></advection_terms>
                        <mass_terms></mass_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerCGlumped" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <no_stabilisation></no_stabilisation>
                        </stabilisation>
                        <advection_terms></advection_terms>
                        <mass_terms>
                            <lump_mass_matrix></lump_mass_matrix>
                        </mass_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerCGibp" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <no_stabilisation></no_stabilisation>
                        </stabilisation>
                        <advection_terms>
                            <integrate_advection_by_parts></integrate_advection_by_parts>
                        </advection_terms>
                        <mass_terms></mass_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerDGibp1" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <once></once>
                            </integrate_advection_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerDGibp2" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <twice></twice>
                            </integrate_advection_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerDGibp1icbp" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <once></once>
                            </integrate_advection_by_parts>
                            <integrate_conservation_term_by_parts></integrate_conservation_term_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerDGibp2icbp" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <twice></twice>
                            </integrate_advection_by_parts>
                            <integrate_conservation_term_by_parts></integrate_conservation_term_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TracerCV" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <control_volumes>
                        <face_value name="FiniteElement">
                            <limit_face_value>
                                <limiter name="Sweby">
                                    <project_upwind_value_from_point>
                                        <reflect_off_domain_boundaries></reflect_off_domain_boundaries>
                                        <bound_projected_value_locally></bound_projected_value_locally>
                                    </project_upwind_value_from_point>
                                </limiter>
                            </limit_face_value>
                        </face_value>
                        <diffusion_scheme name="ElementGradient"></diffusion_scheme>
                    </control_volumes>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <control_volumes>
                        <number_advection_iterations>
                            <integer_value rank="0">3</integer_value>
                        </number_advection_iterations>
                    </control_volumes>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerCG" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <no_stabilisation></no_stabilisation>
                        </stabilisation>
                        <advection_terms></advection_terms>
                        <mass_terms></mass_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerCGlumped" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <no_stabilisation></no_stabilisation>
                        </stabilisation>
                        <advection_terms></advection_terms>
                        <mass_terms>
                            <lump_mass_matrix></lump_mass_matrix>
                        </mass_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerCGibp" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <no_stabilisation></no_stabilisation>
                        </stabilisation>
                        <advection_terms>
                            <integrate_advection_by_parts></integrate_advection_by_parts>
                        </advection_terms>
                        <mass_terms></mass_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerDGibp1" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <once></once>
                            </integrate_advection_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerDGibp2" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <twice></twice>
                            </integrate_advection_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerDGibp1icbp" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <once></once>
                            </integrate_advection_by_parts>
                            <integrate_conservation_term_by_parts></integrate_conservation_term_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerDGibp2icbp" rank="0">
            <prognostic>
                <mesh name="DGMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <twice></twice>
                            </integrate_advection_by_parts>
                            <integrate_conservation_term_by_parts></integrate_conservation_term_by_parts>
                        </advection_scheme>
                        <diffusion_scheme>
                            <bassi_rebay></bassi_rebay>
                        </diffusion_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerCV" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <control_volumes>
                        <face_value name="FiniteElement">
                            <limit_face_value>
                                <limiter name="Sweby">
                                    <project_upwind_value_from_point>
                                        <reflect_off_domain_boundaries></reflect_off_domain_boundaries>
                                        <bound_projected_value_locally></bound_projected_value_locally>
                                    </project_upwind_value_from_point>
                                </limiter>
                            </limit_face_value>
                        </face_value>
                        <diffusion_scheme name="ElementGradient"></diffusion_scheme>
                    </control_volumes>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <control_volumes>
                        <number_advection_iterations>
                            <integer_value rank="0">3</integer_value>
                        </number_advection_iterations>
                    </control_volumes>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Beta0TracerHyperC" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <control_volumes>
                        <face_value name="HyperC">
                            <project_upwind_value_from_point>
                                <reflect_off_domain_boundaries></reflect_off_domain_boundaries>
                                <bound_projected_value_locally></bound_projected_value_locally>
                            </project_upwind_value_from_point>
                            <courant_number name="ControlVolumeCFLNumber"></courant_number>
                        </face_value>
                        <diffusion_scheme name="ElementGradient"></diffusion_scheme>
                    </control_volumes>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0</real_value>
                    </theta>
                    <control_volumes>
                        <maximum_courant_number_per_subcycle>
                            <real_value rank="0">0.25</real_value>
                            <courant_number name="ControlVolumeCFLNumber"></courant_number>
                        </maximum_courant_number_per_subcycle>
                        <pivot_theta>
                            <real_value rank="0">0</real_value>
                        </pivot_theta>
                    </control_volumes>
                </temporal_discretisation>
                <explicit></explicit>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp, sqrt&#x0A;   amp = 1.0&#x0A;   x0 = 0.5&#x0A;   sigmax = 0.075&#x0A;   y0 = x0&#x0A;   sigmay = sigmax&#x0A;   r = sqrt((X[0]-x0)**2 + (X[1]-y0)**2)&#x0A;   if(r&lt;0.25):&#x0A;      # return amp*exp(-(((X[0] - x0)**2)/(2*(sigmax**2)) + ((X[1] - y0)**2)/(2*(sigmay**2)) ))&#x0A;      return 1.0&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat>
                    <surface_integral name="Top" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Sides" type="value">
                        <surface_ids>
                            <integer_value rank="1" shape="2">31 32</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="CFLNumber" rank="0">
            <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <vector_field name="VelocityDifference" rank="1">
            <diagnostic>
                <algorithm name="vector_python_diagnostic" material_phase_support="single">
                    <string_value lines="20" type="code" language="python">field1=state.vector_fields[&quot;Velocity&quot;]&#x0A;field2=state.vector_fields[&quot;GridVelocity&quot;]&#x0A;for i in range(field.node_count):&#x0A;   field.set(i, field1.node_val(i)-field2.node_val(i))</string_value>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <surface_integral name="Top" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="RightSide" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">32</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="LeftSide" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">31</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </vector_field>
        <vector_field name="VelocityDifferenceIterated" rank="1">
            <diagnostic>
                <algorithm name="vector_python_diagnostic" material_phase_support="single">
                    <string_value lines="20" type="code" language="python">field1=state.vector_fields[&quot;NonlinearVelocity&quot;]&#x0A;field2=state.vector_fields[&quot;GridVelocity&quot;]&#x0A;for i in range(field.node_count):&#x0A;   field.set(i, field1.node_val(i)-field2.node_val(i))</string_value>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <surface_integral name="Top" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">29</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="Bottom" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">30</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="RightSide" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">32</integer_value>
                        </surface_ids>
                    </surface_integral>
                    <surface_integral name="LeftSide" type="normal">
                        <surface_ids>
                            <integer_value rank="1" shape="1">31</integer_value>
                        </surface_ids>
                    </surface_integral>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </vector_field>
    </material_phase>
    <mesh_adaptivity>
        <mesh_movement>
            <free_surface>
                <move_whole_mesh></move_whole_mesh>
            </free_surface>
            <vector_field name="GridVelocity" rank="1">
                <diagnostic>
                    <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                    <mesh name="CoordinateMesh"></mesh>
                    <output></output>
                    <stat>
                        <include_in_stat></include_in_stat>
                    </stat>
                    <convergence>
                        <include_in_convergence></include_in_convergence>
                    </convergence>
                    <detectors>
                        <include_in_detectors></include_in_detectors>
                    </detectors>
                    <steady_state>
                        <include_in_steady_state></include_in_steady_state>
                    </steady_state>
                </diagnostic>
            </vector_field>
        </mesh_movement>
    </mesh_adaptivity>
</fluidity_options>
