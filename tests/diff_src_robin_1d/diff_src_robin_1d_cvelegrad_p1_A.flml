<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">diff_src_robin_1d_cvelegrad_p1_A</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">fluids</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">1</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="diff_src_robin_1d_A">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">2</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">0</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="CoordinateMesh"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">2.5</real_value>
            <comment>Time stepping is not actually needed for this test case but this is just to check the acceleration field solver</comment>
        </timestep>
        <finish_time>
            <real_value rank="0">10</real_value>
            <comment>Time stepping is not actually needed for this test case but this is just to check the acceleration field solver</comment>
        </finish_time>
    </timestepping>
    <physical_parameters></physical_parameters>
    <material_phase name="fluid">
        <vector_field name="Velocity" rank="1">
            <prescribed>
                <mesh name="CoordinateMesh"></mesh>
                <value name="WholeMesh">
                    <constant>
                        <real_value rank="1" shape="1" dim1="dim">0</real_value>
                    </constant>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </vector_field>
        <scalar_field name="T" rank="0">
            <prognostic>
                <mesh name="CoordinateMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <control_volumes>
                        <mass_terms>
                            <exclude_mass_terms></exclude_mass_terms>
                        </mass_terms>
                        <face_value name="FirstOrderUpwind"></face_value>
                        <diffusion_scheme name="ElementGradient"></diffusion_scheme>
                    </control_volumes>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                    <control_volumes>
                        <pivot_theta>
                            <real_value rank="0">1</real_value>
                        </pivot_theta>
                    </control_volumes>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-10</real_value>
                    </relative_error>
                    <absolute_error>
                        <real_value rank="0">1e-10</real_value>
                    </absolute_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <constant>
                        <real_value rank="0">9.87654321</real_value>
                    </constant>
                </initial_condition>
                <boundary_conditions name="right">
                    <surface_ids>
                        <integer_value rank="1" shape="1">2</integer_value>
                    </surface_ids>
                    <type name="robin">
                        <order_zero_coefficient>
                            <constant>
                                <real_value rank="0">3.14</real_value>
                            </constant>
                        </order_zero_coefficient>
                        <order_one_coefficient>
                            <constant>
                                <real_value rank="0">0.78</real_value>
                            </constant>
                        </order_one_coefficient>
                    </type>
                </boundary_conditions>
                <tensor_field name="Diffusivity" rank="2">
                    <prescribed>
                        <value name="WholeMesh">
                            <isotropic>
                                <constant>
                                    <real_value rank="0">1</real_value>
                                </constant>
                            </isotropic>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
                <scalar_field name="Source" rank="0">
                    <prescribed>
                        <value name="WholeMesh">
                            <constant>
                                <real_value rank="0">1.234</real_value>
                            </constant>
                        </value>
                        <output></output>
                        <stat></stat>
                        <detectors>
                            <exclude_from_detectors></exclude_from_detectors>
                        </detectors>
                    </prescribed>
                </scalar_field>
                <output></output>
                <stat>
                    <include_cv_stats></include_cv_stats>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="TAnalytic" rank="0">
            <prescribed>
                <mesh name="CoordinateMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   # get the 1d coord&#x0A;   x = X[0]&#x0A;   &#x0A;   # define the analytic input&#x0A;   x_left      = 0.0&#x0A;   x_right     = 10.0&#x0A;   src         = 1.234&#x0A;   bc_right_r0 = 3.14&#x0A;   bc_right_r1 = 0.78  &#x0A;   &#x0A;   T_inf = bc_right_r0 / bc_right_r1   &#x0A;   gamma = bc_right_r1&#x0A;   &#x0A;   # calc the analytic solution&#x0A;   T = (src/2.0)*(x_right**2 - x**2) \&#x0A;     + (src*x_left)*(x - x_right) \&#x0A;     + (src/gamma)*(x_right - x_left) \&#x0A;     + T_inf &#x0A;   &#x0A;   return T</string_value>
                    </python>
                </value>
                <output></output>
                <stat>
                    <include_cv_stats></include_cv_stats>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </scalar_field>
        <scalar_field name="TError" rank="0">
            <diagnostic>
                <algorithm name="scalar_python_diagnostic" material_phase_support="single">
                    <string_value lines="20" type="code" language="python">field1=state.scalar_fields[&quot;T&quot;]&#x0A;field2=state.scalar_fields[&quot;TAnalytic&quot;]&#x0A;for i in range(field.node_count):&#x0A;   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
                </algorithm>
                <mesh name="CoordinateMesh"></mesh>
                <output></output>
                <stat>
                    <include_cv_stats></include_cv_stats>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
    </material_phase>
</fluidity_options>
