<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">lagrange_tracer</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">fluids</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">2</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="2element_square">
                <format name="triangle"></format>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">0</integer_value>
                    </polynomial_degree>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">1</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="CoordinateMesh"></output_mesh>
        <stat>
            <output_at_start></output_at_start>
        </stat>
        <detectors>
            <detector_array name="DummyArray">
                <number_of_detectors>
                    <integer_value rank="0">1</integer_value>
                </number_of_detectors>
                <lagrangian></lagrangian>
                <python>
                    <string_value lines="20" type="python">def val(t):&#x0A;   coords = [[2./3., 1./3.]]&#x0A;   return coords</string_value>
                </python>
            </detector_array>
            <binary_output></binary_output>
        </detectors>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">0.1</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">10</real_value>
        </finish_time>
        <final_timestep>
            <integer_value rank="0">1</integer_value>
        </final_timestep>
    </timestepping>
    <physical_parameters></physical_parameters>
    <material_phase name="Dummy">
        <vector_field name="Velocity" rank="1">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;   from math import sqrt&#x0A;   return (-1./3., 1./3.)</string_value>
                    </python>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </vector_field>
        <scalar_field name="Field" rank="0">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;   if(X[1]&lt;0.5):&#x0A;      return 1.0&#x0A;   else:&#x0A;      return 2.0</string_value>
                    </python>
                </value>
                <output></output>
                <stat></stat>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
            </prescribed>
        </scalar_field>
    </material_phase>
</fluidity_options>
