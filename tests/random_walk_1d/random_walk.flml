<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">random_walk_1d</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="line">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1000.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">6.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">3600</real_value>
      <comment>21600 - 6h</comment>
    </finish_time>
  </timestepping>
  <material_phase name="Water">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="1" dim1="dim" rank="1">0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="Diffusivity" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">from math import pow

def val(X, t):
  ## Recreate Fig. 1 in Visser, 1997, by using Fig. 3 in Ross and Sharples, 2004
  z = abs(X[0])
  K_z = 0.001 + 0.0136245 * z - 0.00263245 * pow(z,2) + 0.000211875 * pow(z,3) - 0.00000865898 * pow(z,4) + 0.00000017623 * pow(z,5) - 0.00000000140918 * pow(z,6)
  return K_z</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <vector_field name="DiffusivityGradient" rank="1">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="grad" source_field_name="Diffusivity"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
  <embedded_models>
    <lagrangian_ensemble_biology>
      <random_seed>
        <integer_value rank="0">113165</integer_value>
      </random_seed>
      <functional_group name="RandomWalk">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
          </state_variable>
        </variables>
        <environment/>
        <stages>
          <stage name="NaivePython">
            <id>
              <real_value rank="0">1.0</real_value>
            </id>
            <initial_state>
              <number_of_agents>
                <integer_value rank="0">1000</integer_value>
              </number_of_agents>
              <position>
                <string_value type="python" lines="20">def val(t):
  from numpy import arange
  # 4000 agents, evenly spaced in [0:40]
  positions = arange(-40.,0.,0.04).reshape(1000,1)
  return positions</string_value>
              </position>
              <biology>
                <string_value type="python" lines="20">def val(biovars):
  return biovars</string_value>
              </biology>
            </initial_state>
            <movement>
              <subcycles>
                <integer_value rank="0">1</integer_value>
              </subcycles>
              <search_tolerance>
                <real_value rank="0">1.0e-10</real_value>
              </search_tolerance>
              <reflect_on_boundary/>
              <random_walk name="NaivePython">
                <python>
                  <string_value type="python" lines="20">from numpy import random, array
from math import sqrt

diff_eval = state.scalar_fields['Diffusivity'].eval_field

def val(ele, local_coord, dt):
  # Eq. 2 from Visser, 1997:
  # z(n+1) = z(n) + R(2 r^-1 K dt)^-1/2, where r = 1/3
  rnd = random.uniform(-1.,1.,1)
  K = diff_eval(ele, array(local_coord))
  return [rnd * sqrt(6*K*dt)]</string_value>
                </python>
              </random_walk>
            </movement>
            <disable_biology/>
          </stage>
          <stage name="DiffusivePython">
            <id>
              <real_value rank="0">2.0</real_value>
            </id>
            <initial_state>
              <number_of_agents>
                <integer_value rank="0">1000</integer_value>
              </number_of_agents>
              <position>
                <string_value lines="20" type="python">def val(t):
  from numpy import arange
  # 4000 agents, evenly spaced in [0:40]
  positions = arange(-40.,0.,0.04).reshape(1000,1)
  return positions</string_value>
              </position>
              <biology>
                <string_value lines="20" type="python">def val(biovars):
  return biovars</string_value>
              </biology>
            </initial_state>
            <movement>
              <subcycles>
                <integer_value rank="0">1</integer_value>
              </subcycles>
              <search_tolerance>
                <real_value rank="0">1.0e-10</real_value>
              </search_tolerance>
              <reflect_on_boundary/>
              <random_walk name="DiffusivePython">
                <python>
                  <string_value lines="20" type="python">from numpy import random, array
from math import sqrt

diff_eval = state.scalar_fields['Diffusivity'].eval_field
diff_grad_eval = state.vector_fields['DiffusivityGradient'].eval_field
coord_eval = state.vector_fields['Coordinate'].eval_field
coord_lcoord = state.vector_fields['Coordinate'].local_coords

def val(ele, local_coord, dt):
  local_coord = array(local_coord)
  rnd = random.uniform(-1.,1.,1)
  
  # evaluate diffusivity gradient
  K_grad = diff_grad_eval(ele, local_coord)[-1]
  
  # evaluate diffusivity at an offset to the original position
  position = coord_eval(ele, local_coord)
  position = position  + 0.5*dt*K_grad
  lcoord = coord_lcoord(ele, position)
  K = diff_eval(ele, lcoord)

  return [K_grad*dt + (rnd * sqrt(6*K*dt))]</string_value>
                </python>
              </random_walk>
            </movement>
            <disable_biology/>
          </stage>
          <stage name="Naive">
            <id>
              <real_value rank="0">3.0</real_value>
            </id>
            <initial_state>
              <number_of_agents>
                <integer_value rank="0">1000</integer_value>
              </number_of_agents>
              <position>
                <string_value lines="20" type="python">def val(t):
  from numpy import arange
  # 4000 agents, evenly spaced in [0:40]
  positions = arange(-40.,0.,0.04).reshape(1000,1)
  return positions</string_value>
              </position>
              <biology>
                <string_value lines="20" type="python">def val(biovars):
  return biovars</string_value>
              </biology>
            </initial_state>
            <movement>
              <subcycles>
                <integer_value rank="0">1</integer_value>
              </subcycles>
              <search_tolerance>
                <real_value rank="0">1.0e-10</real_value>
              </search_tolerance>
              <reflect_on_boundary/>
              <random_walk diffusivity_field="Diffusivity" name="Naive"/>
            </movement>
            <disable_biology/>
          </stage>
          <stage name="Diffusive">
            <id>
              <real_value rank="0">4.0</real_value>
            </id>
            <initial_state>
              <number_of_agents>
                <integer_value rank="0">1000</integer_value>
              </number_of_agents>
              <position>
                <string_value lines="20" type="python">def val(t):
  from numpy import arange
  # 4000 agents, evenly spaced in [0:40]
  positions = arange(-40.,0.,0.04).reshape(1000,1)
  return positions</string_value>
              </position>
              <biology>
                <string_value lines="20" type="python">def val(biovars):
  return biovars</string_value>
              </biology>
            </initial_state>
            <movement>
              <subcycles>
                <integer_value rank="0">1</integer_value>
              </subcycles>
              <search_tolerance>
                <real_value rank="0">1.0e-10</real_value>
              </search_tolerance>
              <reflect_on_boundary/>
              <random_walk diffusivity_gradient="DiffusivityGradient" diffusivity_field="Diffusivity" name="Diffusive"/>
            </movement>
            <disable_biology/>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
      </functional_group>
    </lagrangian_ensemble_biology>
  </embedded_models>
</fluidity_options>
