<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>darcy_impes_p1_pseudo1phase_pressBCinlet</name>
  <owner userid="btollit"/>
  <tags>diml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
../../bin/darcy_impes darcy_impes_p1_pseudo1phase_pressBCinlet_1d.diml 
../../bin/darcy_impes darcy_impes_p1_pseudo1phase_pressBCinlet_2d.diml 
../../bin/darcy_impes darcy_impes_p1_pseudo1phase_pressBCinlet_3d.diml 
    </command_line>
    <!-- One/two/three dimensional problem for darcy flow using the IMPES solver with one region and one material using p1 element type testing the pressure gradient as well as pressure min and max against analytic using 2 phases to test a 1 phase problem. -->
  </problem_definition>
  <variables>
    <variable name="pressure_1d" language="python">
import vtktools
v = vtktools.vtu("darcy_impes_p1_pseudo1phase_pressBCinlet_1d_1.vtu")
pressure_1d = v.GetScalarRange("Phase1::Pressure")
    </variable>
    <variable name="pressure_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_impes_p1_pseudo1phase_pressBCinlet_2d_1.vtu")
pressure_2d = v.GetScalarRange("Phase1::Pressure")
    </variable>
    <variable name="pressure_3d" language="python">
import vtktools
v = vtktools.vtu("darcy_impes_p1_pseudo1phase_pressBCinlet_3d_1.vtu")
pressure_3d = v.GetScalarRange("Phase1::Pressure")
    </variable>
  </variables>
  <pass_tests>
    <test name="change_P for 1d should equal domain_length*visc*darcy_vel_BC/perm, check relative difference to be under tolerance 1.0e-09" language="python">
change_P = abs(max(pressure_1d) - min(pressure_1d))
visc = 1.0e-04
darcy_vel_BC = 5.0
perm = 1.0e-10
domain_length = 300.0
print 'Relative error of pressure difference: ',abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm))
assert abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm)) &lt; 1.0e-09
    </test>
    <test name="change_P for 2d should equal domain_length*visc*darcy_vel_BC/perm, check relative difference to be under tolerance 1.0e-09" language="python">
change_P = abs(max(pressure_2d) - min(pressure_2d))
visc = 1.0e-04
darcy_vel_BC = 5.0
perm = 1.0e-10
domain_length = 300.0
print 'Relative error of pressure difference: ',abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm))
assert abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm)) &lt; 1.0e-09
    </test>
    <test name="change_P for 3d should equal domain_length*visc*darcy_vel_BC/perm, check relative difference to be under tolerance 1.0e-09" language="python">
change_P = abs(max(pressure_3d) - min(pressure_3d))
visc = 1.0e-04
darcy_vel_BC = 5.0
perm = 1.0e-10
domain_length = 300.0
print 'Relative error of pressure difference: ',abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm))
assert abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm)) &lt; 1.0e-09
    </test>

    <test name="max_P for 1d should equal 1.5e+09, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Relative error of pressure max ',abs((max(pressure_1d) - 1.5e+09)/1.5e+09)
assert abs((max(pressure_1d) - 1.5e+09)/1.5e+09) &lt; 1.0e-09
    </test>
    <test name="max_P for 2d should equal 1.5e+09, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Relative error of pressure max ',abs((max(pressure_2d) - 1.5e+09)/1.5e+09)
assert abs((max(pressure_2d) - 1.5e+09)/1.5e+09) &lt; 1.0e-09
    </test>
    <test name="max_P for 3d should equal 1.5e+09, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Relative error of pressure max ',abs((max(pressure_3d) - 1.5e+09)/1.5e+09)
assert abs((max(pressure_3d) - 1.5e+09)/1.5e+09) &lt; 1.0e-09
    </test>

    <test name="min_P for 1d should equal 0.0, check absolute difference to be under tolerance 1.0e-09" language="python">
print 'Absolute error of pressure min ',abs(min(pressure_1d))
assert abs(min(pressure_1d)) &lt; 1.0e-09
    </test>
    <test name="min_P for 2d should equal 0.0, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Absolute error of pressure min ',abs(min(pressure_2d))
assert abs(min(pressure_2d)) &lt; 1.0e-09
    </test>
    <test name="min_P for 3d should equal 0.0, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Absolute error of pressure min ',abs(min(pressure_3d))
assert abs(min(pressure_3d)) &lt; 1.0e-09
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
