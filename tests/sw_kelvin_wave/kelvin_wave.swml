<?xml version="1.0" encoding="utf-8" ?>
<shallow_water_options>
    <simulation_name>
        <string_value lines="1">kelvin_wave</string_value>
    </simulation_name>
    <geometry>
        <dimension>
            <integer_value rank="0">3</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="basin">
                <format name="triangle"></format>
                <dimension>
                    <integer_value rank="0">2</integer_value>
                </dimension>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
                <mesh_shape>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">2</integer_value>
                    </polynomial_degree>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">10000</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="VelocityMesh"></output_mesh>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">100</real_value>
        </timestep>
        <nonlinear_iterations>
            <integer_value rank="0">1</integer_value>
        </nonlinear_iterations>
        <finish_time>
            <real_value rank="0">10000</real_value>
        </finish_time>
    </timestepping>
    <physical_parameters>
        <gravity>
            <magnitude>
                <real_value rank="0">10</real_value>
            </magnitude>
            <vector_field name="GravityDirection" rank="1">
                <prescribed>
                    <mesh name="CoordinateMesh"></mesh>
                    <value name="WholeMesh">
                        <constant>
                            <real_value rank="1" shape="3" dim1="dim">0 0 1</real_value>
                        </constant>
                    </value>
                    <output></output>
                    <stat>
                        <include_in_stat></include_in_stat>
                    </stat>
                    <detectors>
                        <exclude_from_detectors></exclude_from_detectors>
                    </detectors>
                    <adjoint_storage>
                        <exists_in_forward></exists_in_forward>
                    </adjoint_storage>
                </prescribed>
            </vector_field>
        </gravity>
        <coriolis>
            <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   return 1.0313e-04</string_value>
        </coriolis>
    </physical_parameters>
    <material_phase name="Fluid">
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="ShallowWater"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <none></none>
                        </advection_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-16</real_value>
                    </relative_error>
                    <absolute_error>
                        <real_value rank="0">1e-16</real_value>
                    </absolute_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import sqrt, exp&#x0A;   LR = 68000.&#x0A;   u = [0.0,0.0]&#x0A;   g = 10.&#x0A;   H = 5.&#x0A;   r0 = 250000.&#x0A;   r = ((X[0])**2 + (X[1]**2))**0.5&#x0A;   if(r&gt;0.0001):&#x0A;      u[0] =-0.05*sqrt(g/H)*exp((r-r0)/LR)*X[0]/r*X[1]/r&#x0A;      u[1] =0.05*sqrt(g/H)*exp((r-r0)/LR)*X[0]/r*X[0]/r&#x0A;   return [u[0],u[1],0]</string_value>
                    </python>
                </initial_condition>
                <boundary_conditions name="FreeSlip">
                    <surface_ids>
                        <integer_value rank="1" shape="1">3</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <previous_time_step>
                        <exclude_from_stat></exclude_from_stat>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat></exclude_from_stat>
                    </nonlinear_field>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </vector_field>
        <scalar_field name="LayerThickness" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <advection_terms>
                            <exclude_advection_terms></exclude_advection_terms>
                        </advection_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">1</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-16</real_value>
                    </relative_error>
                    <absolute_error>
                        <real_value rank="0">1e-16</real_value>
                    </absolute_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="code" language="python">def val(X,t):&#x0A;   from math import exp&#x0A;   LR = 68000.&#x0A;   u = [0.0,0.0]&#x0A;   g = 10.&#x0A;   H = 5.&#x0A;   r0 = 250000.&#x0A;   r = ((X[0])**2 + (X[1]**2))**0.5&#x0A;   if(r&gt;0.0001):&#x0A;      return 0.05*exp((r-r0)/LR)*X[0]/r&#x0A;   else:&#x0A;      return 0.0</string_value>
                    </python>
                </initial_condition>
                <mean_layer_thickness>
                    <real_value rank="0">5</real_value>
                </mean_layer_thickness>
                <output></output>
                <stat></stat>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
    </material_phase>
    <debug>
        <check_inverse_coriolis_matrix></check_inverse_coriolis_matrix>
        <check_wave_matrix></check_wave_matrix>
        <check_solution></check_solution>
    </debug>
</shallow_water_options>
