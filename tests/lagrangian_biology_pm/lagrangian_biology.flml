<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">lagrangian_biology</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="line">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="LEBiologyMesh">
      <from_mesh>
        <mesh name="VelocityMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DGMesh">
      <from_mesh>
        <mesh name="VelocityMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">3</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="Water">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="1" dim1="dim" rank="1">0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="DropoutTracer" rank="0">
      <prognostic>
        <mesh name="DGMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.</real_value>
          </constant>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
  </material_phase>
  <embedded_models>
    <lagrangian_ensemble_biology>
      <random_seed>
        <integer_value rank="0">123456789</integer_value>
      </random_seed>
      <functional_group name="StageChange">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
          </state_variable>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">50</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange
  # 50 agents, evenly spaced every 2m
  positions = arange(-99.5,0.,2.).reshape(50,1)
  return positions</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(variables):
  variables['Stage'] = stage_id('StageChange', 'Start')
  variables['Size'] = 100.0
  return variables</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
        </movement>
        <environment/>
        <stages>
          <stage name="Start">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(agent, env, dt):
  agent['Stage'] = stage_id('StageChange', 'Finish')
  return agent</string_value>
              </python>
            </biology>
            <disable_io/>
          </stage>
          <stage name="Finish">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(biovars, env, dt):
  return biovars</string_value>
              </python>
            </biology>
            <disable_io/>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
      <functional_group name="Delayed">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
          </state_variable>
          <state_variable name="ChangeControl"/>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">200</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange, concatenate
  # 200 agents, 4 per element, evenly spaced every 2m
  positions = arange(-99.5,0.,2.)#.reshape(50,1)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  return positions.reshape(200,1)</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(variables):
  variables['Stage'] = stage_id('Delayed', 'Source')
  variables['Size'] = 100.0
  variables['ChangeControl'] = 0.0
  return variables</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
        </movement>
        <environment/>
        <stages>
          <stage name="Source">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(variables, env, dt):
  variables['Size'] = 100.0
  variables['ChangeControl'] += 1.0
  # during the second timestep, switch to stage 'Target'
  if variables['ChangeControl'] == 3.0:
    variables['Stage'] = stage_id('Delayed', 'Target') 
  return variables</string_value>
              </python>
            </biology>
            <disable_io/>
          </stage>
          <stage name="Target">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(variables, env, dt):
  return variables</string_value>
              </python>
            </biology>
            <particle_management>
              <period_in_timesteps>
                <integer_value rank="0">3</integer_value>
              </period_in_timesteps>
            </particle_management>
            <disable_io/>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
      <functional_group name="LayeredSplit">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
            <include_in_io/>
          </state_variable>
          <chemical_variable name="Nutrient">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
            </scalar_field>
            <include_in_io/>
          </chemical_variable>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">50</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange
  # 50 agents, evenly spaced every 2m
  positions = arange(-99.5,0.,2.).reshape(50,1)
  return positions</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(agent):
  agent['Stage'] = stage_id('LayeredSplit', 'Stage')
  agent['Size'] = 100.0
  agent['Nutrient'] = 1.0
  return agent</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
        </movement>
        <environment/>
        <stages>
          <stage name="Stage">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(agent, env, dt):
  return agent</string_value>
              </python>
            </biology>
            <particle_management>
              <period_in_timesteps>
                <integer_value rank="0">1</integer_value>
              </period_in_timesteps>
              <scalar_field name="AgentsMin">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <constant>
                      <real_value rank="0">4</real_value>
                    </constant>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
              <scalar_field name="AgentsMax">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <constant>
                      <real_value rank="0">4</real_value>
                    </constant>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
            </particle_management>
            <io_period>
              <real_value rank="0">1</real_value>
            </io_period>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
      <functional_group name="LayeredMerge">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
            <include_in_io/>
          </state_variable>
          <chemical_variable name="Nutrient">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
            </scalar_field>
            <include_in_io/>
          </chemical_variable>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">200</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange, concatenate
  # 200 agents, 4 per element, evenly spaced every 2m
  positions = arange(-99.5,0.,2.)#.reshape(50,1)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  return positions.reshape(200,1)</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(agent):
  agent['Stage'] = stage_id('LayeredMerge', 'Stage')
  agent['Size'] = 25.0
  agent['Nutrient'] = 1.0
  return agent</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
        </movement>
        <environment/>
        <stages>
          <stage name="Stage">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(agent, env, dt):
  return agent</string_value>
              </python>
            </biology>
            <particle_management>
              <period_in_timesteps>
                <integer_value rank="0">1</integer_value>
              </period_in_timesteps>
              <scalar_field name="AgentsMin">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <constant>
                      <real_value rank="0">1</real_value>
                    </constant>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
              <scalar_field name="AgentsMax">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <constant>
                      <real_value rank="0">1</real_value>
                    </constant>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
            </particle_management>
            <io_period>
              <real_value rank="0">1</real_value>
            </io_period>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
      <functional_group name="LayeredPythonSplit">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
          </state_variable>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">50</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange
  # 50 agents, evenly spaced every 2m
  positions = arange(-99.5,0.,2.).reshape(50,1)
  return positions</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(agent):
  agent['Stage'] = stage_id('LayeredPythonSplit', 'Stage')
  agent['Size'] = 100.0
  agent['Nutrient'] = 1.0
  return agent</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
        </movement>
        <environment/>
        <stages>
          <stage name="Stage">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(agent, env, dt):
  return agent</string_value>
              </python>
            </biology>
            <particle_management>
              <period_in_timesteps>
                <integer_value rank="0">1</integer_value>
              </period_in_timesteps>
              <scalar_field name="AgentsMin">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <python>
                      <string_value lines="20" type="code" language="python">from __builtin__ import abs
def val(X,t):
  minimum = 1
  if (abs(X[0]) &gt; 50.):
    minimum = 2
  return minimum</string_value>
                    </python>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
              <scalar_field name="AgentsMax">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <constant>
                      <real_value rank="0">2</real_value>
                    </constant>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
            </particle_management>
            <io_period>
              <real_value rank="0">1</real_value>
            </io_period>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
      <functional_group name="LayeredPythonMerge">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
          </state_variable>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">200</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange, concatenate
  # 200 agents, 4 per element, evenly spaced every 2m
  positions = arange(-99.5,0.,2.)#.reshape(50,1)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  positions = concatenate((positions, arange(-99.5,0.,2.)), axis=0)
  return positions.reshape(200,1)</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(agent):
  agent['Stage'] = stage_id('LayeredPythonMerge', 'Stage')
  agent['Size'] = 25.0
  agent['Nutrient'] = 1.0
  return agent</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
        </movement>
        <environment/>
        <stages>
          <stage name="Stage">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(agent, env, dt):
  return agent</string_value>
              </python>
            </biology>
            <particle_management>
              <period_in_timesteps>
                <integer_value rank="0">1</integer_value>
              </period_in_timesteps>
              <scalar_field name="AgentsMin">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <constant>
                      <real_value rank="0">1</real_value>
                    </constant>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
              <scalar_field name="AgentsMax">
                <prescribed>
                  <mesh name="LEBiologyMesh"/>
                  <value name="WholeMesh">
                    <python>
                      <string_value lines="20" type="code" language="python">from __builtin__ import abs
def val(X,t):
  maximum = 4
  if (abs(X[0]) &gt; 50.):
    maximum = 1
  return maximum</string_value>
                    </python>
                  </value>
                  <output/>
                  <stat/>
                  <detectors>
                    <exclude_from_detectors/>
                  </detectors>
                </prescribed>
              </scalar_field>
            </particle_management>
            <disable_io/>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
      <functional_group name="Dropout">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
          </state_variable>
          <state_variable name="ChangeControl"/>
          <chemical_variable name="Tracer">
            <release>
              <target_field name="DropoutTracer"/>
              <scalar_field name="Release">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <mesh name="LEBiologyMesh"/>
                  <output/>
                  <stat/>
                  <do_not_recalculate/>
                  <galerkin_projection>
                    <discontinuous/>
                  </galerkin_projection>
                </diagnostic>
              </scalar_field>
            </release>
          </chemical_variable>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">50</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange
  # 50 agents, evenly spaced every 2m
  positions = arange(-99.5,0.,2.).reshape(50,1)
  return positions</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(agent):
  agent['Stage'] = stage_id('Dropout', 'Stage')
  agent['Size'] = 100.0
  agent['ChangeControl'] = 0.0
  agent['Tracer'] = 0.001
  return agent</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
        </movement>
        <environment/>
        <stages>
          <stage name="Stage">
            <biology>
              <python>
                <string_value type="code" lines="20" language="python">from lebiology import dropout_agent

def val(agent, env, dt):
  agent['ChangeControl'] += 1.0
  
  # During the second timestep, 
  # convert agent to solution
  if agent['ChangeControl'] == 2.0:
    dropout_agent() 
  return agent</string_value>
              </python>
            </biology>
            <disable_io/>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
    </lagrangian_ensemble_biology>
  </embedded_models>
</fluidity_options>
