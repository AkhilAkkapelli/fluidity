<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>lagrangian_biology_pm</name>
  <owner userid="mlange"/>
  <tags>flml lagrangian_biology</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>
../../bin/fluidity -v2 -l -p lagrangian_biology.flml
    </command_line>
  </problem_definition>
  <variables>
    <variable name="agent_count_split" language="python">
from fluidity_tools import stat_parser
agent_count_split = stat_parser("lagrangian_biology.stat")['Water']['LayeredSplitAgentsStage']['integral']
    </variable>
    <variable name="biomass_split" language="python">
from fluidity_tools import stat_parser
biomass_split = stat_parser("lagrangian_biology.stat")['Water']['LayeredSplitEnsembleSize']['integral']
    </variable>
    <variable name="nutrients_split" language="python">
from fluidity_tools import stat_parser
nutrients_split = stat_parser("lagrangian_biology.stat")['Water']['LayeredSplitParticulateNutrient']['integral']
    </variable>
    <variable name="final_agent_sizes_split" language="python">
from fluidity_tools import stat_parser
from numpy import array
s = stat_parser("LayeredSplitStage.detectors")
final_agent_sizes_split = array([ s['Size'][agent][-1] for agent in s['Size'].keys() ])
    </variable>
    <variable name="agent_count_merge" language="python">
from fluidity_tools import stat_parser
agent_count_merge = stat_parser("lagrangian_biology.stat")['Water']['LayeredMergeAgentsStage']['integral']
    </variable>
    <variable name="biomass_merge" language="python">
from fluidity_tools import stat_parser
biomass_merge = stat_parser("lagrangian_biology.stat")['Water']['LayeredMergeEnsembleSizeStage']['integral']
    </variable>
    <variable name="nutrients_merge" language="python">
from fluidity_tools import stat_parser
nutrients_merge = stat_parser("lagrangian_biology.stat")['Water']['LayeredMergeParticulateNutrient']['integral']
    </variable>
    <variable name="final_agent_sizes_merge" language="python">
from fluidity_tools import stat_parser
from numpy import array, isnan
s = stat_parser("LayeredMergeStage.detectors")
final_agent_sizes_merge = []
for agent in s['Size'].keys():
  if not isnan(s['Size'][agent][-1]):
    final_agent_sizes_merge.append(s['Size'][agent][-1])
final_agent_sizes_merge=array(final_agent_sizes_merge)  
    </variable>
    <variable name="agent_count_stage_change_start" language="python">
from fluidity_tools import stat_parser
agent_count_stage_change_start = stat_parser("lagrangian_biology.stat")['Water']['StageChangeAgentsStart']['integral']
    </variable>
    <variable name="agent_count_stage_change_finish" language="python">
from fluidity_tools import stat_parser
agent_count_stage_change_finish = stat_parser("lagrangian_biology.stat")['Water']['StageChangeAgentsFinish']['integral']
    </variable>
    <variable name="agent_count_delayed" language="python">
from fluidity_tools import stat_parser
agent_count_delayed = stat_parser("lagrangian_biology.stat")['Water']['DelayedAgentsTarget']['integral']
    </variable>
    <variable name="agent_count_python_split" language="python">
from fluidity_tools import stat_parser
agent_count_python_split = stat_parser("lagrangian_biology.stat")['Water']['LayeredPythonSplitAgentsStage']['integral']
    </variable>
    <variable name="agent_count_python_merge" language="python">
from fluidity_tools import stat_parser
agent_count_python_merge = stat_parser("lagrangian_biology.stat")['Water']['LayeredPythonMergeAgentsStage']['integral']
    </variable>
  </variables>
  <pass_tests>
    <test name="constant_biomass_split" language="python">
assert abs(biomass_split - 5000.0).all() &lt; 1.0e-6
    </test>
    <test name="constant_nutrients_split" language="python">
assert abs(nutrients_split - 5000.0).all() &lt; 1.0e-6
    </test>
    <test name="final_agent_count_split" language="python">
assert abs(agent_count_split[-1] - 200.0) &lt; 1.0e-6
    </test>
    <test name="constant_agent_size_split" language="python">
assert abs(final_agent_sizes_split - 25.0).all() &lt; 1.0e-6
    </test>
    <test name="constant_biomass_merge" language="python">
assert abs(biomass_merge - 5000.0).all() &lt; 1.0e-6
    </test>
    <test name="constant_nutrients_merge" language="python">
assert abs(nutrients_merge - 5000.0).all() &lt; 1.0e-6
    </test>
    <test name="final_agent_count_merge" language="python">
assert abs(agent_count_merge[-1] - 50.0) &lt; 1.0e-6
    </test>
    <test name="constant_agent_size_merge" language="python">
assert abs(final_agent_sizes_merge - 100.0).all() &lt; 1.0e-6
    </test>
    <test name="final_agent_count_sc_start" language="python">
assert abs(agent_count_stage_change_start[-1]) &lt; 1.0e-6
    </test>
    <test name="final_agent_count_sc_finish" language="python">
assert abs(agent_count_stage_change_finish[-1] - 50.0) &lt; 1.0e-6
    </test>
    <test name="delayed_final_agent_count" language="python">
assert abs(agent_count_delayed[-1] - 200.0) &lt; 1.0e-6
    </test>
    <test name="delayed_middle_agent_count" language="python">
assert abs(agent_count_delayed[-2] ) &lt; 1.0e-6
    </test>
    <test name="final_agent_count_python_split" language="python">
assert abs(agent_count_python_split[-1] - 75.0).all() &lt; 1.0e-6
    </test>
    <test name="final_agent_count_python_merge" language="python">
assert abs(agent_count_python_merge[-1] - 125.0).all() &lt; 1.0e-6
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
