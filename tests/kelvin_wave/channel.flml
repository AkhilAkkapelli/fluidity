<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">channel</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">oceans</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">3</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="channel">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="PeriodicContinuousMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
                <mesh_shape>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="PeriodicContinuousMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">2</integer_value>
                    </polynomial_degree>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PeriodicContinuousMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <periodic_boundary_conditions name="MakeEndsMeet">
                    <physical_boundary_ids>
                        <integer_value rank="1" shape="1">5</integer_value>
                    </physical_boundary_ids>
                    <aliased_boundary_ids>
                        <integer_value rank="1" shape="1">3</integer_value>
                    </aliased_boundary_ids>
                    <coordinate_map>
                        <string_value lines="20" type="python">def val(X,t):&#x0A;   return (X[0]-100000,X[1],X[2])</string_value>
                    </coordinate_map>
                </periodic_boundary_conditions>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
        <ocean_boundaries>
            <top_surface_ids>
                <integer_value rank="1" shape="1">1</integer_value>
            </top_surface_ids>
            <bottom_surface_ids>
                <integer_value rank="1" shape="1">2</integer_value>
            </bottom_surface_ids>
            <scalar_field name="DistanceToTop" rank="0">
                <diagnostic>
                    <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                    <mesh name="CoordinateMesh"></mesh>
                    <output></output>
                    <stat></stat>
                    <convergence>
                        <include_in_convergence></include_in_convergence>
                    </convergence>
                    <detectors>
                        <include_in_detectors></include_in_detectors>
                    </detectors>
                    <steady_state>
                        <include_in_steady_state></include_in_steady_state>
                    </steady_state>
                </diagnostic>
            </scalar_field>
            <scalar_field name="DistanceToBottom" rank="0">
                <diagnostic>
                    <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                    <mesh name="CoordinateMesh"></mesh>
                    <output></output>
                    <stat></stat>
                    <convergence>
                        <include_in_convergence></include_in_convergence>
                    </convergence>
                    <detectors>
                        <include_in_detectors></include_in_detectors>
                    </detectors>
                    <steady_state>
                        <include_in_steady_state></include_in_steady_state>
                    </steady_state>
                </diagnostic>
            </scalar_field>
        </ocean_boundaries>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">1</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="CoordinateMesh"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">1</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">1e+20</real_value>
        </finish_time>
        <final_timestep>
            <integer_value rank="0">500</integer_value>
            <comment>This should bring the wave exactly around</comment>
        </final_timestep>
        <nonlinear_iterations>
            <integer_value rank="0">2</integer_value>
        </nonlinear_iterations>
    </timestepping>
    <physical_parameters>
        <gravity>
            <magnitude>
                <real_value rank="0">10</real_value>
            </magnitude>
            <vector_field name="GravityDirection" rank="1">
                <prescribed>
                    <mesh name="CoordinateMesh"></mesh>
                    <value name="whole_mesh">
                        <constant>
                            <real_value rank="1" shape="3" dim1="dim">0 0 -1</real_value>
                        </constant>
                    </value>
                    <output></output>
                    <stat>
                        <include_in_stat></include_in_stat>
                    </stat>
                    <detectors>
                        <exclude_from_detectors></exclude_from_detectors>
                    </detectors>
                </prescribed>
            </vector_field>
        </gravity>
        <coriolis>
            <f_plane>
                <f>
                    <real_value rank="0">0.02</real_value>
                </f>
            </f_plane>
        </coriolis>
    </physical_parameters>
    <material_phase name="water">
        <scalar_field name="Pressure" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <remove_stabilisation_term></remove_stabilisation_term>
                        <integrate_continuity_by_parts></integrate_continuity_by_parts>
                    </continuous_galerkin>
                </spatial_discretisation>
                <scheme>
                    <poisson_pressure_solution>
                        <string_value lines="1">never</string_value>
                    </poisson_pressure_solution>
                    <use_projection_method></use_projection_method>
                </scheme>
                <solver>
                    <iterative_method name="cg"></iterative_method>
                    <preconditioner name="mg"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">500</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;   from math import exp, cos, pi, sqrt&#x0A;   eta0=1.0&#x0A;   H0=4000&#x0A;   C0=sqrt(10.0*H0)&#x0A;   f=2e-2&#x0A;   k=2.0*pi/1e5&#x0A;   eta=eta0*exp(-f*X[1]/C0)*cos(k*X[0])&#x0A;   return 10*eta</string_value>
                    </python>
                </initial_condition>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="Boussinesq"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <viscosity_scheme>
                            <bassi_rebay></bassi_rebay>
                        </viscosity_scheme>
                        <advection_scheme>
                            <upwind></upwind>
                            <integrate_advection_by_parts>
                                <twice></twice>
                            </integrate_advection_by_parts>
                        </advection_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">0.5</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">500</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="whole_mesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;   from math import exp, cos, sin, pi, sqrt&#x0A;   eta0=1.0&#x0A;   H0=4000&#x0A;   C0=sqrt(10.0*H0)&#x0A;   f=2e-2&#x0A;   k=2.0*pi/1e5&#x0A;   u=(eta0/H0)*C0*exp(-f*X[1]/C0)*cos(k*X[0])&#x0A;   w=X[2]*k*(eta0/H0)*C0*exp(-f*X[1]/C0)*sin(k*X[0])&#x0A;   return (u,0,w)</string_value>
                    </python>
                </initial_condition>
                <boundary_conditions name="NoNormalFlow">
                    <surface_ids>
                        <integer_value rank="1" shape="1">4</integer_value>
                    </surface_ids>
                    <type name="dirichlet">
                        <apply_weakly></apply_weakly>
                        <align_bc_with_cartesian>
                            <y_component>
                                <constant>
                                    <real_value rank="0">0</real_value>
                                </constant>
                            </y_component>
                        </align_bc_with_cartesian>
                    </type>
                </boundary_conditions>
                <boundary_conditions name="FreeSurface">
                    <surface_ids>
                        <integer_value rank="1" shape="1">1</integer_value>
                    </surface_ids>
                    <type name="free_surface"></type>
                </boundary_conditions>
                <boundary_conditions name="NoNormalFlowBottom">
                    <surface_ids>
                        <integer_value rank="1" shape="1">2</integer_value>
                    </surface_ids>
                    <type name="dirichlet">
                        <apply_weakly></apply_weakly>
                        <align_bc_with_cartesian>
                            <z_component>
                                <constant>
                                    <real_value rank="0">0</real_value>
                                </constant>
                            </z_component>
                        </align_bc_with_cartesian>
                    </type>
                </boundary_conditions>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <previous_time_step>
                        <exclude_from_stat></exclude_from_stat>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat></exclude_from_stat>
                    </nonlinear_field>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </vector_field>
    </material_phase>
</fluidity_options>
