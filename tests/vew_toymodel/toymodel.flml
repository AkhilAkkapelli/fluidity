<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">vew-tm</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="line">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DGMesh">
      <from_mesh>
        <mesh name="VelocityMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1800</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">63072000</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <material_phase name="water">
    <subgridscale_parameterisations>
      <prescribed_diffusivity>
        <tensor_field name="PrescribedDiffusivity" rank="2">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <python>
                  <string_value lines="20" type="python">global layerheight, read_physics_file

def read_physics_file(filename, t):  
  f = open(filename , 'r')
  mld = []
  mld_times = []
  for line in f:
    data = line.split(",")
    mld_times.append(float(data[0]))
    mld.append(float(data[1]))
    if (mld_times[-1] &gt; t and len(mld) &gt; 2):
      f.close()
      return mld, mld_times
  f.close()
  return mld, mld_times

def layerheight(t):
    from numpy import interp
    
    mld, mld_times = read_physics_file("vew_tm_mld.csv", t)
    # interpolate to correct t
    layer = interp(t, mld_times, mld)
    return layer
  
def val(X,t):
  interfacewidth=30
  layer=layerheight(t)
  if abs(X[0])&lt;=layer-interfacewidth:
    mu_Z=0.03
  elif abs(X[0])&lt;=layer:
    beta=(abs(X[0])-(layer-interfacewidth))/interfacewidth
    mu_Z=(1-beta)*0.03
  else:
    mu_Z=1e-6
  mu=[[mu_Z]]
  return mu</string_value>
                </python>
              </anisotropic_symmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
      </prescribed_diffusivity>
    </subgridscale_parameterisations>
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global layerheight, read_physics_file

def read_physics_file(filename, t):  
  f = open(filename , 'r')
  mld = []
  mld_times = []
  for line in f:
    data = line.split(",")
    mld_times.append(float(data[0]))
    mld.append(float(data[1]))
    if (mld_times[-1] &gt; t and len(mld) &gt; 2):
      f.close()
      return mld, mld_times
  f.close()
  return mld, mld_times

def layerheight(t):
    from numpy import interp
    
    mld, mld_times = read_physics_file("vew_tm_mld.csv", t)
    # interpolate to correct t
    layer = interp(t, mld_times, mld)
    return layer
  
def val(X,t):
  interfacewidth=30
  layer=layerheight(t)
  if abs(X[0])&lt;=layer:
    vel_Z=0.0
  else:
    vel_Z=-0.000011111
  return [vel_Z]</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="Temperature" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global temp, depth, read_physics_file

def read_physics_file(f):  
  temp = []
  depth = []
  data = f.readline().split(",")
  time = float(data[0])
  nLayers = int(data[1])
  depth.append(float(data[2]))
  temp.append(float(data[3])) # temperature in column 3
  for i in range(nLayers-1):
    data = f.readline().split(",")
    depth.append(float(data[2]))
    temp.append(float(data[3]))
  return temp, depth

if not persistent.has_key('temperature_fh'):
  persistent['temperature_fh'] = open("vew_tm_temp_irrad.csv" , 'r')
temp, depth = read_physics_file(persistent['temperature_fh'])

def val(X,t):  
  from numpy import interp  
  # interpolate to correct z
  return interp(abs(X[0]), depth, temp)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Irradiance" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global irrad, depth, read_physics_file

def read_physics_file(f):  
  irrad = []
  depth = []
  data = f.readline().split(",")
  time = float(data[0])
  nLayers = int(data[1])
  depth.append(float(data[2]))
  irrad.append(float(data[4])) # irradiance in column 4
  for i in range(nLayers-1):
    data = f.readline().split(",")
    depth.append(float(data[2]))
    irrad.append(float(data[4]))
  return irrad, depth

if not persistent.has_key('irradiance_fh'):
  persistent['irradiance_fh'] = open("vew_tm_temp_irrad.csv" , 'r')
irrad, depth = read_physics_file(persistent['irradiance_fh'])

def val(X,t):  
  from numpy import interp  
  # interpolate to correct z
  return interp(abs(X[0]), depth, irrad)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="VerticalDiffusivity" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import numpy
diff_tensor = state.tensor_fields['PrescribedDiffusivity']
for n in range(diff_tensor.node_count):
  vert_diff = diff_tensor[n][0]
  magnitude = numpy.sqrt(numpy.vdot(vert_diff,vert_diff))
  field.set(n, magnitude)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Ammonium" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global z, c_amm

def read_chem_file(filename):  
  f = open(filename , 'r')
  ammonium = []
  depth = []
  for line in f:
    data = line.split(",")
    depth.append(float(data[0]))
    ammonium.append(float(data[1]))
  f.close()
  return depth, ammonium

z, c_amm = read_chem_file("vew_tm_chem_init.csv")
  
def val(X,t):
  from numpy import interp
  # interpolate to correct t
  conc = interp(abs(X[0]), z, c_amm)
  return conc</string_value>
          </python>
        </initial_condition>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <scalar_field name="Absorption" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Nitrate" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global z, c_nit

def read_chem_file(filename):  
  f = open(filename , 'r')
  nitrate = []
  depth = []
  for line in f:
    data = line.split(",")
    depth.append(float(data[0]))
    nitrate.append(float(data[2])) #Nitrate
  f.close()
  return depth, nitrate

z, c_nit = read_chem_file("vew_tm_chem_init.csv")
  
def val(X,t):
  from numpy import interp
  # interpolate to correct t
  conc = interp(abs(X[0]), z, c_nit)
  return conc</string_value>
          </python>
        </initial_condition>
        <scalar_field name="Absorption" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Silicate" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">global z, c_sil

def read_chem_file(filename):  
  f = open(filename , 'r')
  silicate = []
  depth = []
  for line in f:
    data = line.split(",")
    depth.append(float(data[0]))
    silicate.append(float(data[3])) #Silicate
  f.close()
  return depth, silicate

z, c_sil = read_chem_file("vew_tm_chem_init.csv")
  
def val(X,t):
  from numpy import interp
  # interpolate to correct t
  conc = interp(abs(X[0]), z, c_sil)
  return conc</string_value>
          </python>
        </initial_condition>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <scalar_field name="Absorption" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="VerticalDiffusivityGrad" rank="1">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="grad" source_field_name="VerticalDiffusivity"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
  <embedded_models>
    <lagrangian_ensemble_biology>
      <functional_group name="Diatom">
        <state_variable name="Stage"/>
        <state_variable name="Biomass">
          <scalar_field name="Biomass">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="DGMesh"/>
              <output/>
              <stat/>
              <detectors>
                <include_in_detectors/>
              </detectors>
            </diagnostic>
            <per_stage/>
          </scalar_field>
        </state_variable>
        <chemical_variable name="Ammonium">
          <scalar_field name="Particulate">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="DGMesh"/>
              <output/>
              <stat/>
              <detectors>
                <include_in_detectors/>
              </detectors>
            </diagnostic>
          </scalar_field>
          <chemical_field name="Ammonium"/>
          <uptake>
            <scalar_field name="DGRequest">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="DGMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <scalar_field name="CGRequest">
              <diagnostic>
                <algorithm source_field_type="scalar" material_phase_support="single" name="scalar_galerkin_projection" source_field_name="DGRequest">
                  <solver>
                    <iterative_method name="cg"/>
                    <preconditioner name="sor"/>
                    <relative_error>
                      <real_value rank="0">1.0e-7</real_value>
                    </relative_error>
                    <max_iterations>
                      <integer_value rank="0">2000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures/>
                    <diagnostics>
                      <monitors/>
                    </diagnostics>
                  </solver>
                </algorithm>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <steady_state>
                  <include_in_steady_state/>
                </steady_state>
                <do_not_recalculate/>
              </diagnostic>
            </scalar_field>
            <scalar_field name="Depletion">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
          </uptake>
          <release>
            <scalar_field name="DGRelease">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="DGMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <scalar_field name="CGRelease">
              <diagnostic>
                <algorithm source_field_type="scalar" material_phase_support="single" name="scalar_galerkin_projection" source_field_name="DGRequest">
                  <solver>
                    <iterative_method name="cg"/>
                    <preconditioner name="sor"/>
                    <relative_error>
                      <real_value rank="0">1.0e-7</real_value>
                    </relative_error>
                    <max_iterations>
                      <integer_value rank="0">2000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures/>
                    <diagnostics>
                      <monitors/>
                    </diagnostics>
                  </solver>
                </algorithm>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <steady_state>
                  <include_in_steady_state/>
                </steady_state>
                <do_not_recalculate/>
              </diagnostic>
            </scalar_field>
          </release>
        </chemical_variable>
        <chemical_variable name="Nitrate">
          <scalar_field name="Particulate">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="DGMesh"/>
              <output/>
              <stat/>
              <detectors>
                <include_in_detectors/>
              </detectors>
            </diagnostic>
          </scalar_field>
          <chemical_field name="Nitrate"/>
          <uptake>
            <scalar_field name="DGRequest">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="DGMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <scalar_field name="CGRequest">
              <diagnostic>
                <algorithm source_field_type="scalar" material_phase_support="single" name="scalar_galerkin_projection" source_field_name="DGRequest">
                  <solver>
                    <iterative_method name="cg"/>
                    <preconditioner name="sor"/>
                    <relative_error>
                      <real_value rank="0">1.0e-7</real_value>
                    </relative_error>
                    <max_iterations>
                      <integer_value rank="0">2000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures/>
                    <diagnostics>
                      <monitors/>
                    </diagnostics>
                  </solver>
                </algorithm>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <steady_state>
                  <include_in_steady_state/>
                </steady_state>
                <do_not_recalculate/>
              </diagnostic>
            </scalar_field>
            <scalar_field name="Depletion">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
          </uptake>
        </chemical_variable>
        <chemical_variable name="Silicate">
          <scalar_field name="Particulate">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="DGMesh"/>
              <output/>
              <stat/>
              <detectors>
                <include_in_detectors/>
              </detectors>
            </diagnostic>
          </scalar_field>
          <chemical_field name="Silicate"/>
          <uptake>
            <scalar_field name="DGRequest">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="DGMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <scalar_field name="CGRequest">
              <diagnostic>
                <algorithm source_field_type="scalar" material_phase_support="single" name="scalar_galerkin_projection" source_field_name="DGRequest">
                  <solver>
                    <iterative_method name="cg"/>
                    <preconditioner name="sor"/>
                    <relative_error>
                      <real_value rank="0">1.0e-7</real_value>
                    </relative_error>
                    <max_iterations>
                      <integer_value rank="0">2000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures/>
                    <diagnostics>
                      <monitors/>
                    </diagnostics>
                  </solver>
                </algorithm>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <steady_state>
                  <include_in_steady_state/>
                </steady_state>
                <do_not_recalculate/>
              </diagnostic>
            </scalar_field>
            <scalar_field name="Depletion">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
          </uptake>
          <release>
            <scalar_field name="DGRelease">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="DGMesh"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
            </scalar_field>
            <scalar_field name="CGRelease">
              <diagnostic>
                <algorithm source_field_type="scalar" material_phase_support="single" name="scalar_galerkin_projection" source_field_name="DGRequest">
                  <solver>
                    <iterative_method name="cg"/>
                    <preconditioner name="sor"/>
                    <relative_error>
                      <real_value rank="0">1.0e-7</real_value>
                    </relative_error>
                    <max_iterations>
                      <integer_value rank="0">2000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures/>
                    <diagnostics>
                      <monitors/>
                    </diagnostics>
                  </solver>
                </algorithm>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat/>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <steady_state>
                  <include_in_steady_state/>
                </steady_state>
                <do_not_recalculate/>
              </diagnostic>
            </scalar_field>
          </release>
        </chemical_variable>
        <chemical_variable name="Chlorophyll">
          <scalar_field name="Particulate">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="DGMesh"/>
              <output/>
              <stat/>
              <detectors>
                <include_in_detectors/>
              </detectors>
            </diagnostic>
          </scalar_field>
        </chemical_variable>
        <chemical_variable name="Carbon">
          <scalar_field name="Particulate">
            <diagnostic>
              <algorithm name="Internal" material_phase_support="multiple"/>
              <mesh name="DGMesh"/>
              <output/>
              <stat/>
              <detectors>
                <include_in_detectors/>
              </detectors>
            </diagnostic>
          </scalar_field>
        </chemical_variable>
        <stage_array name="Living">
          <id>
            <real_value rank="0">0.0</real_value>
          </id>
          <number_of_agents>
            <integer_value rank="0">4000</integer_value>
          </number_of_agents>
          <lagrangian/>
          <binary_output/>
          <initial_position>
            <string_value lines="20" type="python">def val(t):
  from numpy import arange
  # 4000 agents, evenly spaced in [0:200]m
  positions = arange(-200.,0.0,0.05).reshape(4000,1)
  return positions</string_value>
          </initial_position>
          <initial_state>
            <values>
              <real_value shape="12" rank="1">0.0 50000.0 2.2e-9 0.0 0.0 0.0 0.0 1.05e-9 0.0 0.0 2.7e-9 1.5e-8</real_value>
            </values>
          </initial_state>
          <random_walk>
            <python>
              <string_value lines="20" type="python">from numpy import random
from math import sqrt

diffusivity = state.scalar_fields['VerticalDiffusivity']
diffusivity_grad = state.vector_fields['VerticalDiffusivityGrad']
coordinate = state.vector_fields['Coordinate']

def val(ele, local_coord, dt):
  rnd = random.uniform(-1.,1.,1)
  K_grad = diffusivity_grad.eval_field(ele, local_coord)
  
  position = coordinate.eval_field(ele, local_coord)
  position = position  + 0.5*dt*K_grad
  lcoord = coordinate.local_coords(ele, position)
  # evaluate diffusivity at an offset (lcoord) to the original position
  K = diffusivity.eval_field(ele, lcoord)

  return [K_grad*dt + (rnd * sqrt(6*K*dt))]</string_value>
            </python>
            <random_seed>
              <integer_value rank="0">10001</integer_value>
            </random_seed>
          </random_walk>
          <biology_update>
            <string_value lines="20" type="python">import fluidity.lagrangian_biology as bio
from __builtin__ import str

name = persistent['fg_var_names']['Diatom']

temperature = state.scalar_fields['Temperature']
irradiance = state.scalar_fields['Irradiance']
ammonium = state.scalar_fields['Ammonium']
nitrate = state.scalar_fields['Nitrate']
silicate = state.scalar_fields['Silicate']
amm_depletion = state.scalar_fields['AmmoniumDepletion']
nit_depletion = state.scalar_fields['NitrateDepletion']
sil_depletion = state.scalar_fields['SilicateDepletion']

def val(ele, local_coord, dt, vars):
  bio.update_living_diatom(ele, local_coord, dt, vars, name, temperature, irradiance, ammonium, nitrate, silicate, amm_depletion, nit_depletion, sil_depletion)  
  return vars</string_value>
          </biology_update>
        </stage_array>
        <stage_array name="Dead">
          <id>
            <real_value rank="0">1.0</real_value>
          </id>
          <number_of_agents>
            <integer_value rank="0">0</integer_value>
          </number_of_agents>
          <lagrangian/>
          <binary_output/>
          <initial_position>
            <string_value lines="20" type="python">def val(t):
  from numpy import arange
  # one agent per m in [0:200]m
  #positions = arange(-200.,0.0,1.0).reshape(200,1)
  return [] #positions</string_value>
          </initial_position>
          <initial_state>
            <values>
              <real_value shape="12" rank="1">1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0</real_value>
            </values>
          </initial_state>
          <random_walk>
            <python>
              <string_value lines="20" type="python">from numpy import random
from math import sqrt

diffusivity = state.scalar_fields['VerticalDiffusivity']
diffusivity_grad = state.vector_fields['VerticalDiffusivityGrad']
coordinate = state.vector_fields['Coordinate']

def val(ele, local_coord, dt):
  rnd = random.uniform(-1.,1.,1)
  K_grad = diffusivity_grad.eval_field(ele, local_coord)
  
  position = coordinate.eval_field(ele, local_coord)
  position = position  + 0.5*dt*K_grad
  lcoord = coordinate.local_coords(ele, position)
  # evaluate diffusivity at an offset (lcoord) to the original position
  K = diffusivity.eval_field(ele, lcoord)

  return [K_grad*dt + (rnd * sqrt(6*K*dt))]</string_value>
            </python>
            <random_seed>
              <integer_value rank="0">10001</integer_value>
            </random_seed>
          </random_walk>
          <biology_update>
            <string_value lines="20" type="python">import fluidity.lagrangian_biology as bio
from __builtin__ import str

name = persistent['fg_var_names']['Diatom']

temperature = state.scalar_fields['Temperature']
amm_depletion = state.scalar_fields['AmmoniumDepletion']
nit_depletion = state.scalar_fields['NitrateDepletion']
sil_depletion = state.scalar_fields['SilicateDepletion']

def val(ele, local_coord, dt, vars):
  bio.update_dead_diatom(ele, local_coord, dt, vars, name, temperature, amm_depletion, nit_depletion, sil_depletion)  
  return vars</string_value>
          </biology_update>
        </stage_array>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="DGMesh"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
          <per_stage/>
        </scalar_field>
        <lagrangian_timestepping>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <forward_euler_guided_search/>
          <reflect_on_boundary/>
        </lagrangian_timestepping>
      </functional_group>
    </lagrangian_ensemble_biology>
  </embedded_models>
</fluidity_options>
