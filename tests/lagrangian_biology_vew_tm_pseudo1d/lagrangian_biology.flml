<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">vew_toymodel</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="2DMesh"/>
        <extrude>
          <regions name="WholeMesh">
            <bottom_depth>
              <constant>
                <real_value rank="0">300</real_value>
              </constant>
            </bottom_depth>
            <sizing_function>
              <python>
                <string_value lines="20" type="code" language="python">def val(X, t):
  if abs(X[2]) &lt; 50.:
    return 1.
  if abs(X[2]) &lt; 150.:
    return 2.
  else:
    return 10.</string_value>
              </python>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">1</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">2</integer_value>
            </bottom_surface_id>
          </regions>
        </extrude>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="2DMesh">
      <from_file file_name="surface">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="DGMesh">
      <from_mesh>
        <mesh name="VelocityMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">21600</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1800</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">63070200</real_value>
      <comment>31536000 - 1 year
63072000 - 2 year
Note: For 2-year runs with VEW data use: 63070200</comment>
    </finish_time>
  </timestepping>
  <material_phase name="Water">
    <subgridscale_parameterisations>
      <prescribed_diffusivity>
        <tensor_field name="PrescribedDiffusivity" rank="2">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <python>
                  <string_value lines="20" type="code" language="python">from __builtin__ import str
from toymodel import read_physics_toy as read_physics
global calc_mu, visser_curve, quadratic_mu

if not persistent.has_key('physics_fh'):
  read_physics(persistent)
  
def visser_curve(z):
  ## Recreate Fig. 1 in Visser, 1997, by using Fig. 3 in Ross and Sharples, 2004
  z = abs(z)
  if z &lt;= 40.:
    z = 40. - z
    K_z = 0.001 + 0.0136245 * z - 0.00263245 * pow(z,2) + 0.000211875 * pow(z,3) - 0.00000865898 * pow(z,4) + 0.00000017623 * pow(z,5) - 0.00000000140918 * pow(z,6)
  else:
    K_z=1e-6
  return K_z
    
def sloped_mu(z, layer):
  interfacewidth=0.0  #30.0
  mu_MLD=0.3  #0.3
  if abs(z)&lt;=layer-interfacewidth:
    mu_Z=mu_MLD
  elif abs(z)&lt;=layer:
    beta=(abs(z)-(layer-interfacewidth))/interfacewidth
    mu_Z=(1-beta)*mu_MLD
  else:
    mu_Z=1e-5
  return mu_Z
  
def quadratic_mu(z, mld):
  z = - z / mld
  K_z = - z - pow(z,2)
  return K_z
  
def val(X,t):
  global read_physics
  if t &gt; persistent['physics_time']:
    read_physics(persistent)

  mu = 1.e-6
  layer = persistent['physics_mld']
  if abs(X[2]) &lt;= layer:
    #mu = 0.3 
    mu = quadratic_mu(abs(X[2]), layer)
    #mu = sloped_mu(abs(X[0]), layer)
    #mu = visser_curve(abs(X[0]) * 40. / layer) * 8.
  return [[1.e-6,0.,0.],[0.,1.e-6,0.],[0.,0.,mu]]</string_value>
                </python>
              </anisotropic_symmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
      </prescribed_diffusivity>
    </subgridscale_parameterisations>
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="3" dim1="dim" rank="1">0.0 0.0 0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="Irradiance" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">from toymodel import read_physics_toy as read_physics

if not persistent.has_key('physics_fh'):
  read_physics(persistent)

def val(X,t):
  global read_physics
  if t &gt; persistent['physics_time']:
    read_physics(persistent)  

  interp = persistent['physics_irrad_interp']
  return interp( abs(X[2]) )</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Temperature" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">from toymodel import read_physics_toy as read_physics

if not persistent.has_key('physics_fh'):
  read_physics(persistent)

def val(X,t):
  global read_physics
  if t &gt; persistent['physics_time']:
    read_physics(persistent)  

  interp = persistent['physics_temp_interp']
  return interp( abs(X[2]) )</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="DissolvedAmmonium" rank="0">
      <prognostic>
        <mesh name="DGMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">from toymodel import read_chemistry_toy as read_chemistry

if not persistent.has_key('chem_ammonium'):
  read_chemistry(persistent)
  
def val(X,t):
  interp = persistent['chem_ammonium']
  return interp( abs(X[2]) )</string_value>
          </python>
        </initial_condition>
        <subgridscale_parameterisation name="prescribed_diffusivity"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="DissolvedNitrate" rank="0">
      <prognostic>
        <mesh name="DGMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">from toymodel import read_chemistry_toy as read_chemistry

if not persistent.has_key('chem_nitrate'):
  read_chemistry(persistent)
  
def val(X,t):
  interp = persistent['chem_nitrate']
  return interp( abs(X[2]) )</string_value>
          </python>
        </initial_condition>
        <subgridscale_parameterisation name="prescribed_diffusivity"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="DissolvedSilicate" rank="0">
      <prognostic>
        <mesh name="DGMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">from toymodel import read_chemistry_toy as read_chemistry

if not persistent.has_key('chem_silicate'):
  read_chemistry(persistent)
  
def val(X,t):
  interp = persistent['chem_silicate']
  return interp( abs(X[2]) )</string_value>
          </python>
        </initial_condition>
        <subgridscale_parameterisation name="prescribed_diffusivity"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="ScalarDiffusivity" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">K_tensor = state.tensor_fields['PrescribedDiffusivity']
for n in range(field.node_count):
  field.set(n, K_tensor[n][-1][-1])</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <embedded_models>
    <lagrangian_ensemble_biology>
      <random_seed>
        <integer_value rank="0">123456789</integer_value>
      </random_seed>
      <functional_group name="Diatom">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
          </state_variable>
          <chemical_variable name="Ammonium">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
            <scalar_field name="Ingested">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
              <include_in_io/>
            </scalar_field>
            <uptake>
              <source_field name="DissolvedAmmonium"/>
              <scalar_field name="Request">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
                <stage_aggregate/>
              </scalar_field>
              <scalar_field name="Depletion">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
              <include_in_io/>
            </uptake>
            <release>
              <target_field name="DissolvedAmmonium"/>
              <scalar_field name="Release">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
                <stage_aggregate/>
              </scalar_field>
              <include_in_io/>
            </release>
            <include_in_io/>
          </chemical_variable>
          <chemical_variable name="Nitrate">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
            <scalar_field name="Ingested">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
            <uptake>
              <source_field name="DissolvedNitrate"/>
              <scalar_field name="Request">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
                <stage_aggregate/>
              </scalar_field>
              <scalar_field name="Depletion">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
            </uptake>
          </chemical_variable>
          <chemical_variable name="Silicate">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
            <scalar_field name="Ingested">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
            <uptake>
              <source_field name="DissolvedSilicate"/>
              <scalar_field name="Request">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
                <stage_aggregate/>
              </scalar_field>
              <scalar_field name="Depletion">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
              </scalar_field>
            </uptake>
            <release>
              <target_field name="DissolvedSilicate"/>
              <scalar_field name="Release">
                <diagnostic>
                  <algorithm name="Internal" material_phase_support="multiple"/>
                  <output/>
                  <stat/>
                  <detectors>
                    <include_in_detectors/>
                  </detectors>
                </diagnostic>
                <stage_aggregate/>
              </scalar_field>
            </release>
          </chemical_variable>
          <chemical_variable name="Carbon">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
          </chemical_variable>
          <chemical_variable name="Chlorophyll">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat/>
                <detectors>
                  <include_in_detectors/>
                </detectors>
              </diagnostic>
              <stage_aggregate/>
            </scalar_field>
          </chemical_variable>
          <chemical_variable name="NtoC"/>
          <chemical_variable name="C_fuel"/>
          <chemical_variable name="Nitrogen"/>
          <chemical_variable name="ChltoC"/>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">4000</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  from numpy import arange, concatenate, reshape, random
  # 4000 agents, evenly spaced in [0:200]m
  x = random.uniform(0.,1., 4000)
  y = random.uniform(0.,1., 4000)
  z = arange(-199.975,0.,0.05)
  positions = reshape(concatenate((x,y,z)),(3,4000)).T
  return positions</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from __builtin__ import str
from lebiology import stage_id

def val(agent):
  agent['Stage'] = stage_id('Diatom', 'Living')
  agent['Size'] = 50000.0
  agent['Ammonium'] = 2.2e-9
  agent['Carbon'] = 1.5e-8
  agent['Chlorophyll'] = 2.7e-9
  agent['Nitrate'] = 0.0
  agent['Silicate'] = 1.05E-9
  agent['AmmoniumUptake'] = 0.0
  agent['NitrateUptake'] = 0.0
  agent['SilicateUptake'] = 0.0
  agent['AmmoniumRelease'] = 0.0
  agent['SilicateRelease'] = 0.0
  return agent</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
          <random_walk name="RandomDisplacement">
            <python>
              <string_value lines="20" type="code" language="python">from __builtin__ import abs, str
from numpy import random

mld = abs(persistent['physics_mld'])

def val(position, vars, dt):
  z = abs(position[2])
  v = [0.0, 0.0, -0.000011111 * dt]
  v[0] = random.uniform(0.,1., 1)
  v[1] = random.uniform(0.,1., 1)
  if z &lt;= mld:
    rnd = random.uniform(0.,mld, 1)
    v[2] =  v[2] - (rnd - z)
  return v</string_value>
            </python>
          </random_walk>
        </movement>
        <environment>
          <field name="Irradiance"/>
          <field name="Temperature"/>
          <field name="DissolvedAmmonium"/>
          <field name="DissolvedNitrate"/>
          <field name="DissolvedSilicate"/>
        </environment>
        <stages>
          <stage name="Living">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">import fluidity.lerm_ps as lerm
params = lerm.species_Default_Diatom_Variety

def val(agent, env, dt):
  lerm.update_Living_Diatom(params, agent, env, dt)
  return agent</string_value>
              </python>
            </biology>
            <particle_management>
              <period_in_timesteps>
                <integer_value rank="0">1</integer_value>
              </period_in_timesteps>
              <minimum>
                <python>
                  <string_value lines="20" type="code" language="python">from __builtin__ import abs
mld = persistent['physics_mld']

def val(X):
  minimum = 20.0
  
  # Outside the prescribed "MLD" we merge down to 1
  if abs(X[2]) &gt; mld:
    minimum = 1.0
  return minimum</string_value>
                </python>
              </minimum>
              <maximum>
                <constant>
                  <real_value rank="0">40.0</real_value>
                  <comment>20.0</comment>
                </constant>
              </maximum>
            </particle_management>
            <io_period>
              <real_value rank="0">21600</real_value>
            </io_period>
          </stage>
          <stage name="Dead">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">import fluidity.lerm_ps as lerm
params = lerm.species_Default_Diatom_Variety

def val(biovars, env, dt):
  lerm.update_Dead_Diatom(params, biovars, env, dt)
  return biovars</string_value>
              </python>
            </biology>
            <particle_management>
              <period_in_timesteps>
                <integer_value rank="0">1</integer_value>
              </period_in_timesteps>
              <maximum>
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </maximum>
            </particle_management>
            <io_period>
              <real_value rank="0">21600</real_value>
            </io_period>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
      </functional_group>
    </lagrangian_ensemble_biology>
  </embedded_models>
</fluidity_options>
