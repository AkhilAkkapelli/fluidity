<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">prescribed_diffusivity</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">oceans</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">3</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="column">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
                <mesh_shape>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
                <mesh_shape>
                    <element_type>
                        <string_value>discontinuous lagrangian</string_value>
                    </element_type>
                </mesh_shape>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">5</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period>
            <constant>
                <real_value rank="0">1</real_value>
            </constant>
        </dump_period>
        <output_mesh name="VelocityMesh"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">1</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">1</real_value>
        </finish_time>
        <nonlinear_iterations>
            <integer_value rank="0">2</integer_value>
        </nonlinear_iterations>
    </timestepping>
    <physical_parameters></physical_parameters>
    <material_phase name="Water">
        <subgridscale_parameterisations>
            <prescribed_diffusivity>
                <tensor_field name="PrescribedDiffusivity" rank="2">
                    <prescribed>
                        <mesh name="VelocityMesh"></mesh>
                        <value name="WholeMesh">
                            <anisotropic_symmetric>
                                <python>
                                    <string_value lines="20" type="python">from math import cos, sin, pi&#x0A;global cos, sin, pi&#x0A;global depth&#x0A;depth=None&#x0A;&#x0A;def val(X,t):&#x0A;  global depth&#x0A;&#x0A;  # Depth of the thermocline (m)&#x0A;  if depth==None:&#x0A;    depth=-100-50*cos(t*2*pi/365.0)&#x0A;  &#x0A;  #Width of the thermocline interface (m)&#x0A;  width=20&#x0A;  &#x0A;  # Fixed horizontal diffusivity.&#x0A;  d=[[0.01,0.0,0.0],&#x0A;        [0.0,0.01,0.0],&#x0A;        [0.0,0.0, 0.0]]&#x0A;  &#x0A;  if (X[2]&amp;gt;depth+0.5*width):&#x0A;    # In the mixed layer&#x0A;    d[2][2]=1.0&#x0A;  elif(X[2]&amp;lt;depth-0.5*width):  &#x0A;    d[2][2]=0.01&#x0A;  else:&#x0A;    taper=0.5*(1-sin(pi*(X[2]-depth)/width))&#x0A;    &#x0A;    d[2][2]=(1-taper)*1.0 + taper*0.01&#x0A;  &#x0A;  return d</string_value>
                                </python>
                            </anisotropic_symmetric>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
            </prescribed_diffusivity>
        </subgridscale_parameterisations>
        <vector_field name="Velocity" rank="1">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <constant>
                        <real_value rank="1" shape="3" dim1="dim">0 0 0</real_value>
                    </constant>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
            </prescribed>
        </vector_field>
    </material_phase>
</fluidity_options>
