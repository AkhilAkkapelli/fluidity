<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">pchange_2d</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="src/square">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="LEBiologyMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DGMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat>
      <output_at_start/>
    </stat>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">3.0</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="Water">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
  </material_phase>
  <embedded_models>
    <lagrangian_ensemble_biology>
      <random_seed>
        <integer_value rank="0">123456</integer_value>
      </random_seed>
      <functional_group name="Agent">
        <variables>
          <state_variable name="Stage"/>
          <state_variable name="Size">
            <scalar_field name="Ensemble">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
          </state_variable>
          <chemical_variable name="Carbon">
            <scalar_field name="Particulate">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="LEBiologyMesh"/>
                <output/>
                <stat/>
                <do_not_recalculate/>
                <galerkin_projection>
                  <discontinuous/>
                </galerkin_projection>
              </diagnostic>
              <stage_diagnostic/>
            </scalar_field>
            <include_in_io/>
          </chemical_variable>
          <state_variable name="x">
            <include_in_motion/>
          </state_variable>
          <state_variable name="y">
            <include_in_motion/>
          </state_variable>
        </variables>
        <initial_state>
          <number_of_agents>
            <integer_value rank="0">100</integer_value>
          </number_of_agents>
          <position>
            <string_value lines="20" type="code" language="python">def val(t):
  import numpy as np
  x = np.reshape([np.arange(0.05, 1., 0.1) for i in range(10)], (1,100))
  y = np.reshape([np.ones(10)*i for i in np.arange(0.05, 1., 0.1)], (1,100))
  positions = np.reshape(np.concatenate((x,y)),(2,100)).T
  return positions</string_value>
          </position>
          <biology>
            <string_value lines="20" type="code" language="python">from lebiology import stage_id

def val(agent):
  agent['Stage'] = stage_id('Agent', 'Source')
  agent['Size'] = 10.0
  agent['Carbon'] = 1.e-3
  return agent</string_value>
          </biology>
        </initial_state>
        <movement>
          <subcycles>
            <integer_value rank="0">1</integer_value>
          </subcycles>
          <search_tolerance>
            <real_value rank="0">1.0e-10</real_value>
          </search_tolerance>
          <reflect_on_boundary/>
          <parametric_guided_search/>
          <random_walk name="GetCoords">
            <python>
              <string_value type="code" lines="20" language="python">def val ( position , agent , dt ):
  agent['x'] = position[0]
  agent['x'] = position[1]
  return (0., 0.)
</string_value>
            </python>
          </random_walk>
        </movement>
        <environment/>
        <stages>
          <stage name="Source">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">from __builtin__ import *
import math
import numpy
from lebiology import stage_id, add_agent

def val(agent, env, dt):
  pchange_ratio = []
  pchange_type = []
  
  # Perform pchanges
  pchange_type.append( stage_id('Agent', 'TargetA') )
  pchange_ratio.append( 0.3 )
  pchange_type.append( stage_id('Agent', 'TargetB') )
  pchange_ratio.append( 0.5 )

  if len(pchange_ratio) &gt; 0:
    pchange_total = sum([ 1. if pc &gt; 0. else 0. for pc in pchange_ratio])
    for i in range(len(pchange_ratio)):
      if pchange_ratio[i] &gt; 0.:
        new_agent = {}
        for k,v in agent.iteritems():
          new_agent[k] = v
        new_agent['Stage'] = pchange_type[i]
        new_agent['Size'] = agent['Size'] * (pchange_ratio[i] / pchange_total)
        agent['Size'] = agent['Size'] - new_agent['Size']
        add_agent('Agent', new_agent, [agent['x'],agent['y']])
        
  return agent</string_value>
              </python>
            </biology>
            <disable_io/>
          </stage>
          <stage name="TargetA">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(agent, env, dt):
  return agent</string_value>
              </python>
            </biology>
            <disable_io/>
          </stage>
          <stage name="TargetB">
            <biology>
              <python>
                <string_value lines="20" type="code" language="python">def val(agent, env, dt):
  return agent</string_value>
              </python>
            </biology>
            <disable_io/>
          </stage>
        </stages>
        <scalar_field name="Agents">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="LEBiologyMesh"/>
            <output/>
            <stat/>
            <do_not_recalculate/>
            <galerkin_projection>
              <discontinuous/>
            </galerkin_projection>
          </diagnostic>
        </scalar_field>
      </functional_group>
    </lagrangian_ensemble_biology>
  </embedded_models>
</fluidity_options>
