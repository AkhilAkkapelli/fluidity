<?xml version="1.0" encoding="utf-8" ?>
<fluidity_options>
    <simulation_name>
        <string_value lines="1">mphase_wen_yu_drag_correlation</string_value>
    </simulation_name>
    <problem_type>
        <string_value lines="1">multiphase</string_value>
    </problem_type>
    <geometry>
        <dimension>
            <integer_value rank="0">2</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="mphase_wen_yu_drag_correlation">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">3</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period>
            <constant>
                <real_value rank="0">0</real_value>
            </constant>
        </dump_period>
        <output_mesh name="VelocityMesh"></output_mesh>
        <stat></stat>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">0.001</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">5</real_value>
        </finish_time>
        <steady_state>
            <tolerance>
                <real_value rank="0">1e-07</real_value>
                <infinity_norm></infinity_norm>
            </tolerance>
            <steady_state_file>
                <binary_output></binary_output>
            </steady_state_file>
        </steady_state>
    </timestepping>
    <physical_parameters>
        <gravity>
            <magnitude>
                <real_value rank="0">9.8</real_value>
            </magnitude>
            <vector_field name="GravityDirection" rank="1">
                <prescribed>
                    <mesh name="CoordinateMesh"></mesh>
                    <value name="WholeMesh">
                        <constant>
                            <real_value rank="1" shape="2" dim1="dim">0 -1</real_value>
                        </constant>
                    </value>
                    <output></output>
                    <stat>
                        <include_in_stat></include_in_stat>
                    </stat>
                    <detectors>
                        <exclude_from_detectors></exclude_from_detectors>
                    </detectors>
                </prescribed>
            </vector_field>
        </gravity>
    </physical_parameters>
    <material_phase name="Water">
        <equation_of_state>
            <fluids>
                <linear>
                    <reference_density>
                        <real_value rank="0">1000</real_value>
                    </reference_density>
                </linear>
            </fluids>
        </equation_of_state>
        <scalar_field name="Pressure" rank="0">
            <aliased material_phase_name="Tephra" field_name="Pressure"></aliased>
        </scalar_field>
        <scalar_field name="Density" rank="0">
            <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="LinearMomentum"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <streamline_upwind>
                                <nu_bar_optimal></nu_bar_optimal>
                                <nu_scale name="0.5">
                                    <real_value rank="0" shape="1">0.5</real_value>
                                </nu_scale>
                            </streamline_upwind>
                        </stabilisation>
                        <mass_terms>
                            <lump_mass_matrix></lump_mass_matrix>
                        </mass_terms>
                        <advection_terms></advection_terms>
                        <stress_terms>
                            <tensor_form></tensor_form>
                        </stress_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">0.5</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-06</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <constant>
                        <real_value rank="1" shape="2" dim1="dim">0 0</real_value>
                    </constant>
                </initial_condition>
                <boundary_conditions name="Sides">
                    <surface_ids>
                        <integer_value rank="1" shape="1">666</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <boundary_conditions name="Bottom">
                    <surface_ids>
                        <integer_value rank="1" shape="1">444</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <boundary_conditions name="Top">
                    <surface_ids>
                        <integer_value rank="1" shape="1">333</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <tensor_field name="Viscosity" rank="2">
                    <prescribed>
                        <value name="WholeMesh">
                            <isotropic>
                                <constant>
                                    <real_value rank="0">0.001</real_value>
                                </constant>
                            </isotropic>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <previous_time_step>
                        <exclude_from_stat></exclude_from_stat>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat></exclude_from_stat>
                    </nonlinear_field>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </vector_field>
        <scalar_field name="PhaseVolumeFraction" rank="0">
            <diagnostic>
                <mesh name="VelocityMesh"></mesh>
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <output></output>
                <stat></stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <cap_values>
                    <upper_cap>
                        <real_value rank="0">1</real_value>
                    </upper_cap>
                    <lower_cap>
                        <real_value rank="0">0</real_value>
                    </lower_cap>
                </cap_values>
            </diagnostic>
        </scalar_field>
    </material_phase>
    <material_phase name="Tephra">
        <equation_of_state>
            <fluids>
                <linear>
                    <reference_density>
                        <real_value rank="0">2340</real_value>
                    </reference_density>
                </linear>
            </fluids>
        </equation_of_state>
        <scalar_field name="Pressure" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <remove_stabilisation_term></remove_stabilisation_term>
                        <integrate_continuity_by_parts></integrate_continuity_by_parts>
                    </continuous_galerkin>
                </spatial_discretisation>
                <reference_node>
                    <integer_value rank="0">1</integer_value>
                </reference_node>
                <scheme>
                    <poisson_pressure_solution>
                        <string_value lines="1">only first timestep</string_value>
                    </poisson_pressure_solution>
                    <use_projection_method></use_projection_method>
                </scheme>
                <solver>
                    <iterative_method name="cg"></iterative_method>
                    <preconditioner name="mg"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-06</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <steady_state>
                    <exclude_from_steady_state></exclude_from_steady_state>
                </steady_state>
                <no_interpolation></no_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="Density" rank="0">
            <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"></algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="LinearMomentum"></equation>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <stabilisation>
                            <streamline_upwind>
                                <nu_bar_optimal></nu_bar_optimal>
                                <nu_scale name="0.5">
                                    <real_value rank="0" shape="1">0.5</real_value>
                                </nu_scale>
                            </streamline_upwind>
                        </stabilisation>
                        <mass_terms>
                            <lump_mass_matrix></lump_mass_matrix>
                        </mass_terms>
                        <advection_terms></advection_terms>
                        <stress_terms>
                            <tensor_form></tensor_form>
                        </stress_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">0.5</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-06</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <constant>
                        <real_value rank="1" shape="2" dim1="dim">0 0</real_value>
                    </constant>
                </initial_condition>
                <boundary_conditions name="Sides">
                    <surface_ids>
                        <integer_value rank="1" shape="1">666</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <boundary_conditions name="Bottom">
                    <surface_ids>
                        <integer_value rank="1" shape="1">444</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <boundary_conditions name="Top">
                    <surface_ids>
                        <integer_value rank="1" shape="1">333</integer_value>
                    </surface_ids>
                    <type name="no_normal_flow"></type>
                </boundary_conditions>
                <tensor_field name="Viscosity" rank="2">
                    <prescribed>
                        <value name="WholeMesh">
                            <isotropic>
                                <constant>
                                    <real_value rank="0">0.001</real_value>
                                </constant>
                            </isotropic>
                        </value>
                        <output></output>
                    </prescribed>
                </tensor_field>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <previous_time_step>
                        <exclude_from_stat></exclude_from_stat>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat></exclude_from_stat>
                    </nonlinear_field>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </vector_field>
        <scalar_field name="PhaseVolumeFraction" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="AdvectionDiffusion"></equation>
                <spatial_discretisation>
                    <control_volumes>
                        <face_value name="FirstOrderUpwind"></face_value>
                        <diffusion_scheme name="ElementGradient"></diffusion_scheme>
                    </control_volumes>
                    <conservative_advection>
                        <real_value rank="0">1</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">1</real_value>
                    </theta>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="gmres">
                        <restart>
                            <integer_value rank="0">30</integer_value>
                        </restart>
                    </iterative_method>
                    <preconditioner name="sor"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <constant>
                        <real_value rank="0">0.05</real_value>
                    </constant>
                </initial_condition>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="ParticleReynoldsNumber" rank="0">
            <diagnostic>
                <algorithm name="particle_reynolds_number" material_phase_support="multiple">
                    <depends>
                        <string_value lines="1">Water::Velocity,Tephra::Velocity,Water::Density</string_value>
                    </depends>
                    <particle_diameter>
                        <real_value rank="0">0.001</real_value>
                    </particle_diameter>
                    <continuous_phase_name>Water</continuous_phase_name>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <scalar_field name="DragCoefficient" rank="0">
            <diagnostic>
                <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
                    <string_value type="code" lines="20" language="python">from math import sqrt, pi&#x0A;vfrac_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;vfrac_water = states[&quot;Water&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;&#x0A;velocity_tephra = states[&quot;Tephra&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;velocity_water = states[&quot;Water&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;&#x0A;density_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;Density&quot;]&#x0A;density_water = states[&quot;Water&quot;].scalar_fields[&quot;Density&quot;]&#x0A;&#x0A;viscosity_water = states[&quot;Water&quot;].tensor_fields[&quot;Viscosity&quot;]&#x0A;&#x0A;# Particle diameter&#x0A;d = 1e-3&#x0A;&#x0A;for i in range(field.node_count):&#x0A;  # Reynolds number&#x0A;  Re = (vfrac_water.node_val(i)*density_water.node_val(i)*sqrt((velocity_water.node_val(i)[0] - velocity_tephra.node_val(i)[0])**2 + (velocity_water.node_val(i)[1] - velocity_tephra.node_val(i)[1])**2)*d)/viscosity_water.node_val(0)[0][0]&#x0A;  &#x0A;  # Drag coefficient&#x0A;  if(Re &lt; 1000):&#x0A;    C = (24.0/Re)*(1.0 + 0.15*Re**0.687)&#x0A;  else:&#x0A;    C = 0.44&#x0A;    &#x0A;  # Don&apos;t let C be NaN&#x0A;  if(Re == 0):&#x0A;    C = 1e16&#x0A;&#x0A;  field.set(i, C)</string_value>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </scalar_field>
        <vector_field name="DragForce" rank="1">
            <diagnostic>
                <algorithm name="vector_python_diagnostic" material_phase_support="multiple">
                    <string_value lines="20" type="code" language="python">## Calculates the fluid-particle drag force interaction term&#x0A;from math import sqrt, pi&#x0A;&#x0A;vfrac_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;vfrac_water = states[&quot;Water&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;&#x0A;velocity_tephra = states[&quot;Tephra&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;velocity_water = states[&quot;Water&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;&#x0A;density_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;Density&quot;]&#x0A;density_water = states[&quot;Water&quot;].scalar_fields[&quot;Density&quot;]&#x0A;&#x0A;viscosity_water = states[&quot;Water&quot;].tensor_fields[&quot;Viscosity&quot;]&#x0A;&#x0A;# Particle diameter&#x0A;d = 1e-3&#x0A;&#x0A;for i in range(field.node_count):&#x0A;&#x0A;  # Reynolds number&#x0A;  Re = (vfrac_water.node_val(i)*density_water.node_val(i)*sqrt((velocity_water.node_val(i)[0] - velocity_tephra.node_val(i)[0])**2 + (velocity_water.node_val(i)[1] - velocity_tephra.node_val(i)[1])**2)*d)/viscosity_water.node_val(0)[0][0]&#x0A;  &#x0A;  # Drag coefficient&#x0A;  if(Re &lt; 1000):&#x0A;    C = (24.0/Re)*(1.0 + 0.15*Re**0.687)&#x0A;  else:&#x0A;    C = 0.44&#x0A;    &#x0A;  # Don&apos;t let C be NaN&#x0A;  if(Re == 0):&#x0A;    C = 1e16&#x0A;&#x0A;  magnitude = sqrt((velocity_water.node_val(i)[0] - velocity_tephra.node_val(i)[0])**2 + (velocity_water.node_val(i)[1] - velocity_tephra.node_val(i)[1])**2)&#x0A;  &#x0A;  K = (3.0/4.0)*C*(vfrac_tephra.node_val(i)*vfrac_water.node_val(i)*density_water.node_val(i)*magnitude)/(d*vfrac_water.node_val(i)**2.7)&#x0A;&#x0A;  Force = K*(velocity_tephra.node_val(i) - velocity_water.node_val(i))&#x0A;&#x0A;  field.set(i, -Force)</string_value>
                    <depends>
                        <string_value lines="1">Tephra::PhaseVolumeFraction,Tephra::Density,Tephra::Velocity,Water::PhaseVolumeFraction,Water::Density,Water::Velocity</string_value>
                    </depends>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </vector_field>
        <vector_field name="BuoyancyForce" rank="1">
            <diagnostic>
                <algorithm name="vector_python_diagnostic" material_phase_support="multiple">
                    <string_value lines="20" type="code" language="python">## Calculates the fluid-particle drag force interaction term&#x0A;from math import sqrt, pi&#x0A;&#x0A;vfrac_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;vfrac_water = states[&quot;Water&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;&#x0A;velocity_tephra = states[&quot;Tephra&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;velocity_water = states[&quot;Water&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;&#x0A;density_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;Density&quot;]&#x0A;density_water = states[&quot;Water&quot;].scalar_fields[&quot;Density&quot;]&#x0A;&#x0A;viscosity_water = states[&quot;Water&quot;].tensor_fields[&quot;Viscosity&quot;]&#x0A;&#x0A;# Particle diameter&#x0A;d = 1e-3&#x0A;&#x0A;for i in range(field.node_count):&#x0A;  &#x0A;  Force = vfrac_water.node_val(i)*9.8*vfrac_tephra.node_val(i)*(density_tephra.node_val(i) - density_water.node_val(i))&#x0A;&#x0A;  field.set(i, [0.0, -Force])</string_value>
                    <depends>
                        <string_value lines="1">Water::Velocity,Tephra::Velocity,Water::PhaseVolumeFraction,Tephra::PhaseVolumeFraction,Water::Density,Tephra::Density</string_value>
                    </depends>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </vector_field>
        <vector_field name="TerminalVelocityWenYu" rank="1">
            <diagnostic>
                <algorithm name="vector_python_diagnostic" material_phase_support="multiple">
                    <string_value lines="20" type="code" language="python">## Calculates the fluid-particle drag force interaction term&#x0A;from math import sqrt, pi&#x0A;&#x0A;vfrac_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;vfrac_water = states[&quot;Water&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;&#x0A;velocity_tephra = states[&quot;Tephra&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;velocity_water = states[&quot;Water&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;&#x0A;density_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;Density&quot;]&#x0A;density_water = states[&quot;Water&quot;].scalar_fields[&quot;Density&quot;]&#x0A;&#x0A;viscosity_water = states[&quot;Water&quot;].tensor_fields[&quot;Viscosity&quot;]&#x0A;&#x0A;# Particle diameter&#x0A;d = 1e-3&#x0A;&#x0A;for i in range(field.node_count):&#x0A;&#x0A;  # Reynolds number&#x0A;  Re = (vfrac_water.node_val(i)*density_water.node_val(i)*sqrt((velocity_water.node_val(i)[0] - velocity_tephra.node_val(i)[0])**2 + (velocity_water.node_val(i)[1] - velocity_tephra.node_val(i)[1])**2)*d)/viscosity_water.node_val(0)[0][0]&#x0A;  &#x0A;  # Drag coefficient&#x0A;  if(Re &lt; 1000):&#x0A;    C = (24.0/Re)*(1.0 + 0.15*Re**0.687)&#x0A;  else:&#x0A;    C = 0.44&#x0A;    &#x0A;  # Don&apos;t let C be NaN&#x0A;  if(Re == 0):&#x0A;    C = 1e16&#x0A;&#x0A;  magnitude = sqrt((velocity_water.node_val(i)[0] - velocity_tephra.node_val(i)[0])**2 + (velocity_water.node_val(i)[1] - velocity_tephra.node_val(i)[1])**2)&#x0A;  &#x0A;  K = (3.0/4.0)*C*(vfrac_tephra.node_val(i)*vfrac_water.node_val(i)*density_water.node_val(i)*magnitude)/(d*vfrac_water.node_val(i)**2.7)&#x0A;    &#x0A;  Drag = K&#x0A;  BuoyancyForce = vfrac_water.node_val(i)*9.8*vfrac_tephra.node_val(i)*(density_tephra.node_val(i) - density_water.node_val(i))&#x0A;  &#x0A;  field.set(i, [0.0, -BuoyancyForce/Drag])</string_value>
                    <depends>
                        <string_value lines="1">Water::Velocity,Tephra::Velocity,Water::PhaseVolumeFraction,Tephra::PhaseVolumeFraction,Water::Density,Tephra::Density</string_value>
                    </depends>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </vector_field>
        <vector_field name="TerminalVelocityStokes" rank="1">
            <diagnostic>
                <algorithm name="vector_python_diagnostic" material_phase_support="multiple">
                    <string_value lines="20" type="code" language="python">## Calculates the fluid-particle drag force interaction term&#x0A;from math import sqrt, pi&#x0A;&#x0A;vfrac_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;vfrac_water = states[&quot;Water&quot;].scalar_fields[&quot;PhaseVolumeFraction&quot;]&#x0A;&#x0A;velocity_tephra = states[&quot;Tephra&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;velocity_water = states[&quot;Water&quot;].vector_fields[&quot;Velocity&quot;]&#x0A;&#x0A;density_tephra = states[&quot;Tephra&quot;].scalar_fields[&quot;Density&quot;]&#x0A;density_water = states[&quot;Water&quot;].scalar_fields[&quot;Density&quot;]&#x0A;&#x0A;viscosity_water = states[&quot;Water&quot;].tensor_fields[&quot;Viscosity&quot;]&#x0A;&#x0A;# Particle diameter&#x0A;d = 1e-3&#x0A;&#x0A;for i in range(field.node_count):&#x0A;  relative_terminal_velocity = vfrac_water.node_val(i)*9.8*(density_tephra.node_val(i) - density_water.node_val(i))*d*d/(18.0*viscosity_water.node_val(0)[0][0])&#x0A;  &#x0A;  field.set(i, [0.0, -relative_terminal_velocity])</string_value>
                    <depends>
                        <string_value lines="1">Water::Velocity,Tephra::Velocity,Water::PhaseVolumeFraction,Tephra::PhaseVolumeFraction,Water::Density,Tephra::Density</string_value>
                    </depends>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
            </diagnostic>
        </vector_field>
        <multiphase_properties>
            <particle_diameter>
                <real_value rank="0">0.001</real_value>
            </particle_diameter>
        </multiphase_properties>
    </material_phase>
    <multiphase_interaction>
        <fluid_particle_drag>
            <drag_correlation name="wen_yu"></drag_correlation>
        </fluid_particle_drag>
    </multiphase_interaction>
</fluidity_options>
