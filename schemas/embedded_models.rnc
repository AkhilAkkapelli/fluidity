# The embedded models

embedded_models = 
   (
      ## Fluidity embedded models
      element embedded_models {
         comment, 

         hyperlight?,

         lagrangian_biology?
      }
   )

lagrangian_biology = 
   (
      ## Lagrangian particle biology from the VEW project.
      element lagrangian_ensemble_biology {
         ## Placeholder for future Plankton Functional Type (PFT) definitions
         element functional_group {
            ## Arrays of lagrangian detectors with an additional Random Walk displacement scheme to simulate turbulent displacement.
            ## In the future, these agents will carry biology information for Lagrangian Ensemble biology algorithms.
            element agent_array {
               comment,
               attribute name { xsd:string },
               ## The initial number of detectors held in this array.
               element number_of_agents {
                  integer
               },                     
               ## Create detectors which move with the fluid velocity.
               element lagrangian {
                  empty
               },
               ## Enable to write detector output in binary format
               element binary_output {
                  empty
               },
               ## Python function prescribing dimensional vector input. Functions should be of the form:
               ##
               ##  def val(t):
               ##     # Function code
               ##     return # Return value
               ##
               ## The return value must have length number_of_detectors.
               ##
               ## *** IMPORTANT NOTE ***
               ##
               ## The t argument is for future use only - currently detector locations are only set at simulation start.
               element initial_position {
                  python_code
               },
               ## Additional particle advection to simulate turbulent displacement. 
               element random_walk {
                  (
                     ## Python function prescribing additional agent displacement due to turbulence. 
                     ## The return value will be added to the lagrangian advection at each sub-timestep. 
                     ## Fields should be pulled from 'state' before the val(ele, local_coord) function is evaluated.
                     ## Functions should be of the form:
                     ## 
                     ##  field = state.scalar_fields['Field_name']
                     ##
                     ##  def val(ele, local_coord):
                     ##     # x = field.eval_field(ele, local_coord)
                     ##     return # Return some f(x)
                     element python{
                        python_code
                     }|
                     ## Hardcoded Random Walk scheme for non-homogeneous diffusivity fields.
                     ## Described in Visser, 1997 and Ross and Sharples, 2004.
                     ## Requires name of diffusivity field and according gradient field.
                     element diffusive_random_walk {
                        attribute diffusivity_field { xsd:string },
                        attribute diffusivity_gradient { xsd:string }
                     }
                  )
               }?,
               ## Debug options
               element debug {
                  ## Skip velocity advection algorithm (RK-GS)
                  element exclude_from_advection {
                     empty
                  }?
               }?
            }*, 
            lagrangian_timestepping
         }?,
         element random_seed{
            integer
         }
      }
   )

hyperlight = 
   (
      ## Hyperlight solar irradiance model, which 
      ## computes a fast approximation to the Radiative Transfer Equation.
      ## NOTE: This module requires fluidity to be compiled with the 
      ## --enable-hyperlight flag.
      element hyperlight {
         ## Hydrolight always computes the scalar irradiance 
         ## for 36 regular wavebands of width 10nm in PAR. 
         ## Particular wavebands or total PAR irradiance need 
         ## to be derived from these fixed bands.
         element scalar_field {
            attribute rank { "0" },
            attribute name { "IrradianceTemplate" },
            element prescribed {
               velocity_mesh_choice,
               prescribed_scalar_field
            }
         },
         element scalar_field {
            attribute rank { "0" },
            attribute name { "IrradiancePAR" },
            element diagnostic {
               velocity_mesh_choice,
               scalar_python_diagnostic_algorithm,
               diagnostic_scalar_field_no_adapt
            }
         }?,
         ## F, the ratio for correlated CDOM
         element CDOM {
            real
         },
         ## BF_chl, the backscatter fraction for chlorophyll-bearing particles
         element BF_chl {
            real
         },
         ## Parameter for GC sky irradiance model - 
         ## if provided this overwrites the values from the forcing routines.
         element CloudCover {
            real
         }?,
         ## Parameter for GC sky irradiance model - 
         ## if provided this overwrites the values from the forcing routines.
         element WindSpeed {
            real
         }?,
         ## Optional performance parameter that determines the percentage of 
         ## surface irradiance at which the model stops computing.
         ## Default is 0.01 = 1% (standard definition of euphotic depth)
         element EuphoticRatio {
            real
         }?
      }
   )

