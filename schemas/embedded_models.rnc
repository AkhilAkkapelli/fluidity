# The embedded models

embedded_models = 
   (
      ## Fluidity embedded models
      element embedded_models {
         ## Under Development
         ##
         ## Fluid-Solid Interaction Modelling via
         ## Immersed Solids
         element fsi_model {
            ## Solid Geometry
            element geometry
            {
               fsi_model_input_mesh+
            },
            ## The projection between solid and fluid mesh. It is
            ## recommended to use a Galerkin projection via supermeshing,
            ## which should be bounded.
            (
               fsi_model_projection
            ),
            ## Beta is a scaling factor to improve the 
            ## relaxation of the fluid within a solid body. 
            ## Useful for thin structures, e.g. turbine blades.
            element beta {real}?,
            ## Specify what is added to .stat files
            element stat {
               ## Exclude all FSI modelling output fields?
               element exclude_in_stat { empty }?,
               ## Output force computed on supermesh?
               ##
               ## Careful, switching this option on will slow down the
               ## simulation, and hence should only be switched on for
               ## checking if the force on the supermesh equals the
               ## force computed on the fluid mesh.
               element force_on_supermesh_stat { empty }?
            },
            fsi_solid_phases
         }?
      }
   )

fsi_solid_phases =
(  ## In the solid phase the fields on each solid are set.
   element solid_phase
   {
      attribute name { xsd:string },
      ## The SolidConcentration is by definition 1 on 
      ## the solid mesh. This is required since this field
      ## is projected to the fluid mesh to obtain the
      ## solid volume fraction on it.
      element scalar_field {
          attribute rank { "0" },
          attribute name { "SolidConcentration" },
          (
             element diagnostic {
                internal_algorithm,
                fsi_model_mesh_choice,
                diagnostic_scalar_field
             }
          )
       },
      ## Solid velocity of this solid phase. Can either be prescribed,
      ## or set to zero. Also, in some cases setting the travelled 
      ## distance within the time of a timestep dt might be easier,
      ## thus the user has the option to set the prescribed velocity 
      ## or to compute the travelled distance, whereas the corresponding
      ## velocity is then computed internally.
      element vector_field {
         attribute rank { "1" },
         attribute name { "SolidVelocity" },
         ## Field type
         (
            fsi_model_solid_velocity_mesh
         )
      }?,
      ## Solid Force of this solid phase. Can only be diagnostic,
      ## and is computed internally.
      element vector_field {
         attribute rank { "1" },
         attribute name { "SolidForce" },
         ## Field type
         (
            fsi_model_solid_force_mesh
         )
      }?
   }+
)

fsi_model_mesh_choice = 
(  ## Specify the mesh on which the field lives on. 
   ## If 'SolidCoordinateMesh' is set, the corresponding
   ## coordinate mesh for this solid phase is chosen.
   element mesh {
         attribute name { "SolidCoordinateMesh" }
   }|
   fsi_model_mesh
)

fsi_model_mesh = 
   ## Specify the solid mesh
   element mesh {
      attribute name { xsd:string }
   }

fsi_model_input_mesh = 
   ## Specify the solid mesh
   element mesh {
      attribute name { xsd:string },
      mesh_info
   }

fsi_model_projection =
    ## Specify the method to be use for projections
    ## of fields between fluid and solid mesh
    ## Currently only the Galerkin Projection via 
    ## supermeshing is supported.
    element inter_mesh_projection
    {
        ## Construction of a supermesh for the part of 
        ## the fluid mesh which is occupied by the solid mesh.
        ## The SolidConcentration is then obtained by projecting
        ## unity from the supermesh, to the fluid mesh.
        element galerkin_projection{
           continuous_discontinuous_projection,
           supermesh_conservation?
        }|
        element grandy_interpolation{empty}
    }


fsi_model_input_real_dim_vector_python =
    ## Python function prescribing dimensional vector input. Functions should be of the form:
    ##
    ##  def val(X, t):
    ##     # Function code
    ##     return # Return value
    ##
    ## where X and the return value are tuples of length geometry dimension
    ## and t is either the current time or the timestep, depending on what is set
    ## in the option 'time_variable_python_interface'.
    element python
    {
      python_code
    }


fsi_model_solid_velocity_mesh =
(
       element diagnostic {
       internal_algorithm,
       fsi_model_mesh_choice,
       ##prescribed_output_options,
       ##prescribed_vector_stat_options,
       ##prescribed_detector_options,
       diagnostic_vector_field
    }|
    element prescribed {
       (
          ## Prescribed diagnostic Velocity vector for a solid.
          ## 
          ## Use this if want a solid body to move with a 
          ## prescribed velocity.
          ##
          ## The return vector of the python function is
          ## supposed to be the solid velocity based on the
          ## current time t (or timestep dt) of the simulation.
          element python_velocity {
             time_variable_python_interface,
             fsi_model_input_real_dim_vector_python
          }|
          ## Prescribed diagnostic Solid movement vector.
          ## 
          ## Here the travelled distance of a solid object is
          ## computed, rather than the solid velocity. In some
          ## cases this might be more convenient. The velocity
          ## and new coordinates are then computed internally
          ## based on the given 'movement'.
          ##
          ## The return vector of the python function is
          ## supposed to contain the distance a node of a 
          ## rigid body travels within the time interval dt.
          ##
          ## The option time_variable_in_python determines
          ## whether the current time 't' or the current
          ## timestep 'dt' are passed to the python function.
          element python_movement {
             time_variable_python_interface,
             fsi_model_input_real_dim_vector_python
          }
       ),
       fsi_model_mesh_choice,
       diagnostic_vector_field
       # prescribed_output_options,
       # prescribed_vector_stat_options,
       # prescribed_detector_options
    }
)
    
fsi_model_solid_force_mesh =
(
   element diagnostic
   {
      internal_algorithm,
      fsi_model_mesh_choice,
      ##prescribed_output_options,
      ##prescribed_vector_stat_options,
      ##prescribed_detector_options,
      diagnostic_vector_field
   }
)



#fsi_model_prescribed_solid_velocity_mesh =
#    ## Prescribed Solid velocity via Python input
#    element prescribed {
#        ## Set the name of the Solid Mesh that
#        ## has a prescribed velocity
#        element mesh {
#            attribute name { xsd:string },
#            (
#              time_variable_python_interface,
#              fsi_model_input_real_dim_vector_python,
#              prescribed_output_options,
#              prescribed_vector_stat_options,
#              prescribed_detector_options
#            )
#        }+
#    }

#fsi_model_diagnostic_solid_velocity_mesh =
#    ## For future use maybe
#    element diagnostic
#    {
#        ## Set the name of the Solid Mesh that
#        ## has a prescribed velocity
#        element mesh {
#            attribute name { xsd:string },
#            (
#               vector_python_diagnostic_algorithm,
#               diagnostic_vector_field
#            )
#        }+
#    }

#fsi_model_prescribed_solid_movement_mesh =
#    ## Prescribed Solid movement via Python input
#    element prescribed {
#        ## Set the name of the Solid Mesh which
#        ## travelled distance is prescribed in the python function
#        element mesh {
#            attribute name { xsd:string },
#            (
#              time_variable_python_interface,
#              fsi_model_input_real_dim_vector_python,
#              prescribed_output_options,
#              prescribed_vector_stat_options,
#              prescribed_detector_options
#            )
#        }+
#    }

#fsi_model_diagnostic_solid_movement_mesh =
#    ## For future use maybe
#    element diagnostic
#    {
#        ## Set the name of the Solid Mesh which
#        ## travelled distance is prescribed in the python function
#        element mesh {
#            attribute name { xsd:string },
#            (
#               vector_python_diagnostic_algorithm,
#               diagnostic_vector_field
#            )
#        }+
#    }

time_variable_python_interface =
    ## Determines which time variable is available in the 
    ## Python interface: The current time (default) or 
    ## the current timestep.
    element time_variable_in_python
    {
        ## Passes the current simulation time to the python 
        ## interface below.
        element current_time {empty}
        |
        ## Passes the current timestep to the python 
        ## interface below.
        element current_timestep {empty}
    }
