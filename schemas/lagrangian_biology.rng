<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <define name="lagrangian_biology">
    <element name="lagrangian_ensemble_biology">
      <a:documentation>Lagrangian particle biology from the VEW project.</a:documentation>
      <ref name="mesh_choice"/>
      <element name="random_seed">
        <a:documentation>Seed used for the random number generator. </a:documentation>
        <ref name="integer"/>
      </element>
      <zeroOrMore>
        <element name="functional_group">
          <a:documentation>A Functional Group (FG) is an abstraction to define the characteristic behaviour of one or more species of plankton agents. 
The Functional Group defines the internal variables an agent will store and the environment fields an agent needs to sample. 
The concrete behaviour of an agent, however, is defined by the stage the agent is in. Stage changes are only permitted within Functional Groups. </a:documentation>
          <attribute name="name">
            <data type="string"/>
          </attribute>
          <element name="variables">
            <a:documentation>The variables of an agent define its individual internal state. 
Several types of variables are available: 
state_variable defines an arbitrary internal property; 
chemical_variable defines an internal pool of chemicals that can be exchanged with the environment. </a:documentation>
            <element name="state_variable">
              <a:documentation>An agent's stage determines the update function to apply at each timestep.</a:documentation>
              <attribute name="name">
                <value>Stage</value>
              </attribute>
            </element>
            <element name="state_variable">
              <a:documentation>Dynamic size of the ensemble the agent represents. 
All internal quantities that are exchanged with the environment get scaled by this factor.</a:documentation>
              <attribute name="name">
                <value>Size</value>
              </attribute>
              <element name="scalar_field">
                <a:documentation>Biology agent field</a:documentation>
                <attribute name="name">
                  <value>Ensemble</value>
                </attribute>
                <element name="diagnostic">
                  <ref name="internal_algorithm"/>
                  <ref name="diagnostic_scalar_field_no_adapt"/>
                </element>
                <optional>
                  <element name="stage_aggregate">
                    <a:documentation>Add diagnostic field that represents the total quantity across all stages of the FG.</a:documentation>
                    <empty/>
                  </element>
                </optional>
              </element>
            </element>
            <zeroOrMore>
              <choice>
                <element name="state_variable">
                  <a:documentation>Internal state variable of a biology agent that defines an arbitrary internal property.</a:documentation>
                  <attribute name="name">
                    <data type="string"/>
                  </attribute>
                  <optional>
                    <!-- Agent diagnostic field -->
                    <element name="scalar_field">
                      <attribute name="name">
                        <data type="string"/>
                      </attribute>
                      <element name="diagnostic">
                        <ref name="internal_algorithm"/>
                        <ref name="diagnostic_scalar_field_no_adapt"/>
                      </element>
                      <optional>
                        <element name="stage_aggregate">
                          <a:documentation>Add diagnostic field that represents the total quantity across all stages of the FG.</a:documentation>
                          <empty/>
                        </element>
                      </optional>
                    </element>
                  </optional>
                </element>
                <element name="chemical_variable">
                  <a:documentation>State variable representing the internal chemical pool of an agent. 
Chemicals can be exchanged with the environment via the 'release' and 'uptake' options. 
This requires a dissolved chemical field from the main material_phase to be bound to this agent variable. 
The associated source and absorption fields will then get set from the accumulated particulate quantities.</a:documentation>
                  <attribute name="name">
                    <data type="string"/>
                  </attribute>
                  <optional>
                    <element name="scalar_field">
                      <a:documentation>Eulerian diagnostic field representing the particulate amount of this chemical. 
This field must be on a discontinuous mesh</a:documentation>
                      <attribute name="name">
                        <value>Particulate</value>
                      </attribute>
                      <element name="diagnostic">
                        <ref name="internal_algorithm"/>
                        <ref name="diagnostic_scalar_field_no_adapt"/>
                      </element>
                      <optional>
                        <element name="stage_aggregate">
                          <a:documentation>Add diagnostic field that represents the total quantity across all stages of the FG.</a:documentation>
                          <empty/>
                        </element>
                      </optional>
                    </element>
                  </optional>
                  <optional>
                    <element name="chemical_field">
                      <a:documentation>Name of the field representing the dissolved chemical in the environment.
This option is required if 'uptake' or 'release' are specified.</a:documentation>
                      <attribute name="name">
                        <data type="string"/>
                      </attribute>
                    </element>
                  </optional>
                  <optional>
                    <element name="uptake">
                      <a:documentation>Option to define chemical uptake from the environment. 
This will create internal fields to represent the accumulated requested quantity 
and the depletion factor, which scales the amount actually ingested by the agent 
according to availability in the environment. 
The scaled request quantity will then get added to the according absorption field of the dissolved chemical.</a:documentation>
                      <element name="scalar_field">
                        <a:documentation>Request field on a discontinuous mesh mesh</a:documentation>
                        <attribute name="name">
                          <value>Request</value>
                        </attribute>
                        <element name="diagnostic">
                          <ref name="internal_algorithm"/>
                          <ref name="diagnostic_scalar_field_no_adapt"/>
                        </element>
                        <optional>
                          <element name="stage_aggregate">
                            <a:documentation>Add diagnostic field that represents the total quantity across all stages of the FG.</a:documentation>
                            <empty/>
                          </element>
                        </optional>
                      </element>
                      <element name="scalar_field">
                        <a:documentation>Depletion factor</a:documentation>
                        <attribute name="name">
                          <value>Depletion</value>
                        </attribute>
                        <element name="diagnostic">
                          <ref name="internal_algorithm"/>
                          <ref name="diagnostic_scalar_field_no_adapt"/>
                        </element>
                      </element>
                    </element>
                  </optional>
                  <optional>
                    <element name="release">
                      <a:documentation>Option to define chemical release into the environment. 
This will create internal fields to represent the accumulated release quantity.
The scaled release quantity will then get added to the according source field of the dissolved chemical.</a:documentation>
                      <element name="scalar_field">
                        <a:documentation>Release field on a discontinuous mesh mesh</a:documentation>
                        <attribute name="name">
                          <value>Release</value>
                        </attribute>
                        <element name="diagnostic">
                          <ref name="internal_algorithm"/>
                          <ref name="diagnostic_scalar_field_no_adapt"/>
                        </element>
                        <optional>
                          <element name="stage_aggregate">
                            <a:documentation>Add diagnostic field that represents the total quantity across all stages of the FG.</a:documentation>
                            <empty/>
                          </element>
                        </optional>
                      </element>
                    </element>
                  </optional>
                </element>
              </choice>
            </zeroOrMore>
          </element>
          <element name="environment">
            <a:documentation>This option holds a list of fields that define the ambient environment for agents of this Functional Group. 
The local values of fields listed here will be presented in a dictionary 'environment' to the agent update function.</a:documentation>
            <zeroOrMore>
              <element name="field">
                <a:documentation>Environment field whose ambient value will be presented to the update code in the 'environment' dictionary.</a:documentation>
                <attribute name="name">
                  <data type="string"/>
                </attribute>
              </element>
            </zeroOrMore>
          </element>
          <element name="stages">
            <a:documentation/>
            <zeroOrMore>
              <element name="stage">
                <a:documentation>Detectors with their locations specified via a python function or from a file. Allows detector arrays to be added.</a:documentation>
                <ref name="comment"/>
                <attribute name="name">
                  <data type="string"/>
                </attribute>
                <element name="id">
                  <a:documentation>Stage identifier</a:documentation>
                  <ref name="real"/>
                </element>
                <element name="number_of_agents">
                  <a:documentation>The number of detectors prescribed by the python function.</a:documentation>
                  <ref name="integer"/>
                </element>
                <element name="initial_position">
                  <a:documentation>Python function prescribing dimensional vector input. Functions should be of the form:

 def val(t):
    # Function code
    return # Return value

The return value must have length number_of_detectors.

*** IMPORTANT NOTE ***

The t argument is for future use only - currently detector locations are only set at simulation start.</a:documentation>
                  <ref name="python_code"/>
                </element>
                <element name="initial_state">
                  <a:documentation>Python function to set the initial state of the agent. 
A dictionary mapping variable name to value gets passed to the function, where the stage ID is already set,
which needs to be returned with the appropriate initial variable values, eg.:

 def val(vars):
     vars['VarName'] = 1.0
     return vars</a:documentation>
                  <ref name="python_code"/>
                </element>
                <optional>
                  <element name="random_walk">
                    <a:documentation/>
                    <choice>
                      <element name="python">
                        <a:documentation>Python function prescribing additional agent displacement due to turbulence. 
The return value will be added to the lagrangian advection at each sub-timestep. 
Fields should be pulled from 'state' before the val(ele, local_coord) function is evaluated.
Functions should be of the form:

 field = state.scalar_fields['Field_name']

 def val(ele, local_coord):
    # x = field.eval_field(ele, local_coord)
    return # Return some f(x)</a:documentation>
                        <ref name="python_code"/>
                      </element>
                      <element name="diffusive_random_walk">
                        <a:documentation>Hardcoded Random Walk scheme for non-homogeneous diffusivity fields.
Described in Visser, 1997 and Ross and Sharples, 2004.
Requires name of diffusivity field and according gradient field.</a:documentation>
                        <attribute name="diffusivity_field">
                          <data type="string"/>
                        </attribute>
                        <attribute name="diffusivity_gradient">
                          <data type="string"/>
                        </attribute>
                        <optional>
                          <element name="auto_subcycle">
                            <attribute name="diffusivity_2nd_gradient">
                              <data type="string"/>
                            </attribute>
                            <element name="scale_factor">
                              <ref name="real"/>
                            </element>
                          </element>
                        </optional>
                      </element>
                      <element name="naive_random_walk">
                        <a:documentation>Hardcoded Naive Random Walk scheme for verifying the RNG</a:documentation>
                        <attribute name="diffusivity_field">
                          <data type="string"/>
                        </attribute>
                      </element>
                    </choice>
                  </element>
                </optional>
                <choice>
                  <element name="biology_update">
                    <a:documentation>Python code specifying the biology model for this type of agent.</a:documentation>
                    <ref name="python_code"/>
                  </element>
                  <element name="disable_biology">
                    <a:documentation>Do not calculate biology
This option is generally only useful for testing. </a:documentation>
                    <empty/>
                  </element>
                </choice>
                <optional>
                  <element name="particle_management">
                    <a:documentation>Particle Management rules</a:documentation>
                    <element name="period_in_timesteps">
                      <ref name="integer"/>
                    </element>
                    <element name="minimum">
                      <ref name="real"/>
                    </element>
                    <element name="maximum">
                      <ref name="real"/>
                    </element>
                  </element>
                </optional>
                <optional>
                  <element name="debug">
                    <a:documentation>Debug options</a:documentation>
                    <optional>
                      <element name="exclude_from_advection">
                        <a:documentation>Skip velocity advection algorithm (RK-GS)</a:documentation>
                        <empty/>
                      </element>
                    </optional>
                  </element>
                </optional>
              </element>
            </zeroOrMore>
          </element>
          <element name="scalar_field">
            <a:documentation>Number of agents</a:documentation>
            <attribute name="name">
              <value>Agents</value>
            </attribute>
            <element name="diagnostic">
              <ref name="internal_algorithm"/>
              <ref name="diagnostic_scalar_field_no_adapt"/>
            </element>
          </element>
          <ref name="lagrangian_timestepping"/>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <define name="hyperlight">
    <element name="hyperlight">
      <a:documentation>Hyperlight solar irradiance model, which 
computes a fast approximation to the Radiative Transfer Equation.
NOTE: This module requires fluidity to be compiled with the 
--enable-hyperlight flag.</a:documentation>
      <element name="scalar_field">
        <a:documentation>Hydrolight always computes the scalar irradiance 
for 36 regular wavebands of width 10nm in PAR. 
Particular wavebands or total PAR irradiance need 
to be derived from these fixed bands.</a:documentation>
        <attribute name="rank">
          <value>0</value>
        </attribute>
        <attribute name="name">
          <value>IrradianceTemplate</value>
        </attribute>
        <element name="prescribed">
          <ref name="velocity_mesh_choice"/>
          <ref name="prescribed_scalar_field"/>
        </element>
      </element>
      <optional>
        <element name="scalar_field">
          <attribute name="rank">
            <value>0</value>
          </attribute>
          <attribute name="name">
            <value>IrradiancePAR</value>
          </attribute>
          <element name="diagnostic">
            <ref name="velocity_mesh_choice"/>
            <ref name="scalar_python_diagnostic_algorithm"/>
            <ref name="diagnostic_scalar_field_no_adapt"/>
          </element>
        </element>
      </optional>
      <element name="CDOM">
        <a:documentation>F, the ratio for correlated CDOM</a:documentation>
        <ref name="real"/>
      </element>
      <element name="BF_chl">
        <a:documentation>BF_chl, the backscatter fraction for chlorophyll-bearing particles</a:documentation>
        <ref name="real"/>
      </element>
      <optional>
        <element name="CloudCover">
          <a:documentation>Parameter for GC sky irradiance model - 
if provided this overwrites the values from the forcing routines.</a:documentation>
          <ref name="real"/>
        </element>
      </optional>
      <optional>
        <element name="WindSpeed">
          <a:documentation>Parameter for GC sky irradiance model - 
if provided this overwrites the values from the forcing routines.</a:documentation>
          <ref name="real"/>
        </element>
      </optional>
      <optional>
        <element name="EuphoticRatio">
          <a:documentation>Optional performance parameter that determines the percentage of 
surface irradiance at which the model stops computing.
Default is 0.01 = 1% (standard definition of euphotic depth)</a:documentation>
          <ref name="real"/>
        </element>
      </optional>
    </element>
  </define>
</grammar>
