lagrangian_biology =
   (
      ## Lagrangian particle biology from the VEW project.
      element lagrangian_ensemble_biology {
         element functional_group {
            attribute name { xsd:string },
            ## An agent's stage determines the update function
            element variable {
               attribute name { 'Stage' }
            },
            ## An agent's stage determines the update function
            element variable {
               attribute name { 'Biomass' },
               agent_diagnostic_field?
            },
            (
               ## Internal state variable of a biology agent
               element variable {
                  attribute name { xsd:string },
                  agent_diagnostic_field?
               }|
               ## Specify a chemical field from which the agent absorbs dissolved matter.
               ## The associated request field "<var_name>Request" gets scaled by availability 
               ## on the chemical_field, and added to the "<chem_field>Absorption". 
               ## The resulting scale factor gets published via the "<var_name>Depletion" field.
               element uptake_variable{
                  attribute name { xsd:string },
                  element chemical_field {
                     attribute name { xsd:string }
                  },
                  element scalar_field {
                     attribute rank { "0" },
                     attribute name { "Request" },
                     element diagnostic {
                        internal_algorithm,
                        velocity_mesh_choice,
                        diagnostic_scalar_field_no_adapt
                     }
                  },
                  element scalar_field {
                     attribute rank { "0" },
                     attribute name { "Depletion" },
                     element diagnostic {
                        internal_algorithm,
                        velocity_mesh_choice,
                        diagnostic_scalar_field_no_adapt
                     }
                  }
               }|
               ## Specify a chemical field to which the agent release matter
               ## The associated diagnostic field acts as a request to this field,
               ## which gets scaled by availability on the uptake field.
               ## The resulting depletion factor gets published via 
               ## an automatically inserted field "<diagnostic_field>_depletion"
               element release_variable{
                  attribute name { xsd:string },
                  element chemical_field {
                     attribute name { xsd:string }
                  },
                  element scalar_field {
                     attribute rank { "0" },
                     attribute name { "Release" },
                     element diagnostic {
                        internal_algorithm,
                        velocity_mesh_choice,
                        diagnostic_scalar_field_no_adapt
                     }
                  }
               }
            )*,
            ## Detectors with their locations specified via a python function or from a file. Allows detector arrays to be added.
            element stage_array {
               attribute name { xsd:string },
               ## Stage identifier
               element id { real },
               ## The number of detectors prescribed by the python function.
               element number_of_agents {
                  integer
               },                     
               ## Create detectors which move with the fluid velocity.
               element lagrangian {
                  empty
               },
               ## Enable to write detector output in binary format
               element binary_output {
                  empty
               },
               ## Python function prescribing dimensional vector input. Functions should be of the form:
               ##
               ##  def val(t):
               ##     # Function code
               ##     return # Return value
               ##
               ## The return value must have length number_of_detectors.
               ##
               ## *** IMPORTANT NOTE ***
               ##
               ## The t argument is for future use only - currently detector locations are only set at simulation start.
               element initial_position {
                  python_code
               },
               element initial_state {
                  element values {
                     real_vector
                  }
               },
               element random_walk {
                  ## Python function prescribing additional agent displacement due to turbulence. 
                  ## The return value will be added to the lagrangian advection at each sub-timestep. 
                  ## Fields should be pulled from 'state' before the val(ele, local_coord) function is evaluated.
                  ## Functions should be of the form:
                  ## 
                  ##  field = state.scalar_fields['Field_name']
                  ##
                  ##  def val(ele, local_coord):
                  ##     # x = field.eval_field(ele, local_coord)
                  ##     return # Return some f(x)
                  element python{
                     python_code
                  },
                  element random_seed{
                     integer
                  }
               }?,
               ## 
               element exclude_from_advection {
                  empty
               }?,
               (
                  ## Python code specifying the biology model for this type of agent.
                  element biology_update {
                     python_code
                  }|
                  ## Do not calculate biology
                  ## This option is generally only useful for testing. 
                  element disable_biology {
                     empty
                  }
               ),
               comment
            }*,
            lagrangian_timestepping
         }*
      }
   )

agent_diagnostic_field = 
   (
      ## Biology agent field
      element scalar_field {
         attribute rank { "0" },
         attribute name { xsd:string },
         element diagnostic {
            internal_algorithm,
            velocity_mesh_choice,
            diagnostic_scalar_field_no_adapt
         },
         (
            element global {
               empty
            }|
            element per_stage {
               empty
            }
         )
      }
   )

hyperlight = 
   (
      ## Hyperlight solar irradiance model, which 
      ## computes a fast approximation to the Radiative Transfer Equation.
      ## NOTE: This module requires fluidity to be compiled with the 
      ## --enable-hyperlight flag.
      element hyperlight {
         ## Hydrolight always computes the scalar irradiance 
         ## for 36 regular wavebands of width 10nm in PAR. 
         ## Particular wavebands or total PAR irradiance need 
         ## to be derived from these fixed bands.
         element scalar_field {
            attribute rank { "0" },
            attribute name { "IrradianceTemplate" },
            element prescribed {
               velocity_mesh_choice,
               prescribed_scalar_field
            }
         },
         element scalar_field {
            attribute rank { "0" },
            attribute name { "IrradiancePAR" },
            element diagnostic {
               velocity_mesh_choice,
               scalar_python_diagnostic_algorithm,
               diagnostic_scalar_field_no_adapt
            }
         }?,
         ## F, the ratio for correlated CDOM
         element CDOM {
            real
         },
         ## BF_chl, the backscatter fraction for chlorophyll-bearing particles
         element BF_chl {
            real
         },
         ## Parameter for GC sky irradiance model - 
         ## if provided this overwrites the values from the forcing routines.
         element CloudCover {
            real
         }?,
         ## Parameter for GC sky irradiance model - 
         ## if provided this overwrites the values from the forcing routines.
         element WindSpeed {
            real
         }?,
         ## Optional performance parameter that determines the percentage of 
         ## surface irradiance at which the model stops computing.
         ## Default is 0.01 = 1% (standard definition of euphotic depth)
         element EuphoticRatio {
            real
         }?
      }
   )
