lagrangian_biology =
   (
      ## Lagrangian particle biology from the VEW project.
      element lagrangian_ensemble_biology {
         mesh_choice,
         ## Seed used for the random number generator. 
         element random_seed{
            integer
         },
         ## A Functional Group (FG) is an abstraction to define the characteristic behaviour of one or more species of plankton agents. 
         ## The Functional Group defines the internal variables an agent will store and the environment fields an agent needs to sample. 
         ## The concrete behaviour of an agent, however, is defined by the stage the agent is in. Stage changes are only permitted within Functional Groups. 
         element functional_group {
            attribute name { xsd:string },
            ## The variables of an agent define its individual internal state. 
            ## Several types of variables are available: 
            ## state_variable defines an arbitrary internal property; 
            ## chemical_variable defines an internal pool of chemicals that can be exchanged with the environment. 
            element variables {
               ## An agent's stage determines the update function to apply at each timestep.
               element state_variable {
                  attribute name { 'Stage' }
               },
               ## Dynamic size of the ensemble the agent represents. 
               ## All internal quantities that are exchanged with the environment get scaled by this factor.
               element state_variable {
                  attribute name { 'Size' },
                  ## Biology agent field
                  element scalar_field {
                     attribute name { 'Ensemble' },
                     element diagnostic {
                        internal_algorithm,
                        diagnostic_scalar_field_no_adapt
                     },
                     ## Add diagnostic field that represents the total quantity across all stages of the FG.
                     element stage_aggregate {
                        empty
                     }?
                  }
               },
               (
                  ## Internal state variable of a biology agent that defines an arbitrary internal property.
                  element state_variable {
                     attribute name { xsd:string },
                     # Agent diagnostic field
                     element scalar_field {
                        attribute name { xsd:string },
                        element diagnostic {
                           internal_algorithm,
                           diagnostic_scalar_field_no_adapt
                        },
                        ## Add diagnostic field that represents the total quantity across all stages of the FG.
                        element stage_aggregate {
                           empty
                        }?
                     }?
                  }|
                  ## State variable representing the internal chemical pool of an agent. 
                  ## Chemicals can be exchanged with the environment via the 'release' and 'uptake' options. 
                  ## This requires a dissolved chemical field from the main material_phase to be bound to this agent variable. 
                  ## The associated source and absorption fields will then get set from the accumulated particulate quantities.
                  element chemical_variable {
                     attribute name { xsd:string },
                     ## Eulerian diagnostic field representing the particulate amount of this chemical. 
                     ## This field must be on a discontinuous mesh
                     element scalar_field {
                        attribute name { 'Particulate' },
                        element diagnostic {
                           internal_algorithm,
                           diagnostic_scalar_field_no_adapt
                        },
                        ## Add diagnostic field that represents the total quantity across all stages of the FG.
                        element stage_aggregate {
                           empty
                        }?
                     }?,
                     ## Name of the field representing the dissolved chemical in the environment.
                     ## This option is required if 'uptake' or 'release' are specified.
                     element chemical_field {
                        attribute name { xsd:string }
                     }?,
                     ## Option to define chemical uptake from the environment. 
                     ## This will create internal fields to represent the accumulated requested quantity 
                     ## and the depletion factor, which scales the amount actually ingested by the agent 
                     ## according to availability in the environment. 
                     ## The scaled request quantity will then get added to the according absorption field of the dissolved chemical.
                     element uptake {
                        ## Request field on a discontinuous mesh mesh
                        element scalar_field {
                           attribute name { "Request" },
                           element diagnostic {
                              internal_algorithm,
                              diagnostic_scalar_field_no_adapt
                           },
                           ## Add diagnostic field that represents the total quantity across all stages of the FG.
                           element stage_aggregate {
                              empty
                           }?
                        },
                        ## Depletion factor
                        element scalar_field {
                           attribute name { "Depletion" },
                           element diagnostic {
                              internal_algorithm,
                              diagnostic_scalar_field_no_adapt
                           }
                        }
                     }?,
                     ## Option to define chemical release into the environment. 
                     ## This will create internal fields to represent the accumulated release quantity.
                     ## The scaled release quantity will then get added to the according source field of the dissolved chemical.
                     element release {
                        ## Release field on a discontinuous mesh mesh
                        element scalar_field {
                           attribute name { "Release" },
                           element diagnostic {
                              internal_algorithm,
                              diagnostic_scalar_field_no_adapt
                           },
                           ## Add diagnostic field that represents the total quantity across all stages of the FG.
                           element stage_aggregate {
                              empty
                           }?
                        }
                     }?
                  }
               )*
            },
            ## This option holds a list of fields that define the ambient environment for agents of this Functional Group. 
            ## The local values of fields listed here will be presented in a dictionary 'environment' to the agent update function.
            element environment {
               ## Environment field whose ambient value will be presented to the update code in the 'environment' dictionary.
               element field {
                  attribute name { xsd:string }
               }*
            },
            ##
            element stages {
               ## Detectors with their locations specified via a python function or from a file. Allows detector arrays to be added.
               element stage {
                  comment,
                  attribute name { xsd:string },
                  ## Stage identifier
                  element id { real },
                  ## The number of detectors prescribed by the python function.
                  element number_of_agents {
                     integer
                  },                     
                  ## Python function prescribing dimensional vector input. Functions should be of the form:
                  ##
                  ##  def val(t):
                  ##     # Function code
                  ##     return # Return value
                  ##
                  ## The return value must have length number_of_detectors.
                  ##
                  ## *** IMPORTANT NOTE ***
                  ##
                  ## The t argument is for future use only - currently detector locations are only set at simulation start.
                  element initial_position {
                     python_code
                  },
                  ## Python function to set the initial state of the agent. 
                  ## A dictionary mapping variable name to value gets passed to the function, where the stage ID is already set,
                  ## which needs to be returned with the appropriate initial variable values, eg.:
                  ##
                  ##  def val(biovars):
                  ##      biovars['VarName'] = 1.0
                  ##      return biovars
                  element initial_state {
                     python_code
                  },
                  ##
                  element random_walk {
                     (
                        ## Python function prescribing additional agent displacement due to turbulence. 
                        ## The return value will be added to the lagrangian advection at each sub-timestep. 
                        ## Fields should be pulled from 'state' before the val(ele, local_coord) function is evaluated.
                        ## Functions should be of the form:
                        ## 
                        ##  field = state.scalar_fields['Field_name']
                        ##
                        ##  def val(ele, local_coord):
                        ##     # x = field.eval_field(ele, local_coord)
                        ##     return # Return some f(x)
                        element python{
                           python_code
                        }|
                        ## Hardcoded Random Walk scheme for non-homogeneous diffusivity fields.
                        ## Described in Visser, 1997 and Ross and Sharples, 2004.
                        ## Requires name of diffusivity field and according gradient field.
                        element diffusive_random_walk {
                           attribute diffusivity_field { xsd:string },
                           attribute diffusivity_gradient { xsd:string },
                           element auto_subcycle {
                              attribute diffusivity_2nd_gradient { xsd:string },
                              element scale_factor { 
                                 real
                              }
                           }?
                        }|
                        ## Hardcoded Naive Random Walk scheme for verifying the RNG
                        element naive_random_walk {
                           attribute diffusivity_field { xsd:string }
                        }
                     )
                  }?,
                  (
                     ## Python code specifying the biology model for this type of agent.
                     element biology_update {
                        python_code
                     }|
                     ## Do not calculate biology
                     ## This option is generally only useful for testing. 
                     element disable_biology {
                        empty
                     }
                  ),
                  ## Particle Management rules
                  element particle_management {
                     element period_in_timesteps {
                        integer
                     },
                     element minimum {
                        real
                     },
                     element maximum {
                        real
                     }
                  }?,
                  ## Debug options
                  element debug {
                     ## Skip velocity advection algorithm (RK-GS)
                     element exclude_from_advection {
                        empty
                     }?
                  }?
               }*
            },
            ## Number of agents
            element scalar_field {
               attribute name { 'Agents' },
               element diagnostic {
                  internal_algorithm,
                  diagnostic_scalar_field_no_adapt
               }
            },
            lagrangian_timestepping
         }*
      }
   )

hyperlight = 
   (
      ## Hyperlight solar irradiance model, which 
      ## computes a fast approximation to the Radiative Transfer Equation.
      ## NOTE: This module requires fluidity to be compiled with the 
      ## --enable-hyperlight flag.
      element hyperlight {
         ## Hydrolight always computes the scalar irradiance 
         ## for 36 regular wavebands of width 10nm in PAR. 
         ## Particular wavebands or total PAR irradiance need 
         ## to be derived from these fixed bands.
         element scalar_field {
            attribute rank { "0" },
            attribute name { "IrradianceTemplate" },
            element prescribed {
               velocity_mesh_choice,
               prescribed_scalar_field
            }
         },
         element scalar_field {
            attribute rank { "0" },
            attribute name { "IrradiancePAR" },
            element diagnostic {
               velocity_mesh_choice,
               scalar_python_diagnostic_algorithm,
               diagnostic_scalar_field_no_adapt
            }
         }?,
         ## F, the ratio for correlated CDOM
         element CDOM {
            real
         },
         ## BF_chl, the backscatter fraction for chlorophyll-bearing particles
         element BF_chl {
            real
         },
         ## Parameter for GC sky irradiance model - 
         ## if provided this overwrites the values from the forcing routines.
         element CloudCover {
            real
         }?,
         ## Parameter for GC sky irradiance model - 
         ## if provided this overwrites the values from the forcing routines.
         element WindSpeed {
            real
         }?,
         ## Optional performance parameter that determines the percentage of 
         ## surface irradiance at which the model stops computing.
         ## Default is 0.01 = 1% (standard definition of euphotic depth)
         element EuphoticRatio {
            real
         }?
      }
   )
